
led_text_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007990  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08007aa0  08007aa0  00008aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e54  08007e54  00008e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e5c  08007e5c  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e5c  08007e5c  00008e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e60  08007e60  00008e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007e64  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  200001d4  08008038  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08008038  000095b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe8f  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccf  00000000  00000000  0001908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be9  00000000  00000000  0001ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040e0  00000000  00000000  0001d8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138a3  00000000  00000000  00021999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009188f  00000000  00000000  0003523c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6acb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de8  00000000  00000000  000c6b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000cb8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a88 	.word	0x08007a88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007a88 	.word	0x08007a88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <hal_ledpwm>:

extern uint32_t led;

/*确定范围*/
void hal_ledpwm(uint32_t a)
  {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	  if (a<=0)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d109      	bne.n	8000aaa <hal_ledpwm+0x22>
	  {
		  led=0;
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <hal_ledpwm+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
		  MX_TIM1_Init();
 8000a9c:	f000 fc1e 	bl	80012dc <MX_TIM1_Init>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4813      	ldr	r0, [pc, #76]	@ (8000af0 <hal_ledpwm+0x68>)
 8000aa4:	f002 ff34 	bl	8003910 <HAL_TIM_PWM_Stop>
	  {
		  led=a;
		  MX_TIM1_Init();
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);//输出tim1的pwm波
	  }
  }
 8000aa8:	e01b      	b.n	8000ae2 <hal_ledpwm+0x5a>
	  else if (a>=100)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b63      	cmp	r3, #99	@ 0x63
 8000aae:	d909      	bls.n	8000ac4 <hal_ledpwm+0x3c>
		  led=99.9;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <hal_ledpwm+0x64>)
 8000ab2:	2263      	movs	r2, #99	@ 0x63
 8000ab4:	601a      	str	r2, [r3, #0]
		  MX_TIM1_Init();
 8000ab6:	f000 fc11 	bl	80012dc <MX_TIM1_Init>
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);//输出tim1的pwm波
 8000aba:	2100      	movs	r1, #0
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <hal_ledpwm+0x68>)
 8000abe:	f002 fe85 	bl	80037cc <HAL_TIM_PWM_Start>
  }
 8000ac2:	e00e      	b.n	8000ae2 <hal_ledpwm+0x5a>
	  else if(a>0&&a<100)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <hal_ledpwm+0x5a>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b63      	cmp	r3, #99	@ 0x63
 8000ace:	d808      	bhi.n	8000ae2 <hal_ledpwm+0x5a>
		  led=a;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	@ (8000aec <hal_ledpwm+0x64>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
		  MX_TIM1_Init();
 8000ad6:	f000 fc01 	bl	80012dc <MX_TIM1_Init>
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);//输出tim1的pwm波
 8000ada:	2100      	movs	r1, #0
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <hal_ledpwm+0x68>)
 8000ade:	f002 fe75 	bl	80037cc <HAL_TIM_PWM_Start>
  }
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000022c 	.word	0x2000022c
 8000af0:	20000230 	.word	0x20000230

08000af4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b06:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <MX_ADC1_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b1e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b30:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b32:	f000 ff73 	bl	8001a1c <HAL_ADC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 fa29 	bl	8000f92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_ADC1_Init+0x74>)
 8000b52:	f001 f90d 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b5c:	f000 fa19 	bl	8000f92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001f0 	.word	0x200001f0
 8000b6c:	40012400 	.word	0x40012400

08000b70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a18      	ldr	r2, [pc, #96]	@ (8000bec <HAL_ADC_MspInit+0x7c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d129      	bne.n	8000be4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a16      	ldr	r2, [pc, #88]	@ (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a10      	ldr	r2, [pc, #64]	@ (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <HAL_ADC_MspInit+0x80>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ao_Pin;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ao_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <HAL_ADC_MspInit+0x84>)
 8000bd0:	f001 fe3c 	bl	800284c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 6, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2106      	movs	r1, #6
 8000bd8:	2012      	movs	r0, #18
 8000bda:	f001 fbec 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bde:	2012      	movs	r0, #18
 8000be0:	f001 fc05 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40012400 	.word	0x40012400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfe:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_DMA_Init+0x68>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a17      	ldr	r2, [pc, #92]	@ (8000c60 <MX_DMA_Init+0x68>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_DMA_Init+0x68>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	200c      	movs	r0, #12
 8000c1c:	f001 fbcb 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c20:	200c      	movs	r0, #12
 8000c22:	f001 fbe4 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	200d      	movs	r0, #13
 8000c2c:	f001 fbc3 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c30:	200d      	movs	r0, #13
 8000c32:	f001 fbdc 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200e      	movs	r0, #14
 8000c3c:	f001 fbbb 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c40:	200e      	movs	r0, #14
 8000c42:	f001 fbd4 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f001 fbb3 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c50:	200f      	movs	r0, #15
 8000c52:	f001 fbcc 	bl	80023ee <HAL_NVIC_EnableIRQ>

}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000

08000c64 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c78:	4b37      	ldr	r3, [pc, #220]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a36      	ldr	r2, [pc, #216]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b34      	ldr	r3, [pc, #208]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c90:	4b31      	ldr	r3, [pc, #196]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a30      	ldr	r2, [pc, #192]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000c96:	f043 0320 	orr.w	r3, r3, #32
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0320 	and.w	r3, r3, #32
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a2a      	ldr	r2, [pc, #168]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a24      	ldr	r2, [pc, #144]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <MX_GPIO_Init+0xf4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cde:	481f      	ldr	r0, [pc, #124]	@ (8000d5c <MX_GPIO_Init+0xf8>)
 8000ce0:	f001 ff38 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4817      	ldr	r0, [pc, #92]	@ (8000d5c <MX_GPIO_Init+0xf8>)
 8000cfe:	f001 fda5 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : red_Pin key1_Pin key2_Pin key3_Pin
                           key4_Pin */
  GPIO_InitStruct.Pin = red_Pin|key1_Pin|key2_Pin|key3_Pin
 8000d02:	f24f 0301 	movw	r3, #61441	@ 0xf001
 8000d06:	613b      	str	r3, [r7, #16]
                          |key4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4812      	ldr	r0, [pc, #72]	@ (8000d60 <MX_GPIO_Init+0xfc>)
 8000d18:	f001 fd98 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : key5_Pin */
  GPIO_InitStruct.Pin = key5_Pin;
 8000d1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(key5_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <MX_GPIO_Init+0x100>)
 8000d32:	f001 fd8b 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d36:	23c0      	movs	r3, #192	@ 0xc0
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_GPIO_Init+0xfc>)
 8000d4a:	f001 fd7f 	bl	800284c <HAL_GPIO_Init>

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40011000 	.word	0x40011000
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	40010800 	.word	0x40010800

08000d68 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

/*
 * RX回调函数
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a37      	ldr	r2, [pc, #220]	@ (8000e54 <HAL_UART_RxCpltCallback+0xec>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d167      	bne.n	8000e4a <HAL_UART_RxCpltCallback+0xe2>
        // 检查起始字节是否为0xAA
        if (uart3_rx_buf[0] == 0xAA) {
 8000d7a:	4b37      	ldr	r3, [pc, #220]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2baa      	cmp	r3, #170	@ 0xaa
 8000d80:	d15e      	bne.n	8000e40 <HAL_UART_RxCpltCallback+0xd8>
            // 通过UART1非阻塞发送数据
            HAL_UART_Transmit_IT(&huart1, uart3_rx_buf, RX_BUF_SIZE);
 8000d82:	2203      	movs	r2, #3
 8000d84:	4934      	ldr	r1, [pc, #208]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000d86:	4835      	ldr	r0, [pc, #212]	@ (8000e5c <HAL_UART_RxCpltCallback+0xf4>)
 8000d88:	f003 fc8d 	bl	80046a6 <HAL_UART_Transmit_IT>
            if(uart3_rx_buf[1] == 0x01 && uart3_rx_buf[2] == 0x01 && a == 0){
 8000d8c:	4b32      	ldr	r3, [pc, #200]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000d8e:	785b      	ldrb	r3, [r3, #1]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d112      	bne.n	8000dba <HAL_UART_RxCpltCallback+0x52>
 8000d94:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000d96:	789b      	ldrb	r3, [r3, #2]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d10e      	bne.n	8000dba <HAL_UART_RxCpltCallback+0x52>
 8000d9c:	4b30      	ldr	r3, [pc, #192]	@ (8000e60 <HAL_UART_RxCpltCallback+0xf8>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10a      	bne.n	8000dba <HAL_UART_RxCpltCallback+0x52>
            	led=50;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000da6:	2232      	movs	r2, #50	@ 0x32
 8000da8:	601a      	str	r2, [r3, #0]
            	hal_ledpwm(led);//调pwm波开灯
 8000daa:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fe6a 	bl	8000a88 <hal_ledpwm>
            	a=1;
 8000db4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <HAL_UART_RxCpltCallback+0xf8>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
            }
            if(uart3_rx_buf[1] == 0x10 && uart3_rx_buf[2] == 0x10 && a == 1){
 8000dba:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000dbc:	785b      	ldrb	r3, [r3, #1]
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d112      	bne.n	8000de8 <HAL_UART_RxCpltCallback+0x80>
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000dc4:	789b      	ldrb	r3, [r3, #2]
 8000dc6:	2b10      	cmp	r3, #16
 8000dc8:	d10e      	bne.n	8000de8 <HAL_UART_RxCpltCallback+0x80>
 8000dca:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <HAL_UART_RxCpltCallback+0xf8>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d10a      	bne.n	8000de8 <HAL_UART_RxCpltCallback+0x80>
            	led=0;
 8000dd2:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
            	hal_ledpwm(led);//调pwm波关灯
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fe53 	bl	8000a88 <hal_ledpwm>
            	a=0;
 8000de2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <HAL_UART_RxCpltCallback+0xf8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
            }
            if(uart3_rx_buf[1] == 0x10 && uart3_rx_buf[2] == 0x01 && a == 1){
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	2b10      	cmp	r3, #16
 8000dee:	d111      	bne.n	8000e14 <HAL_UART_RxCpltCallback+0xac>
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000df2:	789b      	ldrb	r3, [r3, #2]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d10d      	bne.n	8000e14 <HAL_UART_RxCpltCallback+0xac>
 8000df8:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <HAL_UART_RxCpltCallback+0xf8>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d109      	bne.n	8000e14 <HAL_UART_RxCpltCallback+0xac>
            	led=led+10;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	330a      	adds	r3, #10
 8000e06:	4a17      	ldr	r2, [pc, #92]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000e08:	6013      	str	r3, [r2, #0]
                hal_ledpwm(led);//调pwm波
 8000e0a:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe3a 	bl	8000a88 <hal_ledpwm>
            }
            if(uart3_rx_buf[1] == 0x10 && uart3_rx_buf[2] == 0x01 && a == 1){
 8000e14:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	2b10      	cmp	r3, #16
 8000e1a:	d111      	bne.n	8000e40 <HAL_UART_RxCpltCallback+0xd8>
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000e1e:	789b      	ldrb	r3, [r3, #2]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10d      	bne.n	8000e40 <HAL_UART_RxCpltCallback+0xd8>
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_UART_RxCpltCallback+0xf8>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d109      	bne.n	8000e40 <HAL_UART_RxCpltCallback+0xd8>
                led=led-10;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3b0a      	subs	r3, #10
 8000e32:	4a0c      	ldr	r2, [pc, #48]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000e34:	6013      	str	r3, [r2, #0]
                hal_ledpwm(led);//调pwm波
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_UART_RxCpltCallback+0xfc>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe24 	bl	8000a88 <hal_ledpwm>
            }
        }
        // 重新启动接收
        HAL_UART_Receive_IT(&huart3, uart3_rx_buf, RX_BUF_SIZE);
 8000e40:	2203      	movs	r2, #3
 8000e42:	4905      	ldr	r1, [pc, #20]	@ (8000e58 <HAL_UART_RxCpltCallback+0xf0>)
 8000e44:	4808      	ldr	r0, [pc, #32]	@ (8000e68 <HAL_UART_RxCpltCallback+0x100>)
 8000e46:	f003 fc63 	bl	8004710 <HAL_UART_Receive_IT>
    }
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004800 	.word	0x40004800
 8000e58:	20000224 	.word	0x20000224
 8000e5c:	200002c0 	.word	0x200002c0
 8000e60:	20000220 	.word	0x20000220
 8000e64:	2000022c 	.word	0x2000022c
 8000e68:	20000308 	.word	0x20000308

08000e6c <HAL_UART_TxCpltCallback>:

/*
 * TX回调函数
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {

	    }
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f000 fd68 	bl	8001958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f828 	bl	8000edc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // 检查HSI时钟状态
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <main+0x4c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <main+0x1c>
  Error_Handler();
 8000e98:	f000 f87b 	bl	8000f92 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9c:	f7ff fee2 	bl	8000c64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea0:	f7ff feaa 	bl	8000bf8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ea4:	f7ff fe26 	bl	8000af4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ea8:	f000 fa18 	bl	80012dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eac:	f000 fabe 	bl	800142c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000eb0:	f000 fb96 	bl	80015e0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000eb4:	f000 fbbe 	bl	8001634 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <main+0x50>)
 8000eba:	f001 f8ed 	bl	8002098 <HAL_ADCEx_Calibration_Start>

  HAL_UART_Receive_IT(&huart3, uart3_rx_buf, RX_BUF_SIZE);
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4904      	ldr	r1, [pc, #16]	@ (8000ed4 <main+0x54>)
 8000ec2:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <main+0x58>)
 8000ec4:	f003 fc24 	bl	8004710 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <main+0x48>
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	200001f0 	.word	0x200001f0
 8000ed4:	20000224 	.word	0x20000224
 8000ed8:	20000308 	.word	0x20000308

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	@ 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ee6:	2228      	movs	r2, #40	@ 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fe9d 	bl	8005c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f28:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fe26 	bl	8002b84 <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f3e:	f000 f828 	bl	8000f92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 f892 	bl	8003088 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f6a:	f000 f812 	bl	8000f92 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f76:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fa12 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f86:	f000 f804 	bl	8000f92 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	@ 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f96:	b672      	cpsid	i
}
 8000f98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9a:	bf00      	nop
 8000f9c:	e7fd      	b.n	8000f9a <Error_Handler+0x8>
	...

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_MspInit+0x5c>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <HAL_MspInit+0x5c>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_MspInit+0x5c>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_MspInit+0x5c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_MspInit+0x5c>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HAL_MspInit+0x5c>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_MspInit+0x60>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <HAL_MspInit+0x60>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <NMI_Handler+0x4>

0800100c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <MemManage_Handler+0x4>

0800101c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <UsageFault_Handler+0x4>

0800102c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 fcc6 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <DMA1_Channel2_IRQHandler+0x10>)
 8001062:	f001 faed 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200003d8 	.word	0x200003d8

08001070 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <DMA1_Channel3_IRQHandler+0x10>)
 8001076:	f001 fae3 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000041c 	.word	0x2000041c

08001084 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <DMA1_Channel4_IRQHandler+0x10>)
 800108a:	f001 fad9 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000394 	.word	0x20000394

08001098 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DMA1_Channel5_IRQHandler+0x10>)
 800109e:	f001 facf 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000350 	.word	0x20000350

080010ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <ADC1_2_IRQHandler+0x10>)
 80010b2:	f000 fd8b 	bl	8001bcc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001f0 	.word	0x200001f0

080010c0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <TIM1_BRK_IRQHandler+0x10>)
 80010c6:	f002 fc87 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000230 	.word	0x20000230

080010d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <TIM1_UP_IRQHandler+0x10>)
 80010da:	f002 fc7d 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000230 	.word	0x20000230

080010e8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80010ee:	f002 fc73 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000230 	.word	0x20000230

080010fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <TIM1_CC_IRQHandler+0x10>)
 8001102:	f002 fc69 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000230 	.word	0x20000230

08001110 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM2_IRQHandler+0x10>)
 8001116:	f002 fc5f 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000278 	.word	0x20000278

08001124 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <USART1_IRQHandler+0x10>)
 800112a:	f003 fb17 	bl	800475c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002c0 	.word	0x200002c0

08001138 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <USART3_IRQHandler+0x10>)
 800113e:	f003 fb0d 	bl	800475c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000308 	.word	0x20000308

0800114c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <_kill>:

int _kill(int pid, int sig)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001164:	f004 fdb4 	bl	8005cd0 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	2216      	movs	r2, #22
 800116c:	601a      	str	r2, [r3, #0]
  return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_exit>:

void _exit (int status)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001182:	f04f 31ff 	mov.w	r1, #4294967295
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffe7 	bl	800115a <_kill>
  while (1) {}    /* Make sure we hang here */
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <_exit+0x12>

08001190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e00a      	b.n	80011b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a2:	f3af 8000 	nop.w
 80011a6:	4601      	mov	r1, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	b2ca      	uxtb	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbf0      	blt.n	80011a2 <_read+0x12>
  }

  return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e009      	b.n	80011f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf1      	blt.n	80011dc <_write+0x12>
  }
  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_close>:

int _close(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001228:	605a      	str	r2, [r3, #4]
  return 0;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <_isatty>:

int _isatty(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
	...

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f004 fd1c 	bl	8005cd0 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20005000 	.word	0x20005000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	20000228 	.word	0x20000228
 80012cc:	200005b0 	.word	0x200005b0

080012d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b096      	sub	sp, #88	@ 0x58
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f004 fc88 	bl	8005c2a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800131a:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <MX_TIM1_Init+0x144>)
 800131c:	4a41      	ldr	r2, [pc, #260]	@ (8001424 <MX_TIM1_Init+0x148>)
 800131e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001320:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001322:	2247      	movs	r2, #71	@ 0x47
 8001324:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b3e      	ldr	r3, [pc, #248]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800132c:	4b3c      	ldr	r3, [pc, #240]	@ (8001420 <MX_TIM1_Init+0x144>)
 800132e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800133a:	4b39      	ldr	r3, [pc, #228]	@ (8001420 <MX_TIM1_Init+0x144>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001340:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001342:	2280      	movs	r2, #128	@ 0x80
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001346:	4836      	ldr	r0, [pc, #216]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001348:	f002 f998 	bl	800367c <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001352:	f7ff fe1e 	bl	8000f92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800135c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001360:	4619      	mov	r1, r3
 8001362:	482f      	ldr	r0, [pc, #188]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001364:	f002 fcea 	bl	8003d3c <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800136e:	f7ff fe10 	bl	8000f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001372:	482b      	ldr	r0, [pc, #172]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001374:	f002 f9d1 	bl	800371a <HAL_TIM_PWM_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800137e:	f7ff fe08 	bl	8000f92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800138e:	4619      	mov	r1, r3
 8001390:	4823      	ldr	r0, [pc, #140]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001392:	f003 f877 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800139c:	f7ff fdf9 	bl	8000f92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a0:	2360      	movs	r3, #96	@ 0x60
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = led*10;
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <MX_TIM1_Init+0x14c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013ba:	2304      	movs	r3, #4
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	4619      	mov	r1, r3
 80013ce:	4814      	ldr	r0, [pc, #80]	@ (8001420 <MX_TIM1_Init+0x144>)
 80013d0:	f002 fbf2 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80013da:	f7ff fdda 	bl	8000f92 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001402:	f003 f89d 	bl	8004540 <HAL_TIMEx_ConfigBreakDeadTime>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800140c:	f7ff fdc1 	bl	8000f92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MX_TIM1_Init+0x144>)
 8001412:	f000 f8b1 	bl	8001578 <HAL_TIM_MspPostInit>

}
 8001416:	bf00      	nop
 8001418:	3758      	adds	r7, #88	@ 0x58
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000230 	.word	0x20000230
 8001424:	40012c00 	.word	0x40012c00
 8001428:	2000022c 	.word	0x2000022c

0800142c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001448:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <MX_TIM2_Init+0x98>)
 800144a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800144e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001450:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <MX_TIM2_Init+0x98>)
 8001452:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_TIM2_Init+0x98>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <MX_TIM2_Init+0x98>)
 8001460:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <MX_TIM2_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <MX_TIM2_Init+0x98>)
 800146e:	2280      	movs	r2, #128	@ 0x80
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001472:	4814      	ldr	r0, [pc, #80]	@ (80014c4 <MX_TIM2_Init+0x98>)
 8001474:	f002 f902 	bl	800367c <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800147e:	f7ff fd88 	bl	8000f92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	@ (80014c4 <MX_TIM2_Init+0x98>)
 8001490:	f002 fc54 	bl	8003d3c <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800149a:	f7ff fd7a 	bl	8000f92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <MX_TIM2_Init+0x98>)
 80014ac:	f002 ffea 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014b6:	f7ff fd6c 	bl	8000f92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000278 	.word	0x20000278

080014c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <HAL_TIM_Base_MspInit+0xa8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12c      	bne.n	8001534 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <HAL_TIM_Base_MspInit+0xac>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a25      	ldr	r2, [pc, #148]	@ (8001574 <HAL_TIM_Base_MspInit+0xac>)
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_TIM_Base_MspInit+0xac>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2018      	movs	r0, #24
 80014f8:	f000 ff5d 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80014fc:	2018      	movs	r0, #24
 80014fe:	f000 ff76 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2102      	movs	r1, #2
 8001506:	2019      	movs	r0, #25
 8001508:	f000 ff55 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800150c:	2019      	movs	r0, #25
 800150e:	f000 ff6e 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	201a      	movs	r0, #26
 8001518:	f000 ff4d 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800151c:	201a      	movs	r0, #26
 800151e:	f000 ff66 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	201b      	movs	r0, #27
 8001528:	f000 ff45 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800152c:	201b      	movs	r0, #27
 800152e:	f000 ff5e 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001532:	e018      	b.n	8001566 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800153c:	d113      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800153e:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <HAL_TIM_Base_MspInit+0xac>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <HAL_TIM_Base_MspInit+0xac>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_TIM_Base_MspInit+0xac>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2103      	movs	r1, #3
 800155a:	201c      	movs	r0, #28
 800155c:	f000 ff2b 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001560:	201c      	movs	r0, #28
 8001562:	f000 ff44 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40012c00 	.word	0x40012c00
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <HAL_TIM_MspPostInit+0x5c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d118      	bne.n	80015ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_TIM_MspPostInit+0x60>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_TIM_MspPostInit+0x60>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_TIM_MspPostInit+0x60>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = led_Pin;
 80015b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <HAL_TIM_MspPostInit+0x64>)
 80015c6:	f001 f941 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010800 	.word	0x40010800

080015e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <MX_USART1_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 8001618:	f002 fff5 	bl	8004606 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f7ff fcb6 	bl	8000f92 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200002c0 	.word	0x200002c0
 8001630:	40013800 	.word	0x40013800

08001634 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <MX_USART3_UART_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_USART3_UART_Init+0x4c>)
 800166c:	f002 ffcb 	bl	8004606 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001676:	f7ff fc8c 	bl	8000f92 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000308 	.word	0x20000308
 8001684:	40004800 	.word	0x40004800

08001688 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a8d      	ldr	r2, [pc, #564]	@ (80018d8 <HAL_UART_MspInit+0x250>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	f040 8087 	bne.w	80017b8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016aa:	4b8c      	ldr	r3, [pc, #560]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a8b      	ldr	r2, [pc, #556]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b89      	ldr	r3, [pc, #548]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b86      	ldr	r3, [pc, #536]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4a85      	ldr	r2, [pc, #532]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6193      	str	r3, [r2, #24]
 80016ce:	4b83      	ldr	r3, [pc, #524]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0318 	add.w	r3, r7, #24
 80016ec:	4619      	mov	r1, r3
 80016ee:	487c      	ldr	r0, [pc, #496]	@ (80018e0 <HAL_UART_MspInit+0x258>)
 80016f0:	f001 f8ac 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	4619      	mov	r1, r3
 8001708:	4875      	ldr	r0, [pc, #468]	@ (80018e0 <HAL_UART_MspInit+0x258>)
 800170a:	f001 f89f 	bl	800284c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800170e:	4b75      	ldr	r3, [pc, #468]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 8001710:	4a75      	ldr	r2, [pc, #468]	@ (80018e8 <HAL_UART_MspInit+0x260>)
 8001712:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001714:	4b73      	ldr	r3, [pc, #460]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171a:	4b72      	ldr	r3, [pc, #456]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001720:	4b70      	ldr	r3, [pc, #448]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 8001722:	2280      	movs	r2, #128	@ 0x80
 8001724:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001726:	4b6f      	ldr	r3, [pc, #444]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172c:	4b6d      	ldr	r3, [pc, #436]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001732:	4b6c      	ldr	r3, [pc, #432]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001738:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800173e:	4869      	ldr	r0, [pc, #420]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 8001740:	f000 fe70 	bl	8002424 <HAL_DMA_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800174a:	f7ff fc22 	bl	8000f92 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a64      	ldr	r2, [pc, #400]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 8001752:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001754:	4a63      	ldr	r2, [pc, #396]	@ (80018e4 <HAL_UART_MspInit+0x25c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800175a:	4b64      	ldr	r3, [pc, #400]	@ (80018ec <HAL_UART_MspInit+0x264>)
 800175c:	4a64      	ldr	r2, [pc, #400]	@ (80018f0 <HAL_UART_MspInit+0x268>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001760:	4b62      	ldr	r3, [pc, #392]	@ (80018ec <HAL_UART_MspInit+0x264>)
 8001762:	2210      	movs	r2, #16
 8001764:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b61      	ldr	r3, [pc, #388]	@ (80018ec <HAL_UART_MspInit+0x264>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b5f      	ldr	r3, [pc, #380]	@ (80018ec <HAL_UART_MspInit+0x264>)
 800176e:	2280      	movs	r2, #128	@ 0x80
 8001770:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001772:	4b5e      	ldr	r3, [pc, #376]	@ (80018ec <HAL_UART_MspInit+0x264>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001778:	4b5c      	ldr	r3, [pc, #368]	@ (80018ec <HAL_UART_MspInit+0x264>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800177e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ec <HAL_UART_MspInit+0x264>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_UART_MspInit+0x264>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800178a:	4858      	ldr	r0, [pc, #352]	@ (80018ec <HAL_UART_MspInit+0x264>)
 800178c:	f000 fe4a 	bl	8002424 <HAL_DMA_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001796:	f7ff fbfc 	bl	8000f92 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a53      	ldr	r2, [pc, #332]	@ (80018ec <HAL_UART_MspInit+0x264>)
 800179e:	639a      	str	r2, [r3, #56]	@ 0x38
 80017a0:	4a52      	ldr	r2, [pc, #328]	@ (80018ec <HAL_UART_MspInit+0x264>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2025      	movs	r0, #37	@ 0x25
 80017ac:	f000 fe03 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017b0:	2025      	movs	r0, #37	@ 0x25
 80017b2:	f000 fe1c 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017b6:	e08b      	b.n	80018d0 <HAL_UART_MspInit+0x248>
  else if(uartHandle->Instance==USART3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a4d      	ldr	r2, [pc, #308]	@ (80018f4 <HAL_UART_MspInit+0x26c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	f040 8086 	bne.w	80018d0 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017c4:	4b45      	ldr	r3, [pc, #276]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	4a44      	ldr	r2, [pc, #272]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80017ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ce:	61d3      	str	r3, [r2, #28]
 80017d0:	4b42      	ldr	r3, [pc, #264]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a3e      	ldr	r2, [pc, #248]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b3c      	ldr	r3, [pc, #240]	@ (80018dc <HAL_UART_MspInit+0x254>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	4619      	mov	r1, r3
 8001808:	483b      	ldr	r0, [pc, #236]	@ (80018f8 <HAL_UART_MspInit+0x270>)
 800180a:	f001 f81f 	bl	800284c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800180e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	4619      	mov	r1, r3
 8001822:	4835      	ldr	r0, [pc, #212]	@ (80018f8 <HAL_UART_MspInit+0x270>)
 8001824:	f001 f812 	bl	800284c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001828:	4b34      	ldr	r3, [pc, #208]	@ (80018fc <HAL_UART_MspInit+0x274>)
 800182a:	4a35      	ldr	r2, [pc, #212]	@ (8001900 <HAL_UART_MspInit+0x278>)
 800182c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800182e:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <HAL_UART_MspInit+0x274>)
 8001830:	2210      	movs	r2, #16
 8001832:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001834:	4b31      	ldr	r3, [pc, #196]	@ (80018fc <HAL_UART_MspInit+0x274>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <HAL_UART_MspInit+0x274>)
 800183c:	2280      	movs	r2, #128	@ 0x80
 800183e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001840:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <HAL_UART_MspInit+0x274>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001846:	4b2d      	ldr	r3, [pc, #180]	@ (80018fc <HAL_UART_MspInit+0x274>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <HAL_UART_MspInit+0x274>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001852:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <HAL_UART_MspInit+0x274>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001858:	4828      	ldr	r0, [pc, #160]	@ (80018fc <HAL_UART_MspInit+0x274>)
 800185a:	f000 fde3 	bl	8002424 <HAL_DMA_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8001864:	f7ff fb95 	bl	8000f92 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_UART_MspInit+0x274>)
 800186c:	639a      	str	r2, [r3, #56]	@ 0x38
 800186e:	4a23      	ldr	r2, [pc, #140]	@ (80018fc <HAL_UART_MspInit+0x274>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001874:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 8001876:	4a24      	ldr	r2, [pc, #144]	@ (8001908 <HAL_UART_MspInit+0x280>)
 8001878:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187a:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 8001888:	2280      	movs	r2, #128	@ 0x80
 800188a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001898:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80018a4:	4817      	ldr	r0, [pc, #92]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 80018a6:	f000 fdbd 	bl	8002424 <HAL_DMA_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 80018b0:	f7ff fb6f 	bl	8000f92 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 80018b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <HAL_UART_MspInit+0x27c>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2101      	movs	r1, #1
 80018c4:	2027      	movs	r0, #39	@ 0x27
 80018c6:	f000 fd76 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018ca:	2027      	movs	r0, #39	@ 0x27
 80018cc:	f000 fd8f 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	@ 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40013800 	.word	0x40013800
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	20000350 	.word	0x20000350
 80018e8:	40020058 	.word	0x40020058
 80018ec:	20000394 	.word	0x20000394
 80018f0:	40020044 	.word	0x40020044
 80018f4:	40004800 	.word	0x40004800
 80018f8:	40010c00 	.word	0x40010c00
 80018fc:	200003d8 	.word	0x200003d8
 8001900:	4002001c 	.word	0x4002001c
 8001904:	2000041c 	.word	0x2000041c
 8001908:	40020030 	.word	0x40020030

0800190c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800190c:	f7ff fce0 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480b      	ldr	r0, [pc, #44]	@ (8001940 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001912:	490c      	ldr	r1, [pc, #48]	@ (8001944 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001914:	4a0c      	ldr	r2, [pc, #48]	@ (8001948 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a09      	ldr	r2, [pc, #36]	@ (800194c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001928:	4c09      	ldr	r4, [pc, #36]	@ (8001950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001936:	f004 f9d1 	bl	8005cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800193a:	f7ff faa1 	bl	8000e80 <main>
  bx lr
 800193e:	4770      	bx	lr
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001948:	08007e64 	.word	0x08007e64
  ldr r2, =_sbss
 800194c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001950:	200005b0 	.word	0x200005b0

08001954 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <CAN1_RX1_IRQHandler>
	...

08001958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <HAL_Init+0x28>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <HAL_Init+0x28>)
 8001962:	f043 0310 	orr.w	r3, r3, #16
 8001966:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f000 fd19 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196e:	200f      	movs	r0, #15
 8001970:	f000 f808 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001974:	f7ff fb14 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40022000 	.word	0x40022000

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_InitTick+0x54>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_InitTick+0x58>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199a:	fbb3 f3f1 	udiv	r3, r3, r1
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd31 	bl	800240a <HAL_SYSTICK_Config>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00e      	b.n	80019d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d80a      	bhi.n	80019ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f000 fcf9 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c4:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <HAL_InitTick+0x5c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000008 	.word	0x20000008
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_IncTick+0x1c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_IncTick+0x20>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a03      	ldr	r2, [pc, #12]	@ (8001a04 <HAL_IncTick+0x20>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000460 	.word	0x20000460

08001a08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b02      	ldr	r3, [pc, #8]	@ (8001a18 <HAL_GetTick+0x10>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	20000460 	.word	0x20000460

08001a1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0be      	b.n	8001bbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff f888 	bl	8000b70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fad7 	bl	8002014 <ADC_ConversionStop_Disable>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 8099 	bne.w	8001baa <HAL_ADC_Init+0x18e>
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 8095 	bne.w	8001baa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a88:	f023 0302 	bic.w	r3, r3, #2
 8001a8c:	f043 0202 	orr.w	r2, r3, #2
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7b1b      	ldrb	r3, [r3, #12]
 8001aa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab4:	d003      	beq.n	8001abe <HAL_ADC_Init+0xa2>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d102      	bne.n	8001ac4 <HAL_ADC_Init+0xa8>
 8001abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADC_Init+0xaa>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7d1b      	ldrb	r3, [r3, #20]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d119      	bne.n	8001b08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7b1b      	ldrb	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	035a      	lsls	r2, r3, #13
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e00b      	b.n	8001b08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	f043 0220 	orr.w	r2, r3, #32
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <HAL_ADC_Init+0x1a8>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b38:	d003      	beq.n	8001b42 <HAL_ADC_Init+0x126>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d104      	bne.n	8001b4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	051b      	lsls	r3, r3, #20
 8001b4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b52:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_ADC_Init+0x1ac>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d10b      	bne.n	8001b88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7a:	f023 0303 	bic.w	r3, r3, #3
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b86:	e018      	b.n	8001bba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	f023 0312 	bic.w	r3, r3, #18
 8001b90:	f043 0210 	orr.w	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ba8:	e007      	b.n	8001bba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001bc8:	ff1f0efe 	.word	0xff1f0efe

08001bcc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03e      	beq.n	8001c6c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d039      	beq.n	8001c6c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c1a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c1e:	d11d      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d119      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0220 	bic.w	r2, r2, #32
 8001c36:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f874 	bl	8001d4a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f06f 0212 	mvn.w	r2, #18
 8001c6a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d04d      	beq.n	8001d12 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d048      	beq.n	8001d12 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001ca2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001ca6:	d012      	beq.n	8001cce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d125      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cc0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001cc4:	d11d      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cdc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fa76 	bl	80021f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 020c 	mvn.w	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d012      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f812 	bl	8001d5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0201 	mvn.w	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x20>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0dc      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x1da>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b06      	cmp	r3, #6
 8001d9e:	d81c      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b05      	subs	r3, #5
 8001db2:	221f      	movs	r2, #31
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b05      	subs	r3, #5
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dd8:	e03c      	b.n	8001e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d81c      	bhi.n	8001e1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	3b23      	subs	r3, #35	@ 0x23
 8001df4:	221f      	movs	r2, #31
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	4019      	ands	r1, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b23      	subs	r3, #35	@ 0x23
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e1a:	e01b      	b.n	8001e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b41      	subs	r3, #65	@ 0x41
 8001e2e:	221f      	movs	r2, #31
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4019      	ands	r1, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b41      	subs	r3, #65	@ 0x41
 8001e48:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d91c      	bls.n	8001e96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68d9      	ldr	r1, [r3, #12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	2207      	movs	r2, #7
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4019      	ands	r1, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6898      	ldr	r0, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	3b1e      	subs	r3, #30
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	e019      	b.n	8001eca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6919      	ldr	r1, [r3, #16]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4019      	ands	r1, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6898      	ldr	r0, [r3, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d003      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ed6:	2b11      	cmp	r3, #17
 8001ed8:	d132      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d125      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d126      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d11a      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a13      	ldr	r2, [pc, #76]	@ (8001f5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9a      	lsrs	r2, r3, #18
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x1b2>
 8001f2e:	e007      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40012400 	.word	0x40012400
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	431bde83 	.word	0x431bde83

08001f60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d040      	beq.n	8002000 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <ADC_Enable+0xac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <ADC_Enable+0xb0>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f9c:	e002      	b.n	8001fa4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f9      	bne.n	8001f9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001faa:	f7ff fd2d 	bl	8001a08 <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fb0:	e01f      	b.n	8001ff2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fb2:	f7ff fd29 	bl	8001a08 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d918      	bls.n	8001ff2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d011      	beq.n	8001ff2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e007      	b.n	8002002 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d1d8      	bne.n	8001fb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000
 8002010:	431bde83 	.word	0x431bde83

08002014 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d12e      	bne.n	800208c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800203e:	f7ff fce3 	bl	8001a08 <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002044:	e01b      	b.n	800207e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002046:	f7ff fcdf 	bl	8001a08 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d914      	bls.n	800207e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10d      	bne.n	800207e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e007      	b.n	800208e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d0dc      	beq.n	8002046 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADCEx_Calibration_Start+0x1e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e097      	b.n	80021e6 <HAL_ADCEx_Calibration_Start+0x14e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa8 	bl	8002014 <ADC_ConversionStop_Disable>
 80020c4:	4603      	mov	r3, r0
 80020c6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff49 	bl	8001f60 <ADC_Enable>
 80020ce:	4603      	mov	r3, r0
 80020d0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 8081 	bne.w	80021dc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020e2:	f023 0302 	bic.w	r3, r3, #2
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020ee:	4b40      	ldr	r3, [pc, #256]	@ (80021f0 <HAL_ADCEx_Calibration_Start+0x158>)
 80020f0:	681c      	ldr	r4, [r3, #0]
 80020f2:	2002      	movs	r0, #2
 80020f4:	f001 fa0c 	bl	8003510 <HAL_RCCEx_GetPeriphCLKFreq>
 80020f8:	4603      	mov	r3, r0
 80020fa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80020fe:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002100:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002102:	e002      	b.n	800210a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3b01      	subs	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f9      	bne.n	8002104 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0208 	orr.w	r2, r2, #8
 800211e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002120:	f7ff fc72 	bl	8001a08 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002126:	e01b      	b.n	8002160 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002128:	f7ff fc6e 	bl	8001a08 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b0a      	cmp	r3, #10
 8002134:	d914      	bls.n	8002160 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	f023 0312 	bic.w	r3, r3, #18
 800214c:	f043 0210 	orr.w	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e042      	b.n	80021e6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1dc      	bne.n	8002128 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0204 	orr.w	r2, r2, #4
 800217c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800217e:	f7ff fc43 	bl	8001a08 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002184:	e01b      	b.n	80021be <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002186:	f7ff fc3f 	bl	8001a08 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b0a      	cmp	r3, #10
 8002192:	d914      	bls.n	80021be <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	f023 0312 	bic.w	r3, r3, #18
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e013      	b.n	80021e6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1dc      	bne.n	8002186 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	f023 0303 	bic.w	r3, r3, #3
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000000 	.word	0x20000000

080021f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
	...

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	@ (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <__NVIC_EnableIRQ+0x34>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	@ (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	@ (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff90 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	@ (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff2d 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff42 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff90 	bl	80022f8 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5f 	bl	80022a4 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff35 	bl	800226c <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa2 	bl	800235c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e043      	b.n	80024c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_DMA_Init+0xa8>)
 8002442:	4413      	add	r3, r2
 8002444:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <HAL_DMA_Init+0xac>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	009a      	lsls	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <HAL_DMA_Init+0xb0>)
 8002456:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800246e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800247c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	bffdfff8 	.word	0xbffdfff8
 80024d0:	cccccccd 	.word	0xcccccccd
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d008      	beq.n	8002502 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2204      	movs	r2, #4
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e020      	b.n	8002544 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 020e 	bic.w	r2, r2, #14
 8002510:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
	...

08002550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d005      	beq.n	8002574 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2204      	movs	r2, #4
 800256c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e051      	b.n	8002618 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 020e 	bic.w	r2, r2, #14
 8002582:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a22      	ldr	r2, [pc, #136]	@ (8002624 <HAL_DMA_Abort_IT+0xd4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d029      	beq.n	80025f2 <HAL_DMA_Abort_IT+0xa2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a21      	ldr	r2, [pc, #132]	@ (8002628 <HAL_DMA_Abort_IT+0xd8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_Abort_IT+0x9e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	@ (800262c <HAL_DMA_Abort_IT+0xdc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01a      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x98>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <HAL_DMA_Abort_IT+0xe0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d012      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x92>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002634 <HAL_DMA_Abort_IT+0xe4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00a      	beq.n	80025dc <HAL_DMA_Abort_IT+0x8c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002638 <HAL_DMA_Abort_IT+0xe8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d102      	bne.n	80025d6 <HAL_DMA_Abort_IT+0x86>
 80025d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025d4:	e00e      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025da:	e00b      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025e0:	e008      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e6:	e005      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ec:	e002      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025ee:	2310      	movs	r3, #16
 80025f0:	e000      	b.n	80025f4 <HAL_DMA_Abort_IT+0xa4>
 80025f2:	2301      	movs	r3, #1
 80025f4:	4a11      	ldr	r2, [pc, #68]	@ (800263c <HAL_DMA_Abort_IT+0xec>)
 80025f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
    } 
  }
  return status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40020008 	.word	0x40020008
 8002628:	4002001c 	.word	0x4002001c
 800262c:	40020030 	.word	0x40020030
 8002630:	40020044 	.word	0x40020044
 8002634:	40020058 	.word	0x40020058
 8002638:	4002006c 	.word	0x4002006c
 800263c:	40020000 	.word	0x40020000

08002640 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	2204      	movs	r2, #4
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d04f      	beq.n	8002708 <HAL_DMA_IRQHandler+0xc8>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0204 	bic.w	r2, r2, #4
 800268e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a66      	ldr	r2, [pc, #408]	@ (8002830 <HAL_DMA_IRQHandler+0x1f0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d029      	beq.n	80026ee <HAL_DMA_IRQHandler+0xae>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a65      	ldr	r2, [pc, #404]	@ (8002834 <HAL_DMA_IRQHandler+0x1f4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <HAL_DMA_IRQHandler+0xaa>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a63      	ldr	r2, [pc, #396]	@ (8002838 <HAL_DMA_IRQHandler+0x1f8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01a      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xa4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a62      	ldr	r2, [pc, #392]	@ (800283c <HAL_DMA_IRQHandler+0x1fc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d012      	beq.n	80026de <HAL_DMA_IRQHandler+0x9e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a60      	ldr	r2, [pc, #384]	@ (8002840 <HAL_DMA_IRQHandler+0x200>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x98>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002844 <HAL_DMA_IRQHandler+0x204>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d102      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x92>
 80026cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026d0:	e00e      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80026d6:	e00b      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80026dc:	e008      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026e2:	e005      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026e8:	e002      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026ea:	2340      	movs	r3, #64	@ 0x40
 80026ec:	e000      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
 80026ee:	2304      	movs	r3, #4
 80026f0:	4a55      	ldr	r2, [pc, #340]	@ (8002848 <HAL_DMA_IRQHandler+0x208>)
 80026f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8094 	beq.w	8002826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002706:	e08e      	b.n	8002826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	2202      	movs	r2, #2
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d056      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x186>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d051      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10b      	bne.n	8002748 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 020a 	bic.w	r2, r2, #10
 800273e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a38      	ldr	r2, [pc, #224]	@ (8002830 <HAL_DMA_IRQHandler+0x1f0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d029      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x166>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a37      	ldr	r2, [pc, #220]	@ (8002834 <HAL_DMA_IRQHandler+0x1f4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x162>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a35      	ldr	r2, [pc, #212]	@ (8002838 <HAL_DMA_IRQHandler+0x1f8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01a      	beq.n	800279c <HAL_DMA_IRQHandler+0x15c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a34      	ldr	r2, [pc, #208]	@ (800283c <HAL_DMA_IRQHandler+0x1fc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d012      	beq.n	8002796 <HAL_DMA_IRQHandler+0x156>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a32      	ldr	r2, [pc, #200]	@ (8002840 <HAL_DMA_IRQHandler+0x200>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00a      	beq.n	8002790 <HAL_DMA_IRQHandler+0x150>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a31      	ldr	r2, [pc, #196]	@ (8002844 <HAL_DMA_IRQHandler+0x204>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d102      	bne.n	800278a <HAL_DMA_IRQHandler+0x14a>
 8002784:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002788:	e00e      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 800278a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800278e:	e00b      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 8002790:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002794:	e008      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 8002796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800279a:	e005      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 800279c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a0:	e002      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 80027a2:	2320      	movs	r3, #32
 80027a4:	e000      	b.n	80027a8 <HAL_DMA_IRQHandler+0x168>
 80027a6:	2302      	movs	r3, #2
 80027a8:	4a27      	ldr	r2, [pc, #156]	@ (8002848 <HAL_DMA_IRQHandler+0x208>)
 80027aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d034      	beq.n	8002826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027c4:	e02f      	b.n	8002826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	2208      	movs	r2, #8
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d028      	beq.n	8002828 <HAL_DMA_IRQHandler+0x1e8>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d023      	beq.n	8002828 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020e 	bic.w	r2, r2, #14
 80027ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
    }
  }
  return;
 8002826:	bf00      	nop
 8002828:	bf00      	nop
}
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40020008 	.word	0x40020008
 8002834:	4002001c 	.word	0x4002001c
 8002838:	40020030 	.word	0x40020030
 800283c:	40020044 	.word	0x40020044
 8002840:	40020058 	.word	0x40020058
 8002844:	4002006c 	.word	0x4002006c
 8002848:	40020000 	.word	0x40020000

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b08b      	sub	sp, #44	@ 0x2c
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285e:	e169      	b.n	8002b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002860:	2201      	movs	r2, #1
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	429a      	cmp	r2, r3
 800287a:	f040 8158 	bne.w	8002b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a9a      	ldr	r2, [pc, #616]	@ (8002aec <HAL_GPIO_Init+0x2a0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d05e      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 8002888:	4a98      	ldr	r2, [pc, #608]	@ (8002aec <HAL_GPIO_Init+0x2a0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d875      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 800288e:	4a98      	ldr	r2, [pc, #608]	@ (8002af0 <HAL_GPIO_Init+0x2a4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d058      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 8002894:	4a96      	ldr	r2, [pc, #600]	@ (8002af0 <HAL_GPIO_Init+0x2a4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d86f      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 800289a:	4a96      	ldr	r2, [pc, #600]	@ (8002af4 <HAL_GPIO_Init+0x2a8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d052      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 80028a0:	4a94      	ldr	r2, [pc, #592]	@ (8002af4 <HAL_GPIO_Init+0x2a8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d869      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 80028a6:	4a94      	ldr	r2, [pc, #592]	@ (8002af8 <HAL_GPIO_Init+0x2ac>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d04c      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 80028ac:	4a92      	ldr	r2, [pc, #584]	@ (8002af8 <HAL_GPIO_Init+0x2ac>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d863      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 80028b2:	4a92      	ldr	r2, [pc, #584]	@ (8002afc <HAL_GPIO_Init+0x2b0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d046      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 80028b8:	4a90      	ldr	r2, [pc, #576]	@ (8002afc <HAL_GPIO_Init+0x2b0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d85d      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 80028be:	2b12      	cmp	r3, #18
 80028c0:	d82a      	bhi.n	8002918 <HAL_GPIO_Init+0xcc>
 80028c2:	2b12      	cmp	r3, #18
 80028c4:	d859      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 80028c6:	a201      	add	r2, pc, #4	@ (adr r2, 80028cc <HAL_GPIO_Init+0x80>)
 80028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028cc:	08002947 	.word	0x08002947
 80028d0:	08002921 	.word	0x08002921
 80028d4:	08002933 	.word	0x08002933
 80028d8:	08002975 	.word	0x08002975
 80028dc:	0800297b 	.word	0x0800297b
 80028e0:	0800297b 	.word	0x0800297b
 80028e4:	0800297b 	.word	0x0800297b
 80028e8:	0800297b 	.word	0x0800297b
 80028ec:	0800297b 	.word	0x0800297b
 80028f0:	0800297b 	.word	0x0800297b
 80028f4:	0800297b 	.word	0x0800297b
 80028f8:	0800297b 	.word	0x0800297b
 80028fc:	0800297b 	.word	0x0800297b
 8002900:	0800297b 	.word	0x0800297b
 8002904:	0800297b 	.word	0x0800297b
 8002908:	0800297b 	.word	0x0800297b
 800290c:	0800297b 	.word	0x0800297b
 8002910:	08002929 	.word	0x08002929
 8002914:	0800293d 	.word	0x0800293d
 8002918:	4a79      	ldr	r2, [pc, #484]	@ (8002b00 <HAL_GPIO_Init+0x2b4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800291e:	e02c      	b.n	800297a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	623b      	str	r3, [r7, #32]
          break;
 8002926:	e029      	b.n	800297c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	3304      	adds	r3, #4
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	e024      	b.n	800297c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	3308      	adds	r3, #8
 8002938:	623b      	str	r3, [r7, #32]
          break;
 800293a:	e01f      	b.n	800297c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	330c      	adds	r3, #12
 8002942:	623b      	str	r3, [r7, #32]
          break;
 8002944:	e01a      	b.n	800297c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800294e:	2304      	movs	r3, #4
 8002950:	623b      	str	r3, [r7, #32]
          break;
 8002952:	e013      	b.n	800297c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800295c:	2308      	movs	r3, #8
 800295e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	611a      	str	r2, [r3, #16]
          break;
 8002966:	e009      	b.n	800297c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002968:	2308      	movs	r3, #8
 800296a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	615a      	str	r2, [r3, #20]
          break;
 8002972:	e003      	b.n	800297c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002974:	2300      	movs	r3, #0
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x130>
          break;
 800297a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2bff      	cmp	r3, #255	@ 0xff
 8002980:	d801      	bhi.n	8002986 <HAL_GPIO_Init+0x13a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	e001      	b.n	800298a <HAL_GPIO_Init+0x13e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2bff      	cmp	r3, #255	@ 0xff
 8002990:	d802      	bhi.n	8002998 <HAL_GPIO_Init+0x14c>
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	e002      	b.n	800299e <HAL_GPIO_Init+0x152>
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	3b08      	subs	r3, #8
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	210f      	movs	r1, #15
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	401a      	ands	r2, r3
 80029b0:	6a39      	ldr	r1, [r7, #32]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	431a      	orrs	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80b1 	beq.w	8002b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b04 <HAL_GPIO_Init+0x2b8>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002b04 <HAL_GPIO_Init+0x2b8>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6193      	str	r3, [r2, #24]
 80029d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002b04 <HAL_GPIO_Init+0x2b8>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029e4:	4a48      	ldr	r2, [pc, #288]	@ (8002b08 <HAL_GPIO_Init+0x2bc>)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a40      	ldr	r2, [pc, #256]	@ (8002b0c <HAL_GPIO_Init+0x2c0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_GPIO_Init+0x1ec>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3f      	ldr	r2, [pc, #252]	@ (8002b10 <HAL_GPIO_Init+0x2c4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00d      	beq.n	8002a34 <HAL_GPIO_Init+0x1e8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b14 <HAL_GPIO_Init+0x2c8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <HAL_GPIO_Init+0x1e4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a3d      	ldr	r2, [pc, #244]	@ (8002b18 <HAL_GPIO_Init+0x2cc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_GPIO_Init+0x1e0>
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e006      	b.n	8002a3a <HAL_GPIO_Init+0x1ee>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e004      	b.n	8002a3a <HAL_GPIO_Init+0x1ee>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e002      	b.n	8002a3a <HAL_GPIO_Init+0x1ee>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_GPIO_Init+0x1ee>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	f002 0203 	and.w	r2, r2, #3
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	4093      	lsls	r3, r2
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a4a:	492f      	ldr	r1, [pc, #188]	@ (8002b08 <HAL_GPIO_Init+0x2bc>)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a64:	4b2d      	ldr	r3, [pc, #180]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	492c      	ldr	r1, [pc, #176]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a72:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	4928      	ldr	r1, [pc, #160]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a8c:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	4922      	ldr	r1, [pc, #136]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	491e      	ldr	r1, [pc, #120]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d006      	beq.n	8002ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4918      	ldr	r1, [pc, #96]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ac2:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	4914      	ldr	r1, [pc, #80]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d021      	beq.n	8002b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002adc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	490e      	ldr	r1, [pc, #56]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
 8002ae8:	e021      	b.n	8002b2e <HAL_GPIO_Init+0x2e2>
 8002aea:	bf00      	nop
 8002aec:	10320000 	.word	0x10320000
 8002af0:	10310000 	.word	0x10310000
 8002af4:	10220000 	.word	0x10220000
 8002af8:	10210000 	.word	0x10210000
 8002afc:	10120000 	.word	0x10120000
 8002b00:	10110000 	.word	0x10110000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	40010c00 	.word	0x40010c00
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40011400 	.word	0x40011400
 8002b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <HAL_GPIO_Init+0x304>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	4909      	ldr	r1, [pc, #36]	@ (8002b50 <HAL_GPIO_Init+0x304>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	3301      	adds	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f47f ae8e 	bne.w	8002860 <HAL_GPIO_Init+0x14>
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	372c      	adds	r7, #44	@ 0x2c
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	611a      	str	r2, [r3, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e272      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00c      	beq.n	8002bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb0:	4b8f      	ldr	r3, [pc, #572]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
 8002bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	4b89      	ldr	r3, [pc, #548]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d168      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e24c      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x76>
 8002bec:	4b80      	ldr	r3, [pc, #512]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7f      	ldr	r2, [pc, #508]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b7b      	ldr	r3, [pc, #492]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7a      	ldr	r2, [pc, #488]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b78      	ldr	r3, [pc, #480]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a77      	ldr	r2, [pc, #476]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0xbc>
 8002c26:	4b72      	ldr	r3, [pc, #456]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a71      	ldr	r2, [pc, #452]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b6f      	ldr	r3, [pc, #444]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6e      	ldr	r2, [pc, #440]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c40:	4b6b      	ldr	r3, [pc, #428]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6a      	ldr	r2, [pc, #424]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b68      	ldr	r3, [pc, #416]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a67      	ldr	r2, [pc, #412]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fed2 	bl	8001a08 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fece 	bl	8001a08 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	@ 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e200      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe4>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe febe 	bl	8001a08 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe feba 	bl	8001a08 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1ec      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b53      	ldr	r3, [pc, #332]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x10c>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d063      	beq.n	8002d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cca:	4b49      	ldr	r3, [pc, #292]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
 8002cd6:	4b46      	ldr	r3, [pc, #280]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b43      	ldr	r3, [pc, #268]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1c0      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4939      	ldr	r1, [pc, #228]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e03a      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fe73 	bl	8001a08 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fe6f 	bl	8001a08 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1a1      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b2a      	ldr	r3, [pc, #168]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4927      	ldr	r1, [pc, #156]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
 8002d58:	e015      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fe52 	bl	8001a08 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7fe fe4e 	bl	8001a08 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e180      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7fe fe32 	bl	8001a08 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fe fe2e 	bl	8001a08 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e160      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b0d      	ldr	r3, [pc, #52]	@ (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f000 face 	bl	8003368 <RCC_Delay>
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fe18 	bl	8001a08 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dda:	e00f      	b.n	8002dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fe14 	bl	8001a08 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d908      	bls.n	8002dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e146      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	42420000 	.word	0x42420000
 8002df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b92      	ldr	r3, [pc, #584]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e9      	bne.n	8002ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a6 	beq.w	8002f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b8b      	ldr	r3, [pc, #556]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	4b88      	ldr	r3, [pc, #544]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4a87      	ldr	r2, [pc, #540]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	61d3      	str	r3, [r2, #28]
 8002e32:	4b85      	ldr	r3, [pc, #532]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b82      	ldr	r3, [pc, #520]	@ (800304c <HAL_RCC_OscConfig+0x4c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800304c <HAL_RCC_OscConfig+0x4c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7e      	ldr	r2, [pc, #504]	@ (800304c <HAL_RCC_OscConfig+0x4c8>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fdd5 	bl	8001a08 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe fdd1 	bl	8001a08 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	@ 0x64
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e103      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b75      	ldr	r3, [pc, #468]	@ (800304c <HAL_RCC_OscConfig+0x4c8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x312>
 8002e88:	4b6f      	ldr	r3, [pc, #444]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e02d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x334>
 8002e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a69      	ldr	r2, [pc, #420]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	4b67      	ldr	r3, [pc, #412]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a66      	ldr	r2, [pc, #408]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	e01c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x356>
 8002ec0:	4b61      	ldr	r3, [pc, #388]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a60      	ldr	r2, [pc, #384]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a5d      	ldr	r2, [pc, #372]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eda:	4b5b      	ldr	r3, [pc, #364]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a5a      	ldr	r2, [pc, #360]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	4b58      	ldr	r3, [pc, #352]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a57      	ldr	r2, [pc, #348]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d015      	beq.n	8002f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe fd85 	bl	8001a08 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe fd81 	bl	8001a08 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0b1      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	4b4b      	ldr	r3, [pc, #300]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ee      	beq.n	8002f02 <HAL_RCC_OscConfig+0x37e>
 8002f24:	e014      	b.n	8002f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fd6f 	bl	8001a08 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe fd6b 	bl	8001a08 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e09b      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	4b40      	ldr	r3, [pc, #256]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b3c      	ldr	r3, [pc, #240]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a3b      	ldr	r2, [pc, #236]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8087 	beq.w	800307a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6c:	4b36      	ldr	r3, [pc, #216]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d061      	beq.n	800303c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d146      	bne.n	800300e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b33      	ldr	r3, [pc, #204]	@ (8003050 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fd3f 	bl	8001a08 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fe fd3b 	bl	8001a08 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e06d      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb4:	d108      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4921      	ldr	r1, [pc, #132]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a19      	ldr	r1, [r3, #32]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	491b      	ldr	r1, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x4cc>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fd0f 	bl	8001a08 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fd0b 	bl	8001a08 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e03d      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x46a>
 800300c:	e035      	b.n	800307a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_RCC_OscConfig+0x4cc>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe fcf8 	bl	8001a08 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fcf4 	bl	8001a08 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e026      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x498>
 800303a:	e01e      	b.n	800307a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e019      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
 8003048:	40021000 	.word	0x40021000
 800304c:	40007000 	.word	0x40007000
 8003050:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003054:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <HAL_RCC_OscConfig+0x500>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	429a      	cmp	r2, r3
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0d0      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b6a      	ldr	r3, [pc, #424]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b67      	ldr	r3, [pc, #412]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4965      	ldr	r1, [pc, #404]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a58      	ldr	r2, [pc, #352]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a52      	ldr	r2, [pc, #328]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003106:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d040      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d115      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	4b41      	ldr	r3, [pc, #260]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e073      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003156:	4b3d      	ldr	r3, [pc, #244]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06b      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b39      	ldr	r3, [pc, #228]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4936      	ldr	r1, [pc, #216]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003178:	f7fe fc46 	bl	8001a08 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fe fc42 	bl	8001a08 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e053      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a8:	4b27      	ldr	r3, [pc, #156]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d210      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b24      	ldr	r3, [pc, #144]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 0207 	bic.w	r2, r3, #7
 80031be:	4922      	ldr	r1, [pc, #136]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	@ (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003202:	4b12      	ldr	r3, [pc, #72]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f821 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490a      	ldr	r1, [pc, #40]	@ (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	@ (8003254 <HAL_RCC_ClockConfig+0x1cc>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_RCC_ClockConfig+0x1d0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fba4 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40022000 	.word	0x40022000
 800324c:	40021000 	.word	0x40021000
 8003250:	08007aa0 	.word	0x08007aa0
 8003254:	20000000 	.word	0x20000000
 8003258:	20000004 	.word	0x20000004

0800325c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003276:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	d002      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x30>
 8003286:	2b08      	cmp	r3, #8
 8003288:	d003      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x36>
 800328a:	e027      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800328e:	613b      	str	r3, [r7, #16]
      break;
 8003290:	e027      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	0c9b      	lsrs	r3, r3, #18
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032aa:	4b11      	ldr	r3, [pc, #68]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0c5b      	lsrs	r3, r3, #17
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	4a11      	ldr	r2, [pc, #68]	@ (80032fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80032b6:	5cd3      	ldrb	r3, [r2, r3]
 80032b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a0d      	ldr	r2, [pc, #52]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80032be:	fb03 f202 	mul.w	r2, r3, r2
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	e004      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	613b      	str	r3, [r7, #16]
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80032de:	613b      	str	r3, [r7, #16]
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	693b      	ldr	r3, [r7, #16]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	007a1200 	.word	0x007a1200
 80032f8:	08007ab8 	.word	0x08007ab8
 80032fc:	08007ac8 	.word	0x08007ac8
 8003300:	003d0900 	.word	0x003d0900

08003304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003308:	4b02      	ldr	r3, [pc, #8]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x10>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff2 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	08007ab0 	.word	0x08007ab0

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffde 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	0adb      	lsrs	r3, r3, #11
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	@ (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	08007ab0 	.word	0x08007ab0

08003368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003370:	4b0a      	ldr	r3, [pc, #40]	@ (800339c <RCC_Delay+0x34>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0a      	ldr	r2, [pc, #40]	@ (80033a0 <RCC_Delay+0x38>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0a5b      	lsrs	r3, r3, #9
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003384:	bf00      	nop
  }
  while (Delay --);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e5a      	subs	r2, r3, #1
 800338a:	60fa      	str	r2, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f9      	bne.n	8003384 <RCC_Delay+0x1c>
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000000 	.word	0x20000000
 80033a0:	10624dd3 	.word	0x10624dd3

080033a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d07d      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033da:	61d3      	str	r3, [r2, #28]
 80033dc:	4b49      	ldr	r3, [pc, #292]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b46      	ldr	r3, [pc, #280]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d118      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f8:	4b43      	ldr	r3, [pc, #268]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a42      	ldr	r2, [pc, #264]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003404:	f7fe fb00 	bl	8001a08 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	e008      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7fe fafc 	bl	8001a08 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e06d      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b3a      	ldr	r3, [pc, #232]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800342a:	4b36      	ldr	r3, [pc, #216]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003432:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	429a      	cmp	r2, r3
 8003446:	d027      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003448:	4b2e      	ldr	r3, [pc, #184]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003450:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003452:	4b2e      	ldr	r3, [pc, #184]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003458:	4b2c      	ldr	r3, [pc, #176]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800345e:	4a29      	ldr	r2, [pc, #164]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d014      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe facb 	bl	8001a08 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fe fac7 	bl	8001a08 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e036      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	4b1d      	ldr	r3, [pc, #116]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ee      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003498:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4917      	ldr	r1, [pc, #92]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b0:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	490b      	ldr	r1, [pc, #44]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e6:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4904      	ldr	r1, [pc, #16]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	42420440 	.word	0x42420440

08003510 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b10      	cmp	r3, #16
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b10      	cmp	r3, #16
 8003536:	f200 808a 	bhi.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d045      	beq.n	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d075      	beq.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003546:	e082      	b.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003548:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800354e:	4b45      	ldr	r3, [pc, #276]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d07b      	beq.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	0c9b      	lsrs	r3, r3, #18
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	4a41      	ldr	r2, [pc, #260]	@ (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003564:	5cd3      	ldrb	r3, [r2, r3]
 8003566:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d015      	beq.n	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003572:	4b3c      	ldr	r3, [pc, #240]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0c5b      	lsrs	r3, r3, #17
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800358c:	4a38      	ldr	r2, [pc, #224]	@ (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	61fb      	str	r3, [r7, #28]
 800359c:	e004      	b.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4a34      	ldr	r2, [pc, #208]	@ (8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b4:	d102      	bne.n	80035bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	61bb      	str	r3, [r7, #24]
      break;
 80035ba:	e04a      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
      break;
 80035ca:	e042      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80035cc:	4b25      	ldr	r3, [pc, #148]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035dc:	d108      	bne.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80035e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	e01f      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035fa:	d109      	bne.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80035fc:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003608:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	e00f      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800361a:	d11c      	bne.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d016      	beq.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003628:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800362c:	61bb      	str	r3, [r7, #24]
      break;
 800362e:	e012      	b.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003630:	e011      	b.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003632:	f7ff fe85 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0b9b      	lsrs	r3, r3, #14
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	61bb      	str	r3, [r7, #24]
      break;
 800364c:	e004      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003656:	bf00      	nop
    }
  }
  return (frequency);
 8003658:	69bb      	ldr	r3, [r7, #24]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	08007acc 	.word	0x08007acc
 800366c:	08007adc 	.word	0x08007adc
 8003670:	007a1200 	.word	0x007a1200
 8003674:	003d0900 	.word	0x003d0900
 8003678:	aaaaaaab 	.word	0xaaaaaaab

0800367c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e041      	b.n	8003712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd ff10 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f000 fc32 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e041      	b.n	80037b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f839 	bl	80037b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f000 fbe3 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_TIM_PWM_Start+0x24>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e022      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d109      	bne.n	800380a <HAL_TIM_PWM_Start+0x3e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e015      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start+0x58>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e008      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e05e      	b.n	80038fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0x82>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800384c:	e013      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0x92>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800385c:	e00b      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0xa2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800386c:	e003      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fddc 	bl	800443c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <HAL_TIM_PWM_Start+0x138>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d107      	bne.n	800389e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_TIM_PWM_Start+0x138>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b0:	d009      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a14      	ldr	r2, [pc, #80]	@ (8003908 <HAL_TIM_PWM_Start+0x13c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a12      	ldr	r2, [pc, #72]	@ (800390c <HAL_TIM_PWM_Start+0x140>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d111      	bne.n	80038ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b06      	cmp	r3, #6
 80038d6:	d010      	beq.n	80038fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e8:	e007      	b.n	80038fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800

08003910 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fd8a 	bl	800443c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a29      	ldr	r2, [pc, #164]	@ (80039d4 <HAL_TIM_PWM_Stop+0xc4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d117      	bne.n	8003962 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	f241 1311 	movw	r3, #4369	@ 0x1111
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <HAL_TIM_PWM_Stop+0x52>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	f240 4344 	movw	r3, #1092	@ 0x444
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d107      	bne.n	8003962 <HAL_TIM_PWM_Stop+0x52>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003960:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a1a      	ldr	r2, [r3, #32]
 8003968:	f241 1311 	movw	r3, #4369	@ 0x1111
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_TIM_PWM_Stop+0x82>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	f240 4344 	movw	r3, #1092	@ 0x444
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d107      	bne.n	8003992 <HAL_TIM_PWM_Stop+0x82>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Stop+0x92>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a0:	e013      	b.n	80039ca <HAL_TIM_PWM_Stop+0xba>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Stop+0xa2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b0:	e00b      	b.n	80039ca <HAL_TIM_PWM_Stop+0xba>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Stop+0xb2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c0:	e003      	b.n	80039ca <HAL_TIM_PWM_Stop+0xba>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40012c00 	.word	0x40012c00

080039d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d020      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01b      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0202 	mvn.w	r2, #2
 8003a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa63 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa56 	bl	8003edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fa65 	bl	8003f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d020      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0204 	mvn.w	r2, #4
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa3d 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa30 	bl	8003edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fa3f 	bl	8003f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d020      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01b      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0208 	mvn.w	r2, #8
 8003aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa17 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa0a 	bl	8003edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fa19 	bl	8003f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d020      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01b      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0210 	mvn.w	r2, #16
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2208      	movs	r2, #8
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f9e4 	bl	8003edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f9f3 	bl	8003f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0201 	mvn.w	r2, #1
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9c3 	bl	8003eca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00c      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fd46 	bl	80045f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9c3 	bl	8003f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0220 	mvn.w	r2, #32
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fd19 	bl	80045e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0ae      	b.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	f200 809f 	bhi.w	8003d24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003be6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003d25 	.word	0x08003d25
 8003bf4:	08003d25 	.word	0x08003d25
 8003bf8:	08003d25 	.word	0x08003d25
 8003bfc:	08003c61 	.word	0x08003c61
 8003c00:	08003d25 	.word	0x08003d25
 8003c04:	08003d25 	.word	0x08003d25
 8003c08:	08003d25 	.word	0x08003d25
 8003c0c:	08003ca3 	.word	0x08003ca3
 8003c10:	08003d25 	.word	0x08003d25
 8003c14:	08003d25 	.word	0x08003d25
 8003c18:	08003d25 	.word	0x08003d25
 8003c1c:	08003ce3 	.word	0x08003ce3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f9ea 	bl	8004000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0208 	orr.w	r2, r2, #8
 8003c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6999      	ldr	r1, [r3, #24]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	619a      	str	r2, [r3, #24]
      break;
 8003c5e:	e064      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa30 	bl	80040cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6999      	ldr	r1, [r3, #24]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	619a      	str	r2, [r3, #24]
      break;
 8003ca0:	e043      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fa79 	bl	80041a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0208 	orr.w	r2, r2, #8
 8003cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0204 	bic.w	r2, r2, #4
 8003ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69d9      	ldr	r1, [r3, #28]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	61da      	str	r2, [r3, #28]
      break;
 8003ce0:	e023      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fac3 	bl	8004274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69d9      	ldr	r1, [r3, #28]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	021a      	lsls	r2, r3, #8
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	61da      	str	r2, [r3, #28]
      break;
 8003d22:	e002      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	75fb      	strb	r3, [r7, #23]
      break;
 8003d28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIM_ConfigClockSource+0x1c>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e0b4      	b.n	8003ec2 <HAL_TIM_ConfigClockSource+0x186>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d90:	d03e      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0xd4>
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d96:	f200 8087 	bhi.w	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9e:	f000 8086 	beq.w	8003eae <HAL_TIM_ConfigClockSource+0x172>
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da6:	d87f      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b70      	cmp	r3, #112	@ 0x70
 8003daa:	d01a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0xa6>
 8003dac:	2b70      	cmp	r3, #112	@ 0x70
 8003dae:	d87b      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b60      	cmp	r3, #96	@ 0x60
 8003db2:	d050      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x11a>
 8003db4:	2b60      	cmp	r3, #96	@ 0x60
 8003db6:	d877      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b50      	cmp	r3, #80	@ 0x50
 8003dba:	d03c      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0xfa>
 8003dbc:	2b50      	cmp	r3, #80	@ 0x50
 8003dbe:	d873      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b40      	cmp	r3, #64	@ 0x40
 8003dc2:	d058      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x13a>
 8003dc4:	2b40      	cmp	r3, #64	@ 0x40
 8003dc6:	d86f      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b30      	cmp	r3, #48	@ 0x30
 8003dca:	d064      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x15a>
 8003dcc:	2b30      	cmp	r3, #48	@ 0x30
 8003dce:	d86b      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d060      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x15a>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d867      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d05c      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d05a      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x15a>
 8003de0:	e062      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	f000 fb04 	bl	80043fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	609a      	str	r2, [r3, #8]
      break;
 8003e0e:	e04f      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	f000 faed 	bl	80043fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e32:	609a      	str	r2, [r3, #8]
      break;
 8003e34:	e03c      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 fa64 	bl	8004310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2150      	movs	r1, #80	@ 0x50
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fabb 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003e54:	e02c      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e62:	461a      	mov	r2, r3
 8003e64:	f000 fa82 	bl	800436c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2160      	movs	r1, #96	@ 0x60
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 faab 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003e74:	e01c      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e82:	461a      	mov	r2, r3
 8003e84:	f000 fa44 	bl	8004310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2140      	movs	r1, #64	@ 0x40
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa9b 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003e94:	e00c      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f000 fa92 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003ea6:	e003      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003eac:	e000      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff4 <TIM_Base_SetConfig+0xd0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00b      	beq.n	8003f54 <TIM_Base_SetConfig+0x30>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f42:	d007      	beq.n	8003f54 <TIM_Base_SetConfig+0x30>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff8 <TIM_Base_SetConfig+0xd4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0x30>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003ffc <TIM_Base_SetConfig+0xd8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d108      	bne.n	8003f66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a22      	ldr	r2, [pc, #136]	@ (8003ff4 <TIM_Base_SetConfig+0xd0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <TIM_Base_SetConfig+0x62>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f74:	d007      	beq.n	8003f86 <TIM_Base_SetConfig+0x62>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff8 <TIM_Base_SetConfig+0xd4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_Base_SetConfig+0x62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1e      	ldr	r2, [pc, #120]	@ (8003ffc <TIM_Base_SetConfig+0xd8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d108      	bne.n	8003f98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff4 <TIM_Base_SetConfig+0xd0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f023 0201 	bic.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	611a      	str	r2, [r3, #16]
  }
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800

08004000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f023 0201 	bic.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f023 0302 	bic.w	r3, r3, #2
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <TIM_OC1_SetConfig+0xc8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d10c      	bne.n	8004076 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0308 	bic.w	r3, r3, #8
 8004062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <TIM_OC1_SetConfig+0xc8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d111      	bne.n	80040a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800408c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40012c00 	.word	0x40012c00

080040cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f023 0210 	bic.w	r2, r3, #16
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0320 	bic.w	r3, r3, #32
 8004116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <TIM_OC2_SetConfig+0xd0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d10d      	bne.n	8004148 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004146:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a14      	ldr	r2, [pc, #80]	@ (800419c <TIM_OC2_SetConfig+0xd0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d113      	bne.n	8004178 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	40012c00 	.word	0x40012c00

080041a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004270 <TIM_OC3_SetConfig+0xd0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10d      	bne.n	800421a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a14      	ldr	r2, [pc, #80]	@ (8004270 <TIM_OC3_SetConfig+0xd0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d113      	bne.n	800424a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	621a      	str	r2, [r3, #32]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40012c00 	.word	0x40012c00

08004274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	031b      	lsls	r3, r3, #12
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a0f      	ldr	r2, [pc, #60]	@ (800430c <TIM_OC4_SetConfig+0x98>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d109      	bne.n	80042e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00

08004310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800433a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f023 030a 	bic.w	r3, r3, #10
 800434c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0210 	bic.w	r2, r3, #16
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	031b      	lsls	r3, r3, #12
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f043 0307 	orr.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043fe:	b480      	push	{r7}
 8004400:	b087      	sub	sp, #28
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004418:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	021a      	lsls	r2, r3, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	431a      	orrs	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4313      	orrs	r3, r2
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	609a      	str	r2, [r3, #8]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	2201      	movs	r2, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a1a      	ldr	r2, [r3, #32]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	43db      	mvns	r3, r3
 800445e:	401a      	ands	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004498:	2302      	movs	r3, #2
 800449a:	e046      	b.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e8:	d009      	beq.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a12      	ldr	r2, [pc, #72]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a10      	ldr	r2, [pc, #64]	@ (800453c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d10c      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	4313      	orrs	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40000400 	.word	0x40000400
 800453c:	40000800 	.word	0x40000800

08004540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e03d      	b.n	80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e042      	b.n	800469e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fd f82b 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2224      	movs	r2, #36	@ 0x24
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004648:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fd00 	bl	8005050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800465e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800466e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800467e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	4613      	mov	r3, r2
 80046b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d121      	bne.n	8004704 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Transmit_IT+0x26>
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e01a      	b.n	8004706 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2221      	movs	r2, #33	@ 0x21
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046fe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b20      	cmp	r3, #32
 8004728:	d112      	bne.n	8004750 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_UART_Receive_IT+0x26>
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e00b      	b.n	8004752 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	461a      	mov	r2, r3
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 faae 	bl	8004ca8 <UART_Start_Receive_IT>
 800474c:	4603      	mov	r3, r0
 800474e:	e000      	b.n	8004752 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b0ba      	sub	sp, #232	@ 0xe8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004788:	2300      	movs	r3, #0
 800478a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800479a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_UART_IRQHandler+0x66>
 80047ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fb8a 	bl	8004ed4 <UART_Receive_IT>
      return;
 80047c0:	e25b      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80de 	beq.w	8004988 <HAL_UART_IRQHandler+0x22c>
 80047cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80d1 	beq.w	8004988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_UART_IRQHandler+0xae>
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_UART_IRQHandler+0xd2>
 8004816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004826:	f043 0202 	orr.w	r2, r3, #2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_UART_IRQHandler+0xf6>
 800483a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	f043 0204 	orr.w	r2, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <HAL_UART_IRQHandler+0x126>
 800485e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800486a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487a:	f043 0208 	orr.w	r2, r3, #8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 81f2 	beq.w	8004c70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_UART_IRQHandler+0x14e>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fb15 	bl	8004ed4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <HAL_UART_IRQHandler+0x17a>
 80048ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04f      	beq.n	8004976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa1f 	bl	8004d1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d041      	beq.n	800496e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3314      	adds	r3, #20
 80048f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800491a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800492e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1d9      	bne.n	80048ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d013      	beq.n	8004966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	4a7e      	ldr	r2, [pc, #504]	@ (8004b3c <HAL_UART_IRQHandler+0x3e0>)
 8004944:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fe00 	bl	8002550 <HAL_DMA_Abort_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004960:	4610      	mov	r0, r2
 8004962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	e00e      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f98a 	bl	8004c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	e00a      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f986 	bl	8004c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e006      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f982 	bl	8004c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004982:	e175      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	bf00      	nop
    return;
 8004986:	e173      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	2b01      	cmp	r3, #1
 800498e:	f040 814f 	bne.w	8004c30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8148 	beq.w	8004c30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8141 	beq.w	8004c30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80b6 	beq.w	8004b40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8145 	beq.w	8004c74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049f2:	429a      	cmp	r2, r3
 80049f4:	f080 813e 	bcs.w	8004c74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	f000 8088 	beq.w	8004b1c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a44:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1d9      	bne.n	8004a0c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3314      	adds	r3, #20
 8004a5e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3314      	adds	r3, #20
 8004a78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a7c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a84:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e1      	bne.n	8004a58 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3314      	adds	r3, #20
 8004a9a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3314      	adds	r3, #20
 8004ab4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ab8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004aba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004abe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e3      	bne.n	8004a94 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aec:	f023 0310 	bic.w	r3, r3, #16
 8004af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004afe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b00:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e3      	bne.n	8004ada <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd fcde 	bl	80024d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8ad 	bl	8004c92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b38:	e09c      	b.n	8004c74 <HAL_UART_IRQHandler+0x518>
 8004b3a:	bf00      	nop
 8004b3c:	08004ddf 	.word	0x08004ddf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 808e 	beq.w	8004c78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8089 	beq.w	8004c78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e3      	bne.n	8004b66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	623b      	str	r3, [r7, #32]
   return(result);
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e3      	bne.n	8004b9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0310 	bic.w	r3, r3, #16
 8004bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c08:	61fa      	str	r2, [r7, #28]
 8004c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	617b      	str	r3, [r7, #20]
   return(result);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e3      	bne.n	8004be4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f832 	bl	8004c92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c2e:	e023      	b.n	8004c78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <HAL_UART_IRQHandler+0x4f4>
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8dc 	bl	8004e06 <UART_Transmit_IT>
    return;
 8004c4e:	e014      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00e      	beq.n	8004c7a <HAL_UART_IRQHandler+0x51e>
 8004c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f91b 	bl	8004ea4 <UART_EndTransmit_IT>
    return;
 8004c6e:	e004      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
    return;
 8004c70:	bf00      	nop
 8004c72:	e002      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c78:	bf00      	nop
  }
}
 8004c7a:	37e8      	adds	r7, #232	@ 0xe8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	88fa      	ldrh	r2, [r7, #6]
 8004cc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2222      	movs	r2, #34	@ 0x22
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0220 	orr.w	r2, r2, #32
 8004d0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b095      	sub	sp, #84	@ 0x54
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d42:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e5      	bne.n	8004d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3314      	adds	r3, #20
 8004d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d119      	bne.n	8004dc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	330c      	adds	r3, #12
 8004d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f023 0310 	bic.w	r3, r3, #16
 8004da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004db2:	61ba      	str	r2, [r7, #24]
 8004db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6979      	ldr	r1, [r7, #20]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e5      	bne.n	8004d92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dd4:	bf00      	nop
 8004dd6:	3754      	adds	r7, #84	@ 0x54
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff ff41 	bl	8004c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b21      	cmp	r3, #33	@ 0x21
 8004e18:	d13e      	bne.n	8004e98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e22:	d114      	bne.n	8004e4e <UART_Transmit_IT+0x48>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d110      	bne.n	8004e4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	1c9a      	adds	r2, r3, #2
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	621a      	str	r2, [r3, #32]
 8004e4c:	e008      	b.n	8004e60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6211      	str	r1, [r2, #32]
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10f      	bne.n	8004e94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fb ffd1 	bl	8000e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08c      	sub	sp, #48	@ 0x30
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b22      	cmp	r3, #34	@ 0x22
 8004ee6:	f040 80ae 	bne.w	8005046 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef2:	d117      	bne.n	8004f24 <UART_Receive_IT+0x50>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d113      	bne.n	8004f24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f22:	e026      	b.n	8004f72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f36:	d007      	beq.n	8004f48 <UART_Receive_IT+0x74>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <UART_Receive_IT+0x82>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	e008      	b.n	8004f68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d15d      	bne.n	8005042 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0220 	bic.w	r2, r2, #32
 8004f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d135      	bne.n	8005038 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f023 0310 	bic.w	r3, r3, #16
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff2:	623a      	str	r2, [r7, #32]
 8004ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	69f9      	ldr	r1, [r7, #28]
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e5      	bne.n	8004fd2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b10      	cmp	r3, #16
 8005012:	d10a      	bne.n	800502a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fe2e 	bl	8004c92 <HAL_UARTEx_RxEventCallback>
 8005036:	e002      	b.n	800503e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fb fe95 	bl	8000d68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e002      	b.n	8005048 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	3730      	adds	r7, #48	@ 0x30
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800508a:	f023 030c 	bic.w	r3, r3, #12
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	430b      	orrs	r3, r1
 8005096:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005164 <UART_SetConfig+0x114>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d103      	bne.n	80050c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050b8:	f7fe f942 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	e002      	b.n	80050c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050c0:	f7fe f92a 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80050c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009a      	lsls	r2, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	4a22      	ldr	r2, [pc, #136]	@ (8005168 <UART_SetConfig+0x118>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	0119      	lsls	r1, r3, #4
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009a      	lsls	r2, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005168 <UART_SetConfig+0x118>)
 80050fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2064      	movs	r0, #100	@ 0x64
 8005106:	fb00 f303 	mul.w	r3, r0, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	3332      	adds	r3, #50	@ 0x32
 8005110:	4a15      	ldr	r2, [pc, #84]	@ (8005168 <UART_SetConfig+0x118>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800511c:	4419      	add	r1, r3
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009a      	lsls	r2, r3, #2
 8005128:	441a      	add	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	fbb2 f2f3 	udiv	r2, r2, r3
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <UART_SetConfig+0x118>)
 8005136:	fba3 0302 	umull	r0, r3, r3, r2
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	2064      	movs	r0, #100	@ 0x64
 800513e:	fb00 f303 	mul.w	r3, r0, r3
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	3332      	adds	r3, #50	@ 0x32
 8005148:	4a07      	ldr	r2, [pc, #28]	@ (8005168 <UART_SetConfig+0x118>)
 800514a:	fba2 2303 	umull	r2, r3, r2, r3
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	f003 020f 	and.w	r2, r3, #15
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	440a      	add	r2, r1
 800515a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40013800 	.word	0x40013800
 8005168:	51eb851f 	.word	0x51eb851f

0800516c <__cvt>:
 800516c:	2b00      	cmp	r3, #0
 800516e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005172:	461d      	mov	r5, r3
 8005174:	bfbb      	ittet	lt
 8005176:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800517a:	461d      	movlt	r5, r3
 800517c:	2300      	movge	r3, #0
 800517e:	232d      	movlt	r3, #45	@ 0x2d
 8005180:	b088      	sub	sp, #32
 8005182:	4614      	mov	r4, r2
 8005184:	bfb8      	it	lt
 8005186:	4614      	movlt	r4, r2
 8005188:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800518a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800518c:	7013      	strb	r3, [r2, #0]
 800518e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005190:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005194:	f023 0820 	bic.w	r8, r3, #32
 8005198:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800519c:	d005      	beq.n	80051aa <__cvt+0x3e>
 800519e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051a2:	d100      	bne.n	80051a6 <__cvt+0x3a>
 80051a4:	3601      	adds	r6, #1
 80051a6:	2302      	movs	r3, #2
 80051a8:	e000      	b.n	80051ac <__cvt+0x40>
 80051aa:	2303      	movs	r3, #3
 80051ac:	aa07      	add	r2, sp, #28
 80051ae:	9204      	str	r2, [sp, #16]
 80051b0:	aa06      	add	r2, sp, #24
 80051b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80051b6:	e9cd 3600 	strd	r3, r6, [sp]
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	f000 fe4b 	bl	8005e58 <_dtoa_r>
 80051c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80051c6:	4607      	mov	r7, r0
 80051c8:	d119      	bne.n	80051fe <__cvt+0x92>
 80051ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80051cc:	07db      	lsls	r3, r3, #31
 80051ce:	d50e      	bpl.n	80051ee <__cvt+0x82>
 80051d0:	eb00 0906 	add.w	r9, r0, r6
 80051d4:	2200      	movs	r2, #0
 80051d6:	2300      	movs	r3, #0
 80051d8:	4620      	mov	r0, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	f7fb fbe4 	bl	80009a8 <__aeabi_dcmpeq>
 80051e0:	b108      	cbz	r0, 80051e6 <__cvt+0x7a>
 80051e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80051e6:	2230      	movs	r2, #48	@ 0x30
 80051e8:	9b07      	ldr	r3, [sp, #28]
 80051ea:	454b      	cmp	r3, r9
 80051ec:	d31e      	bcc.n	800522c <__cvt+0xc0>
 80051ee:	4638      	mov	r0, r7
 80051f0:	9b07      	ldr	r3, [sp, #28]
 80051f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80051f4:	1bdb      	subs	r3, r3, r7
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	b008      	add	sp, #32
 80051fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005202:	eb00 0906 	add.w	r9, r0, r6
 8005206:	d1e5      	bne.n	80051d4 <__cvt+0x68>
 8005208:	7803      	ldrb	r3, [r0, #0]
 800520a:	2b30      	cmp	r3, #48	@ 0x30
 800520c:	d10a      	bne.n	8005224 <__cvt+0xb8>
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4620      	mov	r0, r4
 8005214:	4629      	mov	r1, r5
 8005216:	f7fb fbc7 	bl	80009a8 <__aeabi_dcmpeq>
 800521a:	b918      	cbnz	r0, 8005224 <__cvt+0xb8>
 800521c:	f1c6 0601 	rsb	r6, r6, #1
 8005220:	f8ca 6000 	str.w	r6, [sl]
 8005224:	f8da 3000 	ldr.w	r3, [sl]
 8005228:	4499      	add	r9, r3
 800522a:	e7d3      	b.n	80051d4 <__cvt+0x68>
 800522c:	1c59      	adds	r1, r3, #1
 800522e:	9107      	str	r1, [sp, #28]
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e7d9      	b.n	80051e8 <__cvt+0x7c>

08005234 <__exponent>:
 8005234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005236:	2900      	cmp	r1, #0
 8005238:	bfb6      	itet	lt
 800523a:	232d      	movlt	r3, #45	@ 0x2d
 800523c:	232b      	movge	r3, #43	@ 0x2b
 800523e:	4249      	neglt	r1, r1
 8005240:	2909      	cmp	r1, #9
 8005242:	7002      	strb	r2, [r0, #0]
 8005244:	7043      	strb	r3, [r0, #1]
 8005246:	dd29      	ble.n	800529c <__exponent+0x68>
 8005248:	f10d 0307 	add.w	r3, sp, #7
 800524c:	461d      	mov	r5, r3
 800524e:	270a      	movs	r7, #10
 8005250:	fbb1 f6f7 	udiv	r6, r1, r7
 8005254:	461a      	mov	r2, r3
 8005256:	fb07 1416 	mls	r4, r7, r6, r1
 800525a:	3430      	adds	r4, #48	@ 0x30
 800525c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005260:	460c      	mov	r4, r1
 8005262:	2c63      	cmp	r4, #99	@ 0x63
 8005264:	4631      	mov	r1, r6
 8005266:	f103 33ff 	add.w	r3, r3, #4294967295
 800526a:	dcf1      	bgt.n	8005250 <__exponent+0x1c>
 800526c:	3130      	adds	r1, #48	@ 0x30
 800526e:	1e94      	subs	r4, r2, #2
 8005270:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005274:	4623      	mov	r3, r4
 8005276:	1c41      	adds	r1, r0, #1
 8005278:	42ab      	cmp	r3, r5
 800527a:	d30a      	bcc.n	8005292 <__exponent+0x5e>
 800527c:	f10d 0309 	add.w	r3, sp, #9
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	42ac      	cmp	r4, r5
 8005284:	bf88      	it	hi
 8005286:	2300      	movhi	r3, #0
 8005288:	3302      	adds	r3, #2
 800528a:	4403      	add	r3, r0
 800528c:	1a18      	subs	r0, r3, r0
 800528e:	b003      	add	sp, #12
 8005290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005292:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005296:	f801 6f01 	strb.w	r6, [r1, #1]!
 800529a:	e7ed      	b.n	8005278 <__exponent+0x44>
 800529c:	2330      	movs	r3, #48	@ 0x30
 800529e:	3130      	adds	r1, #48	@ 0x30
 80052a0:	7083      	strb	r3, [r0, #2]
 80052a2:	70c1      	strb	r1, [r0, #3]
 80052a4:	1d03      	adds	r3, r0, #4
 80052a6:	e7f1      	b.n	800528c <__exponent+0x58>

080052a8 <_printf_float>:
 80052a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	b091      	sub	sp, #68	@ 0x44
 80052ae:	460c      	mov	r4, r1
 80052b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80052b4:	4616      	mov	r6, r2
 80052b6:	461f      	mov	r7, r3
 80052b8:	4605      	mov	r5, r0
 80052ba:	f000 fcbf 	bl	8005c3c <_localeconv_r>
 80052be:	6803      	ldr	r3, [r0, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	9308      	str	r3, [sp, #32]
 80052c4:	f7fa ff44 	bl	8000150 <strlen>
 80052c8:	2300      	movs	r3, #0
 80052ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80052cc:	f8d8 3000 	ldr.w	r3, [r8]
 80052d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80052d2:	3307      	adds	r3, #7
 80052d4:	f023 0307 	bic.w	r3, r3, #7
 80052d8:	f103 0208 	add.w	r2, r3, #8
 80052dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80052e0:	f8d4 b000 	ldr.w	fp, [r4]
 80052e4:	f8c8 2000 	str.w	r2, [r8]
 80052e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80052f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052f2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80052fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005302:	4b9c      	ldr	r3, [pc, #624]	@ (8005574 <_printf_float+0x2cc>)
 8005304:	f7fb fb82 	bl	8000a0c <__aeabi_dcmpun>
 8005308:	bb70      	cbnz	r0, 8005368 <_printf_float+0xc0>
 800530a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	4b98      	ldr	r3, [pc, #608]	@ (8005574 <_printf_float+0x2cc>)
 8005314:	f7fb fb5c 	bl	80009d0 <__aeabi_dcmple>
 8005318:	bb30      	cbnz	r0, 8005368 <_printf_float+0xc0>
 800531a:	2200      	movs	r2, #0
 800531c:	2300      	movs	r3, #0
 800531e:	4640      	mov	r0, r8
 8005320:	4649      	mov	r1, r9
 8005322:	f7fb fb4b 	bl	80009bc <__aeabi_dcmplt>
 8005326:	b110      	cbz	r0, 800532e <_printf_float+0x86>
 8005328:	232d      	movs	r3, #45	@ 0x2d
 800532a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800532e:	4a92      	ldr	r2, [pc, #584]	@ (8005578 <_printf_float+0x2d0>)
 8005330:	4b92      	ldr	r3, [pc, #584]	@ (800557c <_printf_float+0x2d4>)
 8005332:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005336:	bf8c      	ite	hi
 8005338:	4690      	movhi	r8, r2
 800533a:	4698      	movls	r8, r3
 800533c:	2303      	movs	r3, #3
 800533e:	f04f 0900 	mov.w	r9, #0
 8005342:	6123      	str	r3, [r4, #16]
 8005344:	f02b 0304 	bic.w	r3, fp, #4
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	4633      	mov	r3, r6
 800534c:	4621      	mov	r1, r4
 800534e:	4628      	mov	r0, r5
 8005350:	9700      	str	r7, [sp, #0]
 8005352:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005354:	f000 f9d4 	bl	8005700 <_printf_common>
 8005358:	3001      	adds	r0, #1
 800535a:	f040 8090 	bne.w	800547e <_printf_float+0x1d6>
 800535e:	f04f 30ff 	mov.w	r0, #4294967295
 8005362:	b011      	add	sp, #68	@ 0x44
 8005364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	4640      	mov	r0, r8
 800536e:	4649      	mov	r1, r9
 8005370:	f7fb fb4c 	bl	8000a0c <__aeabi_dcmpun>
 8005374:	b148      	cbz	r0, 800538a <_printf_float+0xe2>
 8005376:	464b      	mov	r3, r9
 8005378:	2b00      	cmp	r3, #0
 800537a:	bfb8      	it	lt
 800537c:	232d      	movlt	r3, #45	@ 0x2d
 800537e:	4a80      	ldr	r2, [pc, #512]	@ (8005580 <_printf_float+0x2d8>)
 8005380:	bfb8      	it	lt
 8005382:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005386:	4b7f      	ldr	r3, [pc, #508]	@ (8005584 <_printf_float+0x2dc>)
 8005388:	e7d3      	b.n	8005332 <_printf_float+0x8a>
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	d13f      	bne.n	8005414 <_printf_float+0x16c>
 8005394:	2306      	movs	r3, #6
 8005396:	6063      	str	r3, [r4, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	9206      	str	r2, [sp, #24]
 80053a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80053a4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80053a8:	aa0d      	add	r2, sp, #52	@ 0x34
 80053aa:	9203      	str	r2, [sp, #12]
 80053ac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80053b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	4642      	mov	r2, r8
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4628      	mov	r0, r5
 80053bc:	464b      	mov	r3, r9
 80053be:	910a      	str	r1, [sp, #40]	@ 0x28
 80053c0:	f7ff fed4 	bl	800516c <__cvt>
 80053c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053c6:	4680      	mov	r8, r0
 80053c8:	2947      	cmp	r1, #71	@ 0x47
 80053ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80053cc:	d128      	bne.n	8005420 <_printf_float+0x178>
 80053ce:	1cc8      	adds	r0, r1, #3
 80053d0:	db02      	blt.n	80053d8 <_printf_float+0x130>
 80053d2:	6863      	ldr	r3, [r4, #4]
 80053d4:	4299      	cmp	r1, r3
 80053d6:	dd40      	ble.n	800545a <_printf_float+0x1b2>
 80053d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80053dc:	fa5f fa8a 	uxtb.w	sl, sl
 80053e0:	4652      	mov	r2, sl
 80053e2:	3901      	subs	r1, #1
 80053e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80053e8:	910d      	str	r1, [sp, #52]	@ 0x34
 80053ea:	f7ff ff23 	bl	8005234 <__exponent>
 80053ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053f0:	4681      	mov	r9, r0
 80053f2:	1813      	adds	r3, r2, r0
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	6123      	str	r3, [r4, #16]
 80053f8:	dc02      	bgt.n	8005400 <_printf_float+0x158>
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	07d2      	lsls	r2, r2, #31
 80053fe:	d501      	bpl.n	8005404 <_printf_float+0x15c>
 8005400:	3301      	adds	r3, #1
 8005402:	6123      	str	r3, [r4, #16]
 8005404:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005408:	2b00      	cmp	r3, #0
 800540a:	d09e      	beq.n	800534a <_printf_float+0xa2>
 800540c:	232d      	movs	r3, #45	@ 0x2d
 800540e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005412:	e79a      	b.n	800534a <_printf_float+0xa2>
 8005414:	2947      	cmp	r1, #71	@ 0x47
 8005416:	d1bf      	bne.n	8005398 <_printf_float+0xf0>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1bd      	bne.n	8005398 <_printf_float+0xf0>
 800541c:	2301      	movs	r3, #1
 800541e:	e7ba      	b.n	8005396 <_printf_float+0xee>
 8005420:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005424:	d9dc      	bls.n	80053e0 <_printf_float+0x138>
 8005426:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800542a:	d118      	bne.n	800545e <_printf_float+0x1b6>
 800542c:	2900      	cmp	r1, #0
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	dd0b      	ble.n	800544a <_printf_float+0x1a2>
 8005432:	6121      	str	r1, [r4, #16]
 8005434:	b913      	cbnz	r3, 800543c <_printf_float+0x194>
 8005436:	6822      	ldr	r2, [r4, #0]
 8005438:	07d0      	lsls	r0, r2, #31
 800543a:	d502      	bpl.n	8005442 <_printf_float+0x19a>
 800543c:	3301      	adds	r3, #1
 800543e:	440b      	add	r3, r1
 8005440:	6123      	str	r3, [r4, #16]
 8005442:	f04f 0900 	mov.w	r9, #0
 8005446:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005448:	e7dc      	b.n	8005404 <_printf_float+0x15c>
 800544a:	b913      	cbnz	r3, 8005452 <_printf_float+0x1aa>
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	07d2      	lsls	r2, r2, #31
 8005450:	d501      	bpl.n	8005456 <_printf_float+0x1ae>
 8005452:	3302      	adds	r3, #2
 8005454:	e7f4      	b.n	8005440 <_printf_float+0x198>
 8005456:	2301      	movs	r3, #1
 8005458:	e7f2      	b.n	8005440 <_printf_float+0x198>
 800545a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800545e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005460:	4299      	cmp	r1, r3
 8005462:	db05      	blt.n	8005470 <_printf_float+0x1c8>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	6121      	str	r1, [r4, #16]
 8005468:	07d8      	lsls	r0, r3, #31
 800546a:	d5ea      	bpl.n	8005442 <_printf_float+0x19a>
 800546c:	1c4b      	adds	r3, r1, #1
 800546e:	e7e7      	b.n	8005440 <_printf_float+0x198>
 8005470:	2900      	cmp	r1, #0
 8005472:	bfcc      	ite	gt
 8005474:	2201      	movgt	r2, #1
 8005476:	f1c1 0202 	rsble	r2, r1, #2
 800547a:	4413      	add	r3, r2
 800547c:	e7e0      	b.n	8005440 <_printf_float+0x198>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	055a      	lsls	r2, r3, #21
 8005482:	d407      	bmi.n	8005494 <_printf_float+0x1ec>
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	4642      	mov	r2, r8
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	d12b      	bne.n	80054ea <_printf_float+0x242>
 8005492:	e764      	b.n	800535e <_printf_float+0xb6>
 8005494:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005498:	f240 80dc 	bls.w	8005654 <_printf_float+0x3ac>
 800549c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054a0:	2200      	movs	r2, #0
 80054a2:	2300      	movs	r3, #0
 80054a4:	f7fb fa80 	bl	80009a8 <__aeabi_dcmpeq>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d033      	beq.n	8005514 <_printf_float+0x26c>
 80054ac:	2301      	movs	r3, #1
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	4a35      	ldr	r2, [pc, #212]	@ (8005588 <_printf_float+0x2e0>)
 80054b4:	47b8      	blx	r7
 80054b6:	3001      	adds	r0, #1
 80054b8:	f43f af51 	beq.w	800535e <_printf_float+0xb6>
 80054bc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80054c0:	4543      	cmp	r3, r8
 80054c2:	db02      	blt.n	80054ca <_printf_float+0x222>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	07d8      	lsls	r0, r3, #31
 80054c8:	d50f      	bpl.n	80054ea <_printf_float+0x242>
 80054ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054ce:	4631      	mov	r1, r6
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b8      	blx	r7
 80054d4:	3001      	adds	r0, #1
 80054d6:	f43f af42 	beq.w	800535e <_printf_float+0xb6>
 80054da:	f04f 0900 	mov.w	r9, #0
 80054de:	f108 38ff 	add.w	r8, r8, #4294967295
 80054e2:	f104 0a1a 	add.w	sl, r4, #26
 80054e6:	45c8      	cmp	r8, r9
 80054e8:	dc09      	bgt.n	80054fe <_printf_float+0x256>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	079b      	lsls	r3, r3, #30
 80054ee:	f100 8102 	bmi.w	80056f6 <_printf_float+0x44e>
 80054f2:	68e0      	ldr	r0, [r4, #12]
 80054f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054f6:	4298      	cmp	r0, r3
 80054f8:	bfb8      	it	lt
 80054fa:	4618      	movlt	r0, r3
 80054fc:	e731      	b.n	8005362 <_printf_float+0xba>
 80054fe:	2301      	movs	r3, #1
 8005500:	4652      	mov	r2, sl
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	f43f af28 	beq.w	800535e <_printf_float+0xb6>
 800550e:	f109 0901 	add.w	r9, r9, #1
 8005512:	e7e8      	b.n	80054e6 <_printf_float+0x23e>
 8005514:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005516:	2b00      	cmp	r3, #0
 8005518:	dc38      	bgt.n	800558c <_printf_float+0x2e4>
 800551a:	2301      	movs	r3, #1
 800551c:	4631      	mov	r1, r6
 800551e:	4628      	mov	r0, r5
 8005520:	4a19      	ldr	r2, [pc, #100]	@ (8005588 <_printf_float+0x2e0>)
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	f43f af1a 	beq.w	800535e <_printf_float+0xb6>
 800552a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800552e:	ea59 0303 	orrs.w	r3, r9, r3
 8005532:	d102      	bne.n	800553a <_printf_float+0x292>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	07d9      	lsls	r1, r3, #31
 8005538:	d5d7      	bpl.n	80054ea <_printf_float+0x242>
 800553a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	f43f af0a 	beq.w	800535e <_printf_float+0xb6>
 800554a:	f04f 0a00 	mov.w	sl, #0
 800554e:	f104 0b1a 	add.w	fp, r4, #26
 8005552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005554:	425b      	negs	r3, r3
 8005556:	4553      	cmp	r3, sl
 8005558:	dc01      	bgt.n	800555e <_printf_float+0x2b6>
 800555a:	464b      	mov	r3, r9
 800555c:	e793      	b.n	8005486 <_printf_float+0x1de>
 800555e:	2301      	movs	r3, #1
 8005560:	465a      	mov	r2, fp
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	f43f aef8 	beq.w	800535e <_printf_float+0xb6>
 800556e:	f10a 0a01 	add.w	sl, sl, #1
 8005572:	e7ee      	b.n	8005552 <_printf_float+0x2aa>
 8005574:	7fefffff 	.word	0x7fefffff
 8005578:	08007ae2 	.word	0x08007ae2
 800557c:	08007ade 	.word	0x08007ade
 8005580:	08007aea 	.word	0x08007aea
 8005584:	08007ae6 	.word	0x08007ae6
 8005588:	08007aee 	.word	0x08007aee
 800558c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800558e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005592:	4553      	cmp	r3, sl
 8005594:	bfa8      	it	ge
 8005596:	4653      	movge	r3, sl
 8005598:	2b00      	cmp	r3, #0
 800559a:	4699      	mov	r9, r3
 800559c:	dc36      	bgt.n	800560c <_printf_float+0x364>
 800559e:	f04f 0b00 	mov.w	fp, #0
 80055a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055a6:	f104 021a 	add.w	r2, r4, #26
 80055aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80055ae:	eba3 0309 	sub.w	r3, r3, r9
 80055b2:	455b      	cmp	r3, fp
 80055b4:	dc31      	bgt.n	800561a <_printf_float+0x372>
 80055b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055b8:	459a      	cmp	sl, r3
 80055ba:	dc3a      	bgt.n	8005632 <_printf_float+0x38a>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	07da      	lsls	r2, r3, #31
 80055c0:	d437      	bmi.n	8005632 <_printf_float+0x38a>
 80055c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055c4:	ebaa 0903 	sub.w	r9, sl, r3
 80055c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ca:	ebaa 0303 	sub.w	r3, sl, r3
 80055ce:	4599      	cmp	r9, r3
 80055d0:	bfa8      	it	ge
 80055d2:	4699      	movge	r9, r3
 80055d4:	f1b9 0f00 	cmp.w	r9, #0
 80055d8:	dc33      	bgt.n	8005642 <_printf_float+0x39a>
 80055da:	f04f 0800 	mov.w	r8, #0
 80055de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055e2:	f104 0b1a 	add.w	fp, r4, #26
 80055e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055e8:	ebaa 0303 	sub.w	r3, sl, r3
 80055ec:	eba3 0309 	sub.w	r3, r3, r9
 80055f0:	4543      	cmp	r3, r8
 80055f2:	f77f af7a 	ble.w	80054ea <_printf_float+0x242>
 80055f6:	2301      	movs	r3, #1
 80055f8:	465a      	mov	r2, fp
 80055fa:	4631      	mov	r1, r6
 80055fc:	4628      	mov	r0, r5
 80055fe:	47b8      	blx	r7
 8005600:	3001      	adds	r0, #1
 8005602:	f43f aeac 	beq.w	800535e <_printf_float+0xb6>
 8005606:	f108 0801 	add.w	r8, r8, #1
 800560a:	e7ec      	b.n	80055e6 <_printf_float+0x33e>
 800560c:	4642      	mov	r2, r8
 800560e:	4631      	mov	r1, r6
 8005610:	4628      	mov	r0, r5
 8005612:	47b8      	blx	r7
 8005614:	3001      	adds	r0, #1
 8005616:	d1c2      	bne.n	800559e <_printf_float+0x2f6>
 8005618:	e6a1      	b.n	800535e <_printf_float+0xb6>
 800561a:	2301      	movs	r3, #1
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	920a      	str	r2, [sp, #40]	@ 0x28
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	f43f ae9a 	beq.w	800535e <_printf_float+0xb6>
 800562a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800562c:	f10b 0b01 	add.w	fp, fp, #1
 8005630:	e7bb      	b.n	80055aa <_printf_float+0x302>
 8005632:	4631      	mov	r1, r6
 8005634:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	d1c0      	bne.n	80055c2 <_printf_float+0x31a>
 8005640:	e68d      	b.n	800535e <_printf_float+0xb6>
 8005642:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005644:	464b      	mov	r3, r9
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	4442      	add	r2, r8
 800564c:	47b8      	blx	r7
 800564e:	3001      	adds	r0, #1
 8005650:	d1c3      	bne.n	80055da <_printf_float+0x332>
 8005652:	e684      	b.n	800535e <_printf_float+0xb6>
 8005654:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005658:	f1ba 0f01 	cmp.w	sl, #1
 800565c:	dc01      	bgt.n	8005662 <_printf_float+0x3ba>
 800565e:	07db      	lsls	r3, r3, #31
 8005660:	d536      	bpl.n	80056d0 <_printf_float+0x428>
 8005662:	2301      	movs	r3, #1
 8005664:	4642      	mov	r2, r8
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	f43f ae76 	beq.w	800535e <_printf_float+0xb6>
 8005672:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005676:	4631      	mov	r1, r6
 8005678:	4628      	mov	r0, r5
 800567a:	47b8      	blx	r7
 800567c:	3001      	adds	r0, #1
 800567e:	f43f ae6e 	beq.w	800535e <_printf_float+0xb6>
 8005682:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005686:	2200      	movs	r2, #0
 8005688:	2300      	movs	r3, #0
 800568a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800568e:	f7fb f98b 	bl	80009a8 <__aeabi_dcmpeq>
 8005692:	b9c0      	cbnz	r0, 80056c6 <_printf_float+0x41e>
 8005694:	4653      	mov	r3, sl
 8005696:	f108 0201 	add.w	r2, r8, #1
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	d10c      	bne.n	80056be <_printf_float+0x416>
 80056a4:	e65b      	b.n	800535e <_printf_float+0xb6>
 80056a6:	2301      	movs	r3, #1
 80056a8:	465a      	mov	r2, fp
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f ae54 	beq.w	800535e <_printf_float+0xb6>
 80056b6:	f108 0801 	add.w	r8, r8, #1
 80056ba:	45d0      	cmp	r8, sl
 80056bc:	dbf3      	blt.n	80056a6 <_printf_float+0x3fe>
 80056be:	464b      	mov	r3, r9
 80056c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80056c4:	e6e0      	b.n	8005488 <_printf_float+0x1e0>
 80056c6:	f04f 0800 	mov.w	r8, #0
 80056ca:	f104 0b1a 	add.w	fp, r4, #26
 80056ce:	e7f4      	b.n	80056ba <_printf_float+0x412>
 80056d0:	2301      	movs	r3, #1
 80056d2:	4642      	mov	r2, r8
 80056d4:	e7e1      	b.n	800569a <_printf_float+0x3f2>
 80056d6:	2301      	movs	r3, #1
 80056d8:	464a      	mov	r2, r9
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47b8      	blx	r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	f43f ae3c 	beq.w	800535e <_printf_float+0xb6>
 80056e6:	f108 0801 	add.w	r8, r8, #1
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80056ee:	1a5b      	subs	r3, r3, r1
 80056f0:	4543      	cmp	r3, r8
 80056f2:	dcf0      	bgt.n	80056d6 <_printf_float+0x42e>
 80056f4:	e6fd      	b.n	80054f2 <_printf_float+0x24a>
 80056f6:	f04f 0800 	mov.w	r8, #0
 80056fa:	f104 0919 	add.w	r9, r4, #25
 80056fe:	e7f4      	b.n	80056ea <_printf_float+0x442>

08005700 <_printf_common>:
 8005700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	4616      	mov	r6, r2
 8005706:	4698      	mov	r8, r3
 8005708:	688a      	ldr	r2, [r1, #8]
 800570a:	690b      	ldr	r3, [r1, #16]
 800570c:	4607      	mov	r7, r0
 800570e:	4293      	cmp	r3, r2
 8005710:	bfb8      	it	lt
 8005712:	4613      	movlt	r3, r2
 8005714:	6033      	str	r3, [r6, #0]
 8005716:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800571a:	460c      	mov	r4, r1
 800571c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005720:	b10a      	cbz	r2, 8005726 <_printf_common+0x26>
 8005722:	3301      	adds	r3, #1
 8005724:	6033      	str	r3, [r6, #0]
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	0699      	lsls	r1, r3, #26
 800572a:	bf42      	ittt	mi
 800572c:	6833      	ldrmi	r3, [r6, #0]
 800572e:	3302      	addmi	r3, #2
 8005730:	6033      	strmi	r3, [r6, #0]
 8005732:	6825      	ldr	r5, [r4, #0]
 8005734:	f015 0506 	ands.w	r5, r5, #6
 8005738:	d106      	bne.n	8005748 <_printf_common+0x48>
 800573a:	f104 0a19 	add.w	sl, r4, #25
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	6832      	ldr	r2, [r6, #0]
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	42ab      	cmp	r3, r5
 8005746:	dc2b      	bgt.n	80057a0 <_printf_common+0xa0>
 8005748:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	3b00      	subs	r3, #0
 8005750:	bf18      	it	ne
 8005752:	2301      	movne	r3, #1
 8005754:	0692      	lsls	r2, r2, #26
 8005756:	d430      	bmi.n	80057ba <_printf_common+0xba>
 8005758:	4641      	mov	r1, r8
 800575a:	4638      	mov	r0, r7
 800575c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005760:	47c8      	blx	r9
 8005762:	3001      	adds	r0, #1
 8005764:	d023      	beq.n	80057ae <_printf_common+0xae>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	6922      	ldr	r2, [r4, #16]
 800576a:	f003 0306 	and.w	r3, r3, #6
 800576e:	2b04      	cmp	r3, #4
 8005770:	bf14      	ite	ne
 8005772:	2500      	movne	r5, #0
 8005774:	6833      	ldreq	r3, [r6, #0]
 8005776:	f04f 0600 	mov.w	r6, #0
 800577a:	bf08      	it	eq
 800577c:	68e5      	ldreq	r5, [r4, #12]
 800577e:	f104 041a 	add.w	r4, r4, #26
 8005782:	bf08      	it	eq
 8005784:	1aed      	subeq	r5, r5, r3
 8005786:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800578a:	bf08      	it	eq
 800578c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005790:	4293      	cmp	r3, r2
 8005792:	bfc4      	itt	gt
 8005794:	1a9b      	subgt	r3, r3, r2
 8005796:	18ed      	addgt	r5, r5, r3
 8005798:	42b5      	cmp	r5, r6
 800579a:	d11a      	bne.n	80057d2 <_printf_common+0xd2>
 800579c:	2000      	movs	r0, #0
 800579e:	e008      	b.n	80057b2 <_printf_common+0xb2>
 80057a0:	2301      	movs	r3, #1
 80057a2:	4652      	mov	r2, sl
 80057a4:	4641      	mov	r1, r8
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c8      	blx	r9
 80057aa:	3001      	adds	r0, #1
 80057ac:	d103      	bne.n	80057b6 <_printf_common+0xb6>
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	3501      	adds	r5, #1
 80057b8:	e7c1      	b.n	800573e <_printf_common+0x3e>
 80057ba:	2030      	movs	r0, #48	@ 0x30
 80057bc:	18e1      	adds	r1, r4, r3
 80057be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057c8:	4422      	add	r2, r4
 80057ca:	3302      	adds	r3, #2
 80057cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057d0:	e7c2      	b.n	8005758 <_printf_common+0x58>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4622      	mov	r2, r4
 80057d6:	4641      	mov	r1, r8
 80057d8:	4638      	mov	r0, r7
 80057da:	47c8      	blx	r9
 80057dc:	3001      	adds	r0, #1
 80057de:	d0e6      	beq.n	80057ae <_printf_common+0xae>
 80057e0:	3601      	adds	r6, #1
 80057e2:	e7d9      	b.n	8005798 <_printf_common+0x98>

080057e4 <_printf_i>:
 80057e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	7e0f      	ldrb	r7, [r1, #24]
 80057ea:	4691      	mov	r9, r2
 80057ec:	2f78      	cmp	r7, #120	@ 0x78
 80057ee:	4680      	mov	r8, r0
 80057f0:	460c      	mov	r4, r1
 80057f2:	469a      	mov	sl, r3
 80057f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057fa:	d807      	bhi.n	800580c <_printf_i+0x28>
 80057fc:	2f62      	cmp	r7, #98	@ 0x62
 80057fe:	d80a      	bhi.n	8005816 <_printf_i+0x32>
 8005800:	2f00      	cmp	r7, #0
 8005802:	f000 80d1 	beq.w	80059a8 <_printf_i+0x1c4>
 8005806:	2f58      	cmp	r7, #88	@ 0x58
 8005808:	f000 80b8 	beq.w	800597c <_printf_i+0x198>
 800580c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005810:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005814:	e03a      	b.n	800588c <_printf_i+0xa8>
 8005816:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800581a:	2b15      	cmp	r3, #21
 800581c:	d8f6      	bhi.n	800580c <_printf_i+0x28>
 800581e:	a101      	add	r1, pc, #4	@ (adr r1, 8005824 <_printf_i+0x40>)
 8005820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005824:	0800587d 	.word	0x0800587d
 8005828:	08005891 	.word	0x08005891
 800582c:	0800580d 	.word	0x0800580d
 8005830:	0800580d 	.word	0x0800580d
 8005834:	0800580d 	.word	0x0800580d
 8005838:	0800580d 	.word	0x0800580d
 800583c:	08005891 	.word	0x08005891
 8005840:	0800580d 	.word	0x0800580d
 8005844:	0800580d 	.word	0x0800580d
 8005848:	0800580d 	.word	0x0800580d
 800584c:	0800580d 	.word	0x0800580d
 8005850:	0800598f 	.word	0x0800598f
 8005854:	080058bb 	.word	0x080058bb
 8005858:	08005949 	.word	0x08005949
 800585c:	0800580d 	.word	0x0800580d
 8005860:	0800580d 	.word	0x0800580d
 8005864:	080059b1 	.word	0x080059b1
 8005868:	0800580d 	.word	0x0800580d
 800586c:	080058bb 	.word	0x080058bb
 8005870:	0800580d 	.word	0x0800580d
 8005874:	0800580d 	.word	0x0800580d
 8005878:	08005951 	.word	0x08005951
 800587c:	6833      	ldr	r3, [r6, #0]
 800587e:	1d1a      	adds	r2, r3, #4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6032      	str	r2, [r6, #0]
 8005884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800588c:	2301      	movs	r3, #1
 800588e:	e09c      	b.n	80059ca <_printf_i+0x1e6>
 8005890:	6833      	ldr	r3, [r6, #0]
 8005892:	6820      	ldr	r0, [r4, #0]
 8005894:	1d19      	adds	r1, r3, #4
 8005896:	6031      	str	r1, [r6, #0]
 8005898:	0606      	lsls	r6, r0, #24
 800589a:	d501      	bpl.n	80058a0 <_printf_i+0xbc>
 800589c:	681d      	ldr	r5, [r3, #0]
 800589e:	e003      	b.n	80058a8 <_printf_i+0xc4>
 80058a0:	0645      	lsls	r5, r0, #25
 80058a2:	d5fb      	bpl.n	800589c <_printf_i+0xb8>
 80058a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	da03      	bge.n	80058b4 <_printf_i+0xd0>
 80058ac:	232d      	movs	r3, #45	@ 0x2d
 80058ae:	426d      	negs	r5, r5
 80058b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058b4:	230a      	movs	r3, #10
 80058b6:	4858      	ldr	r0, [pc, #352]	@ (8005a18 <_printf_i+0x234>)
 80058b8:	e011      	b.n	80058de <_printf_i+0xfa>
 80058ba:	6821      	ldr	r1, [r4, #0]
 80058bc:	6833      	ldr	r3, [r6, #0]
 80058be:	0608      	lsls	r0, r1, #24
 80058c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80058c4:	d402      	bmi.n	80058cc <_printf_i+0xe8>
 80058c6:	0649      	lsls	r1, r1, #25
 80058c8:	bf48      	it	mi
 80058ca:	b2ad      	uxthmi	r5, r5
 80058cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80058ce:	6033      	str	r3, [r6, #0]
 80058d0:	bf14      	ite	ne
 80058d2:	230a      	movne	r3, #10
 80058d4:	2308      	moveq	r3, #8
 80058d6:	4850      	ldr	r0, [pc, #320]	@ (8005a18 <_printf_i+0x234>)
 80058d8:	2100      	movs	r1, #0
 80058da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058de:	6866      	ldr	r6, [r4, #4]
 80058e0:	2e00      	cmp	r6, #0
 80058e2:	60a6      	str	r6, [r4, #8]
 80058e4:	db05      	blt.n	80058f2 <_printf_i+0x10e>
 80058e6:	6821      	ldr	r1, [r4, #0]
 80058e8:	432e      	orrs	r6, r5
 80058ea:	f021 0104 	bic.w	r1, r1, #4
 80058ee:	6021      	str	r1, [r4, #0]
 80058f0:	d04b      	beq.n	800598a <_printf_i+0x1a6>
 80058f2:	4616      	mov	r6, r2
 80058f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80058f8:	fb03 5711 	mls	r7, r3, r1, r5
 80058fc:	5dc7      	ldrb	r7, [r0, r7]
 80058fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005902:	462f      	mov	r7, r5
 8005904:	42bb      	cmp	r3, r7
 8005906:	460d      	mov	r5, r1
 8005908:	d9f4      	bls.n	80058f4 <_printf_i+0x110>
 800590a:	2b08      	cmp	r3, #8
 800590c:	d10b      	bne.n	8005926 <_printf_i+0x142>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	07df      	lsls	r7, r3, #31
 8005912:	d508      	bpl.n	8005926 <_printf_i+0x142>
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	6861      	ldr	r1, [r4, #4]
 8005918:	4299      	cmp	r1, r3
 800591a:	bfde      	ittt	le
 800591c:	2330      	movle	r3, #48	@ 0x30
 800591e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005922:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005926:	1b92      	subs	r2, r2, r6
 8005928:	6122      	str	r2, [r4, #16]
 800592a:	464b      	mov	r3, r9
 800592c:	4621      	mov	r1, r4
 800592e:	4640      	mov	r0, r8
 8005930:	f8cd a000 	str.w	sl, [sp]
 8005934:	aa03      	add	r2, sp, #12
 8005936:	f7ff fee3 	bl	8005700 <_printf_common>
 800593a:	3001      	adds	r0, #1
 800593c:	d14a      	bne.n	80059d4 <_printf_i+0x1f0>
 800593e:	f04f 30ff 	mov.w	r0, #4294967295
 8005942:	b004      	add	sp, #16
 8005944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	f043 0320 	orr.w	r3, r3, #32
 800594e:	6023      	str	r3, [r4, #0]
 8005950:	2778      	movs	r7, #120	@ 0x78
 8005952:	4832      	ldr	r0, [pc, #200]	@ (8005a1c <_printf_i+0x238>)
 8005954:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	6831      	ldr	r1, [r6, #0]
 800595c:	061f      	lsls	r7, r3, #24
 800595e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005962:	d402      	bmi.n	800596a <_printf_i+0x186>
 8005964:	065f      	lsls	r7, r3, #25
 8005966:	bf48      	it	mi
 8005968:	b2ad      	uxthmi	r5, r5
 800596a:	6031      	str	r1, [r6, #0]
 800596c:	07d9      	lsls	r1, r3, #31
 800596e:	bf44      	itt	mi
 8005970:	f043 0320 	orrmi.w	r3, r3, #32
 8005974:	6023      	strmi	r3, [r4, #0]
 8005976:	b11d      	cbz	r5, 8005980 <_printf_i+0x19c>
 8005978:	2310      	movs	r3, #16
 800597a:	e7ad      	b.n	80058d8 <_printf_i+0xf4>
 800597c:	4826      	ldr	r0, [pc, #152]	@ (8005a18 <_printf_i+0x234>)
 800597e:	e7e9      	b.n	8005954 <_printf_i+0x170>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	f023 0320 	bic.w	r3, r3, #32
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	e7f6      	b.n	8005978 <_printf_i+0x194>
 800598a:	4616      	mov	r6, r2
 800598c:	e7bd      	b.n	800590a <_printf_i+0x126>
 800598e:	6833      	ldr	r3, [r6, #0]
 8005990:	6825      	ldr	r5, [r4, #0]
 8005992:	1d18      	adds	r0, r3, #4
 8005994:	6961      	ldr	r1, [r4, #20]
 8005996:	6030      	str	r0, [r6, #0]
 8005998:	062e      	lsls	r6, r5, #24
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	d501      	bpl.n	80059a2 <_printf_i+0x1be>
 800599e:	6019      	str	r1, [r3, #0]
 80059a0:	e002      	b.n	80059a8 <_printf_i+0x1c4>
 80059a2:	0668      	lsls	r0, r5, #25
 80059a4:	d5fb      	bpl.n	800599e <_printf_i+0x1ba>
 80059a6:	8019      	strh	r1, [r3, #0]
 80059a8:	2300      	movs	r3, #0
 80059aa:	4616      	mov	r6, r2
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	e7bc      	b.n	800592a <_printf_i+0x146>
 80059b0:	6833      	ldr	r3, [r6, #0]
 80059b2:	2100      	movs	r1, #0
 80059b4:	1d1a      	adds	r2, r3, #4
 80059b6:	6032      	str	r2, [r6, #0]
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	4630      	mov	r0, r6
 80059be:	f000 f9b4 	bl	8005d2a <memchr>
 80059c2:	b108      	cbz	r0, 80059c8 <_printf_i+0x1e4>
 80059c4:	1b80      	subs	r0, r0, r6
 80059c6:	6060      	str	r0, [r4, #4]
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	2300      	movs	r3, #0
 80059ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059d2:	e7aa      	b.n	800592a <_printf_i+0x146>
 80059d4:	4632      	mov	r2, r6
 80059d6:	4649      	mov	r1, r9
 80059d8:	4640      	mov	r0, r8
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	47d0      	blx	sl
 80059de:	3001      	adds	r0, #1
 80059e0:	d0ad      	beq.n	800593e <_printf_i+0x15a>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	079b      	lsls	r3, r3, #30
 80059e6:	d413      	bmi.n	8005a10 <_printf_i+0x22c>
 80059e8:	68e0      	ldr	r0, [r4, #12]
 80059ea:	9b03      	ldr	r3, [sp, #12]
 80059ec:	4298      	cmp	r0, r3
 80059ee:	bfb8      	it	lt
 80059f0:	4618      	movlt	r0, r3
 80059f2:	e7a6      	b.n	8005942 <_printf_i+0x15e>
 80059f4:	2301      	movs	r3, #1
 80059f6:	4632      	mov	r2, r6
 80059f8:	4649      	mov	r1, r9
 80059fa:	4640      	mov	r0, r8
 80059fc:	47d0      	blx	sl
 80059fe:	3001      	adds	r0, #1
 8005a00:	d09d      	beq.n	800593e <_printf_i+0x15a>
 8005a02:	3501      	adds	r5, #1
 8005a04:	68e3      	ldr	r3, [r4, #12]
 8005a06:	9903      	ldr	r1, [sp, #12]
 8005a08:	1a5b      	subs	r3, r3, r1
 8005a0a:	42ab      	cmp	r3, r5
 8005a0c:	dcf2      	bgt.n	80059f4 <_printf_i+0x210>
 8005a0e:	e7eb      	b.n	80059e8 <_printf_i+0x204>
 8005a10:	2500      	movs	r5, #0
 8005a12:	f104 0619 	add.w	r6, r4, #25
 8005a16:	e7f5      	b.n	8005a04 <_printf_i+0x220>
 8005a18:	08007af0 	.word	0x08007af0
 8005a1c:	08007b01 	.word	0x08007b01

08005a20 <std>:
 8005a20:	2300      	movs	r3, #0
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a2e:	6083      	str	r3, [r0, #8]
 8005a30:	8181      	strh	r1, [r0, #12]
 8005a32:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a34:	81c2      	strh	r2, [r0, #14]
 8005a36:	6183      	str	r3, [r0, #24]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	305c      	adds	r0, #92	@ 0x5c
 8005a3e:	f000 f8f4 	bl	8005c2a <memset>
 8005a42:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <std+0x58>)
 8005a44:	6224      	str	r4, [r4, #32]
 8005a46:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <std+0x5c>)
 8005a4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a80 <std+0x60>)
 8005a4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a50:	4b0c      	ldr	r3, [pc, #48]	@ (8005a84 <std+0x64>)
 8005a52:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a54:	4b0c      	ldr	r3, [pc, #48]	@ (8005a88 <std+0x68>)
 8005a56:	429c      	cmp	r4, r3
 8005a58:	d006      	beq.n	8005a68 <std+0x48>
 8005a5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a5e:	4294      	cmp	r4, r2
 8005a60:	d002      	beq.n	8005a68 <std+0x48>
 8005a62:	33d0      	adds	r3, #208	@ 0xd0
 8005a64:	429c      	cmp	r4, r3
 8005a66:	d105      	bne.n	8005a74 <std+0x54>
 8005a68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a70:	f000 b958 	b.w	8005d24 <__retarget_lock_init_recursive>
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	bf00      	nop
 8005a78:	08005ba5 	.word	0x08005ba5
 8005a7c:	08005bc7 	.word	0x08005bc7
 8005a80:	08005bff 	.word	0x08005bff
 8005a84:	08005c23 	.word	0x08005c23
 8005a88:	20000464 	.word	0x20000464

08005a8c <stdio_exit_handler>:
 8005a8c:	4a02      	ldr	r2, [pc, #8]	@ (8005a98 <stdio_exit_handler+0xc>)
 8005a8e:	4903      	ldr	r1, [pc, #12]	@ (8005a9c <stdio_exit_handler+0x10>)
 8005a90:	4803      	ldr	r0, [pc, #12]	@ (8005aa0 <stdio_exit_handler+0x14>)
 8005a92:	f000 b869 	b.w	8005b68 <_fwalk_sglue>
 8005a96:	bf00      	nop
 8005a98:	2000000c 	.word	0x2000000c
 8005a9c:	080073f1 	.word	0x080073f1
 8005aa0:	2000001c 	.word	0x2000001c

08005aa4 <cleanup_stdio>:
 8005aa4:	6841      	ldr	r1, [r0, #4]
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <cleanup_stdio+0x34>)
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	4604      	mov	r4, r0
 8005aae:	d001      	beq.n	8005ab4 <cleanup_stdio+0x10>
 8005ab0:	f001 fc9e 	bl	80073f0 <_fflush_r>
 8005ab4:	68a1      	ldr	r1, [r4, #8]
 8005ab6:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <cleanup_stdio+0x38>)
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d002      	beq.n	8005ac2 <cleanup_stdio+0x1e>
 8005abc:	4620      	mov	r0, r4
 8005abe:	f001 fc97 	bl	80073f0 <_fflush_r>
 8005ac2:	68e1      	ldr	r1, [r4, #12]
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <cleanup_stdio+0x3c>)
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	d004      	beq.n	8005ad4 <cleanup_stdio+0x30>
 8005aca:	4620      	mov	r0, r4
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	f001 bc8e 	b.w	80073f0 <_fflush_r>
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000464 	.word	0x20000464
 8005adc:	200004cc 	.word	0x200004cc
 8005ae0:	20000534 	.word	0x20000534

08005ae4 <global_stdio_init.part.0>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b14 <global_stdio_init.part.0+0x30>)
 8005ae8:	4c0b      	ldr	r4, [pc, #44]	@ (8005b18 <global_stdio_init.part.0+0x34>)
 8005aea:	4a0c      	ldr	r2, [pc, #48]	@ (8005b1c <global_stdio_init.part.0+0x38>)
 8005aec:	4620      	mov	r0, r4
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	2104      	movs	r1, #4
 8005af2:	2200      	movs	r2, #0
 8005af4:	f7ff ff94 	bl	8005a20 <std>
 8005af8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005afc:	2201      	movs	r2, #1
 8005afe:	2109      	movs	r1, #9
 8005b00:	f7ff ff8e 	bl	8005a20 <std>
 8005b04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b08:	2202      	movs	r2, #2
 8005b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b0e:	2112      	movs	r1, #18
 8005b10:	f7ff bf86 	b.w	8005a20 <std>
 8005b14:	2000059c 	.word	0x2000059c
 8005b18:	20000464 	.word	0x20000464
 8005b1c:	08005a8d 	.word	0x08005a8d

08005b20 <__sfp_lock_acquire>:
 8005b20:	4801      	ldr	r0, [pc, #4]	@ (8005b28 <__sfp_lock_acquire+0x8>)
 8005b22:	f000 b900 	b.w	8005d26 <__retarget_lock_acquire_recursive>
 8005b26:	bf00      	nop
 8005b28:	200005a5 	.word	0x200005a5

08005b2c <__sfp_lock_release>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	@ (8005b34 <__sfp_lock_release+0x8>)
 8005b2e:	f000 b8fb 	b.w	8005d28 <__retarget_lock_release_recursive>
 8005b32:	bf00      	nop
 8005b34:	200005a5 	.word	0x200005a5

08005b38 <__sinit>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	f7ff fff0 	bl	8005b20 <__sfp_lock_acquire>
 8005b40:	6a23      	ldr	r3, [r4, #32]
 8005b42:	b11b      	cbz	r3, 8005b4c <__sinit+0x14>
 8005b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b48:	f7ff bff0 	b.w	8005b2c <__sfp_lock_release>
 8005b4c:	4b04      	ldr	r3, [pc, #16]	@ (8005b60 <__sinit+0x28>)
 8005b4e:	6223      	str	r3, [r4, #32]
 8005b50:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <__sinit+0x2c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f5      	bne.n	8005b44 <__sinit+0xc>
 8005b58:	f7ff ffc4 	bl	8005ae4 <global_stdio_init.part.0>
 8005b5c:	e7f2      	b.n	8005b44 <__sinit+0xc>
 8005b5e:	bf00      	nop
 8005b60:	08005aa5 	.word	0x08005aa5
 8005b64:	2000059c 	.word	0x2000059c

08005b68 <_fwalk_sglue>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	4688      	mov	r8, r1
 8005b70:	4614      	mov	r4, r2
 8005b72:	2600      	movs	r6, #0
 8005b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b78:	f1b9 0901 	subs.w	r9, r9, #1
 8005b7c:	d505      	bpl.n	8005b8a <_fwalk_sglue+0x22>
 8005b7e:	6824      	ldr	r4, [r4, #0]
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	d1f7      	bne.n	8005b74 <_fwalk_sglue+0xc>
 8005b84:	4630      	mov	r0, r6
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d907      	bls.n	8005ba0 <_fwalk_sglue+0x38>
 8005b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b94:	3301      	adds	r3, #1
 8005b96:	d003      	beq.n	8005ba0 <_fwalk_sglue+0x38>
 8005b98:	4629      	mov	r1, r5
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c0      	blx	r8
 8005b9e:	4306      	orrs	r6, r0
 8005ba0:	3568      	adds	r5, #104	@ 0x68
 8005ba2:	e7e9      	b.n	8005b78 <_fwalk_sglue+0x10>

08005ba4 <__sread>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bac:	f000 f86c 	bl	8005c88 <_read_r>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	bfab      	itete	ge
 8005bb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8005bb8:	181b      	addge	r3, r3, r0
 8005bba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bbe:	bfac      	ite	ge
 8005bc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bc2:	81a3      	strhlt	r3, [r4, #12]
 8005bc4:	bd10      	pop	{r4, pc}

08005bc6 <__swrite>:
 8005bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bca:	461f      	mov	r7, r3
 8005bcc:	898b      	ldrh	r3, [r1, #12]
 8005bce:	4605      	mov	r5, r0
 8005bd0:	05db      	lsls	r3, r3, #23
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	4616      	mov	r6, r2
 8005bd6:	d505      	bpl.n	8005be4 <__swrite+0x1e>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	f000 f840 	bl	8005c64 <_lseek_r>
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	4632      	mov	r2, r6
 8005be8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	4628      	mov	r0, r5
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfa:	f000 b857 	b.w	8005cac <_write_r>

08005bfe <__sseek>:
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	460c      	mov	r4, r1
 8005c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c06:	f000 f82d 	bl	8005c64 <_lseek_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	bf15      	itete	ne
 8005c10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c1a:	81a3      	strheq	r3, [r4, #12]
 8005c1c:	bf18      	it	ne
 8005c1e:	81a3      	strhne	r3, [r4, #12]
 8005c20:	bd10      	pop	{r4, pc}

08005c22 <__sclose>:
 8005c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c26:	f000 b80d 	b.w	8005c44 <_close_r>

08005c2a <memset>:
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4402      	add	r2, r0
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d100      	bne.n	8005c34 <memset+0xa>
 8005c32:	4770      	bx	lr
 8005c34:	f803 1b01 	strb.w	r1, [r3], #1
 8005c38:	e7f9      	b.n	8005c2e <memset+0x4>
	...

08005c3c <_localeconv_r>:
 8005c3c:	4800      	ldr	r0, [pc, #0]	@ (8005c40 <_localeconv_r+0x4>)
 8005c3e:	4770      	bx	lr
 8005c40:	20000158 	.word	0x20000158

08005c44 <_close_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	2300      	movs	r3, #0
 8005c48:	4d05      	ldr	r5, [pc, #20]	@ (8005c60 <_close_r+0x1c>)
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	f7fb fad7 	bl	8001202 <_close>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_close_r+0x1a>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_close_r+0x1a>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	200005a0 	.word	0x200005a0

08005c64 <_lseek_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4604      	mov	r4, r0
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4d05      	ldr	r5, [pc, #20]	@ (8005c84 <_lseek_r+0x20>)
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f7fb fae9 	bl	800124a <_lseek>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_lseek_r+0x1e>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_lseek_r+0x1e>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	200005a0 	.word	0x200005a0

08005c88 <_read_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	4611      	mov	r1, r2
 8005c90:	2200      	movs	r2, #0
 8005c92:	4d05      	ldr	r5, [pc, #20]	@ (8005ca8 <_read_r+0x20>)
 8005c94:	602a      	str	r2, [r5, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f7fb fa7a 	bl	8001190 <_read>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_read_r+0x1e>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_read_r+0x1e>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	200005a0 	.word	0x200005a0

08005cac <_write_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4604      	mov	r4, r0
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4d05      	ldr	r5, [pc, #20]	@ (8005ccc <_write_r+0x20>)
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f7fb fa85 	bl	80011ca <_write>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_write_r+0x1e>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_write_r+0x1e>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	200005a0 	.word	0x200005a0

08005cd0 <__errno>:
 8005cd0:	4b01      	ldr	r3, [pc, #4]	@ (8005cd8 <__errno+0x8>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000018 	.word	0x20000018

08005cdc <__libc_init_array>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	2600      	movs	r6, #0
 8005ce0:	4d0c      	ldr	r5, [pc, #48]	@ (8005d14 <__libc_init_array+0x38>)
 8005ce2:	4c0d      	ldr	r4, [pc, #52]	@ (8005d18 <__libc_init_array+0x3c>)
 8005ce4:	1b64      	subs	r4, r4, r5
 8005ce6:	10a4      	asrs	r4, r4, #2
 8005ce8:	42a6      	cmp	r6, r4
 8005cea:	d109      	bne.n	8005d00 <__libc_init_array+0x24>
 8005cec:	f001 fecc 	bl	8007a88 <_init>
 8005cf0:	2600      	movs	r6, #0
 8005cf2:	4d0a      	ldr	r5, [pc, #40]	@ (8005d1c <__libc_init_array+0x40>)
 8005cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8005d20 <__libc_init_array+0x44>)
 8005cf6:	1b64      	subs	r4, r4, r5
 8005cf8:	10a4      	asrs	r4, r4, #2
 8005cfa:	42a6      	cmp	r6, r4
 8005cfc:	d105      	bne.n	8005d0a <__libc_init_array+0x2e>
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d04:	4798      	blx	r3
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7ee      	b.n	8005ce8 <__libc_init_array+0xc>
 8005d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0e:	4798      	blx	r3
 8005d10:	3601      	adds	r6, #1
 8005d12:	e7f2      	b.n	8005cfa <__libc_init_array+0x1e>
 8005d14:	08007e5c 	.word	0x08007e5c
 8005d18:	08007e5c 	.word	0x08007e5c
 8005d1c:	08007e5c 	.word	0x08007e5c
 8005d20:	08007e60 	.word	0x08007e60

08005d24 <__retarget_lock_init_recursive>:
 8005d24:	4770      	bx	lr

08005d26 <__retarget_lock_acquire_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <__retarget_lock_release_recursive>:
 8005d28:	4770      	bx	lr

08005d2a <memchr>:
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	b2c9      	uxtb	r1, r1
 8005d30:	4402      	add	r2, r0
 8005d32:	4293      	cmp	r3, r2
 8005d34:	4618      	mov	r0, r3
 8005d36:	d101      	bne.n	8005d3c <memchr+0x12>
 8005d38:	2000      	movs	r0, #0
 8005d3a:	e003      	b.n	8005d44 <memchr+0x1a>
 8005d3c:	7804      	ldrb	r4, [r0, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	428c      	cmp	r4, r1
 8005d42:	d1f6      	bne.n	8005d32 <memchr+0x8>
 8005d44:	bd10      	pop	{r4, pc}

08005d46 <quorem>:
 8005d46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	6903      	ldr	r3, [r0, #16]
 8005d4c:	690c      	ldr	r4, [r1, #16]
 8005d4e:	4607      	mov	r7, r0
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	db7e      	blt.n	8005e52 <quorem+0x10c>
 8005d54:	3c01      	subs	r4, #1
 8005d56:	00a3      	lsls	r3, r4, #2
 8005d58:	f100 0514 	add.w	r5, r0, #20
 8005d5c:	f101 0814 	add.w	r8, r1, #20
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d70:	3301      	adds	r3, #1
 8005d72:	429a      	cmp	r2, r3
 8005d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d7c:	d32e      	bcc.n	8005ddc <quorem+0x96>
 8005d7e:	f04f 0a00 	mov.w	sl, #0
 8005d82:	46c4      	mov	ip, r8
 8005d84:	46ae      	mov	lr, r5
 8005d86:	46d3      	mov	fp, sl
 8005d88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d8c:	b298      	uxth	r0, r3
 8005d8e:	fb06 a000 	mla	r0, r6, r0, sl
 8005d92:	0c1b      	lsrs	r3, r3, #16
 8005d94:	0c02      	lsrs	r2, r0, #16
 8005d96:	fb06 2303 	mla	r3, r6, r3, r2
 8005d9a:	f8de 2000 	ldr.w	r2, [lr]
 8005d9e:	b280      	uxth	r0, r0
 8005da0:	b292      	uxth	r2, r2
 8005da2:	1a12      	subs	r2, r2, r0
 8005da4:	445a      	add	r2, fp
 8005da6:	f8de 0000 	ldr.w	r0, [lr]
 8005daa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005db4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005db8:	b292      	uxth	r2, r2
 8005dba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005dbe:	45e1      	cmp	r9, ip
 8005dc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005dc4:	f84e 2b04 	str.w	r2, [lr], #4
 8005dc8:	d2de      	bcs.n	8005d88 <quorem+0x42>
 8005dca:	9b00      	ldr	r3, [sp, #0]
 8005dcc:	58eb      	ldr	r3, [r5, r3]
 8005dce:	b92b      	cbnz	r3, 8005ddc <quorem+0x96>
 8005dd0:	9b01      	ldr	r3, [sp, #4]
 8005dd2:	3b04      	subs	r3, #4
 8005dd4:	429d      	cmp	r5, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	d32f      	bcc.n	8005e3a <quorem+0xf4>
 8005dda:	613c      	str	r4, [r7, #16]
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f001 f97f 	bl	80070e0 <__mcmp>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	db25      	blt.n	8005e32 <quorem+0xec>
 8005de6:	4629      	mov	r1, r5
 8005de8:	2000      	movs	r0, #0
 8005dea:	f858 2b04 	ldr.w	r2, [r8], #4
 8005dee:	f8d1 c000 	ldr.w	ip, [r1]
 8005df2:	fa1f fe82 	uxth.w	lr, r2
 8005df6:	fa1f f38c 	uxth.w	r3, ip
 8005dfa:	eba3 030e 	sub.w	r3, r3, lr
 8005dfe:	4403      	add	r3, r0
 8005e00:	0c12      	lsrs	r2, r2, #16
 8005e02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e10:	45c1      	cmp	r9, r8
 8005e12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e16:	f841 3b04 	str.w	r3, [r1], #4
 8005e1a:	d2e6      	bcs.n	8005dea <quorem+0xa4>
 8005e1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e24:	b922      	cbnz	r2, 8005e30 <quorem+0xea>
 8005e26:	3b04      	subs	r3, #4
 8005e28:	429d      	cmp	r5, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	d30b      	bcc.n	8005e46 <quorem+0x100>
 8005e2e:	613c      	str	r4, [r7, #16]
 8005e30:	3601      	adds	r6, #1
 8005e32:	4630      	mov	r0, r6
 8005e34:	b003      	add	sp, #12
 8005e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	3b04      	subs	r3, #4
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	d1cb      	bne.n	8005dda <quorem+0x94>
 8005e42:	3c01      	subs	r4, #1
 8005e44:	e7c6      	b.n	8005dd4 <quorem+0x8e>
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d1ef      	bne.n	8005e2e <quorem+0xe8>
 8005e4e:	3c01      	subs	r4, #1
 8005e50:	e7ea      	b.n	8005e28 <quorem+0xe2>
 8005e52:	2000      	movs	r0, #0
 8005e54:	e7ee      	b.n	8005e34 <quorem+0xee>
	...

08005e58 <_dtoa_r>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	461d      	mov	r5, r3
 8005e60:	69c7      	ldr	r7, [r0, #28]
 8005e62:	b097      	sub	sp, #92	@ 0x5c
 8005e64:	4681      	mov	r9, r0
 8005e66:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005e6a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005e6c:	b97f      	cbnz	r7, 8005e8e <_dtoa_r+0x36>
 8005e6e:	2010      	movs	r0, #16
 8005e70:	f000 fe0e 	bl	8006a90 <malloc>
 8005e74:	4602      	mov	r2, r0
 8005e76:	f8c9 001c 	str.w	r0, [r9, #28]
 8005e7a:	b920      	cbnz	r0, 8005e86 <_dtoa_r+0x2e>
 8005e7c:	21ef      	movs	r1, #239	@ 0xef
 8005e7e:	4bac      	ldr	r3, [pc, #688]	@ (8006130 <_dtoa_r+0x2d8>)
 8005e80:	48ac      	ldr	r0, [pc, #688]	@ (8006134 <_dtoa_r+0x2dc>)
 8005e82:	f001 fafb 	bl	800747c <__assert_func>
 8005e86:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e8a:	6007      	str	r7, [r0, #0]
 8005e8c:	60c7      	str	r7, [r0, #12]
 8005e8e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	b159      	cbz	r1, 8005eae <_dtoa_r+0x56>
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	2301      	movs	r3, #1
 8005e9a:	4093      	lsls	r3, r2
 8005e9c:	604a      	str	r2, [r1, #4]
 8005e9e:	608b      	str	r3, [r1, #8]
 8005ea0:	4648      	mov	r0, r9
 8005ea2:	f000 feeb 	bl	8006c7c <_Bfree>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	1e2b      	subs	r3, r5, #0
 8005eb0:	bfaf      	iteee	ge
 8005eb2:	2300      	movge	r3, #0
 8005eb4:	2201      	movlt	r2, #1
 8005eb6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005eba:	9307      	strlt	r3, [sp, #28]
 8005ebc:	bfa8      	it	ge
 8005ebe:	6033      	strge	r3, [r6, #0]
 8005ec0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8006138 <_dtoa_r+0x2e0>)
 8005ec6:	bfb8      	it	lt
 8005ec8:	6032      	strlt	r2, [r6, #0]
 8005eca:	ea33 0308 	bics.w	r3, r3, r8
 8005ece:	d112      	bne.n	8005ef6 <_dtoa_r+0x9e>
 8005ed0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ed4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005edc:	4323      	orrs	r3, r4
 8005ede:	f000 855e 	beq.w	800699e <_dtoa_r+0xb46>
 8005ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ee4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800613c <_dtoa_r+0x2e4>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8560 	beq.w	80069ae <_dtoa_r+0xb56>
 8005eee:	f10a 0303 	add.w	r3, sl, #3
 8005ef2:	f000 bd5a 	b.w	80069aa <_dtoa_r+0xb52>
 8005ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005efa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f02:	2200      	movs	r2, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	f7fa fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8005f0a:	4607      	mov	r7, r0
 8005f0c:	b158      	cbz	r0, 8005f26 <_dtoa_r+0xce>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f16:	b113      	cbz	r3, 8005f1e <_dtoa_r+0xc6>
 8005f18:	4b89      	ldr	r3, [pc, #548]	@ (8006140 <_dtoa_r+0x2e8>)
 8005f1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006144 <_dtoa_r+0x2ec>
 8005f22:	f000 bd44 	b.w	80069ae <_dtoa_r+0xb56>
 8005f26:	ab14      	add	r3, sp, #80	@ 0x50
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	ab15      	add	r3, sp, #84	@ 0x54
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4648      	mov	r0, r9
 8005f30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005f34:	f001 f984 	bl	8007240 <__d2b>
 8005f38:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005f3c:	9003      	str	r0, [sp, #12]
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	d078      	beq.n	8006034 <_dtoa_r+0x1dc>
 8005f42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f48:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f50:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f54:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f58:	9712      	str	r7, [sp, #72]	@ 0x48
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8006148 <_dtoa_r+0x2f0>)
 8005f60:	f7fa f902 	bl	8000168 <__aeabi_dsub>
 8005f64:	a36c      	add	r3, pc, #432	@ (adr r3, 8006118 <_dtoa_r+0x2c0>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f7fa fab5 	bl	80004d8 <__aeabi_dmul>
 8005f6e:	a36c      	add	r3, pc, #432	@ (adr r3, 8006120 <_dtoa_r+0x2c8>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f7fa f8fa 	bl	800016c <__adddf3>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	460d      	mov	r5, r1
 8005f7e:	f7fa fa41 	bl	8000404 <__aeabi_i2d>
 8005f82:	a369      	add	r3, pc, #420	@ (adr r3, 8006128 <_dtoa_r+0x2d0>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa faa6 	bl	80004d8 <__aeabi_dmul>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4620      	mov	r0, r4
 8005f92:	4629      	mov	r1, r5
 8005f94:	f7fa f8ea 	bl	800016c <__adddf3>
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	f7fa fd4c 	bl	8000a38 <__aeabi_d2iz>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f7fa fd07 	bl	80009bc <__aeabi_dcmplt>
 8005fae:	b140      	cbz	r0, 8005fc2 <_dtoa_r+0x16a>
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	f7fa fa27 	bl	8000404 <__aeabi_i2d>
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	462b      	mov	r3, r5
 8005fba:	f7fa fcf5 	bl	80009a8 <__aeabi_dcmpeq>
 8005fbe:	b900      	cbnz	r0, 8005fc2 <_dtoa_r+0x16a>
 8005fc0:	3f01      	subs	r7, #1
 8005fc2:	2f16      	cmp	r7, #22
 8005fc4:	d854      	bhi.n	8006070 <_dtoa_r+0x218>
 8005fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fca:	4b60      	ldr	r3, [pc, #384]	@ (800614c <_dtoa_r+0x2f4>)
 8005fcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f7fa fcf2 	bl	80009bc <__aeabi_dcmplt>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d04b      	beq.n	8006074 <_dtoa_r+0x21c>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	3f01      	subs	r7, #1
 8005fe0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005fe2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fe4:	1b9b      	subs	r3, r3, r6
 8005fe6:	1e5a      	subs	r2, r3, #1
 8005fe8:	bf49      	itett	mi
 8005fea:	f1c3 0301 	rsbmi	r3, r3, #1
 8005fee:	2300      	movpl	r3, #0
 8005ff0:	9304      	strmi	r3, [sp, #16]
 8005ff2:	2300      	movmi	r3, #0
 8005ff4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ff6:	bf54      	ite	pl
 8005ff8:	9304      	strpl	r3, [sp, #16]
 8005ffa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	db3b      	blt.n	8006078 <_dtoa_r+0x220>
 8006000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006002:	970e      	str	r7, [sp, #56]	@ 0x38
 8006004:	443b      	add	r3, r7
 8006006:	9309      	str	r3, [sp, #36]	@ 0x24
 8006008:	2300      	movs	r3, #0
 800600a:	930a      	str	r3, [sp, #40]	@ 0x28
 800600c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800600e:	2b09      	cmp	r3, #9
 8006010:	d865      	bhi.n	80060de <_dtoa_r+0x286>
 8006012:	2b05      	cmp	r3, #5
 8006014:	bfc4      	itt	gt
 8006016:	3b04      	subgt	r3, #4
 8006018:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800601a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800601c:	bfc8      	it	gt
 800601e:	2400      	movgt	r4, #0
 8006020:	f1a3 0302 	sub.w	r3, r3, #2
 8006024:	bfd8      	it	le
 8006026:	2401      	movle	r4, #1
 8006028:	2b03      	cmp	r3, #3
 800602a:	d864      	bhi.n	80060f6 <_dtoa_r+0x29e>
 800602c:	e8df f003 	tbb	[pc, r3]
 8006030:	2c385553 	.word	0x2c385553
 8006034:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006038:	441e      	add	r6, r3
 800603a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800603e:	2b20      	cmp	r3, #32
 8006040:	bfc1      	itttt	gt
 8006042:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006046:	fa08 f803 	lslgt.w	r8, r8, r3
 800604a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800604e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006052:	bfd6      	itet	le
 8006054:	f1c3 0320 	rsble	r3, r3, #32
 8006058:	ea48 0003 	orrgt.w	r0, r8, r3
 800605c:	fa04 f003 	lslle.w	r0, r4, r3
 8006060:	f7fa f9c0 	bl	80003e4 <__aeabi_ui2d>
 8006064:	2201      	movs	r2, #1
 8006066:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800606a:	3e01      	subs	r6, #1
 800606c:	9212      	str	r2, [sp, #72]	@ 0x48
 800606e:	e774      	b.n	8005f5a <_dtoa_r+0x102>
 8006070:	2301      	movs	r3, #1
 8006072:	e7b5      	b.n	8005fe0 <_dtoa_r+0x188>
 8006074:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006076:	e7b4      	b.n	8005fe2 <_dtoa_r+0x18a>
 8006078:	9b04      	ldr	r3, [sp, #16]
 800607a:	1bdb      	subs	r3, r3, r7
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	427b      	negs	r3, r7
 8006080:	930a      	str	r3, [sp, #40]	@ 0x28
 8006082:	2300      	movs	r3, #0
 8006084:	930e      	str	r3, [sp, #56]	@ 0x38
 8006086:	e7c1      	b.n	800600c <_dtoa_r+0x1b4>
 8006088:	2301      	movs	r3, #1
 800608a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800608c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800608e:	eb07 0b03 	add.w	fp, r7, r3
 8006092:	f10b 0301 	add.w	r3, fp, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	9308      	str	r3, [sp, #32]
 800609a:	bfb8      	it	lt
 800609c:	2301      	movlt	r3, #1
 800609e:	e006      	b.n	80060ae <_dtoa_r+0x256>
 80060a0:	2301      	movs	r3, #1
 80060a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dd28      	ble.n	80060fc <_dtoa_r+0x2a4>
 80060aa:	469b      	mov	fp, r3
 80060ac:	9308      	str	r3, [sp, #32]
 80060ae:	2100      	movs	r1, #0
 80060b0:	2204      	movs	r2, #4
 80060b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80060b6:	f102 0514 	add.w	r5, r2, #20
 80060ba:	429d      	cmp	r5, r3
 80060bc:	d926      	bls.n	800610c <_dtoa_r+0x2b4>
 80060be:	6041      	str	r1, [r0, #4]
 80060c0:	4648      	mov	r0, r9
 80060c2:	f000 fd9b 	bl	8006bfc <_Balloc>
 80060c6:	4682      	mov	sl, r0
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d143      	bne.n	8006154 <_dtoa_r+0x2fc>
 80060cc:	4602      	mov	r2, r0
 80060ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80060d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006150 <_dtoa_r+0x2f8>)
 80060d4:	e6d4      	b.n	8005e80 <_dtoa_r+0x28>
 80060d6:	2300      	movs	r3, #0
 80060d8:	e7e3      	b.n	80060a2 <_dtoa_r+0x24a>
 80060da:	2300      	movs	r3, #0
 80060dc:	e7d5      	b.n	800608a <_dtoa_r+0x232>
 80060de:	2401      	movs	r4, #1
 80060e0:	2300      	movs	r3, #0
 80060e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80060e6:	f04f 3bff 	mov.w	fp, #4294967295
 80060ea:	2200      	movs	r2, #0
 80060ec:	2312      	movs	r3, #18
 80060ee:	f8cd b020 	str.w	fp, [sp, #32]
 80060f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80060f4:	e7db      	b.n	80060ae <_dtoa_r+0x256>
 80060f6:	2301      	movs	r3, #1
 80060f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060fa:	e7f4      	b.n	80060e6 <_dtoa_r+0x28e>
 80060fc:	f04f 0b01 	mov.w	fp, #1
 8006100:	465b      	mov	r3, fp
 8006102:	f8cd b020 	str.w	fp, [sp, #32]
 8006106:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800610a:	e7d0      	b.n	80060ae <_dtoa_r+0x256>
 800610c:	3101      	adds	r1, #1
 800610e:	0052      	lsls	r2, r2, #1
 8006110:	e7d1      	b.n	80060b6 <_dtoa_r+0x25e>
 8006112:	bf00      	nop
 8006114:	f3af 8000 	nop.w
 8006118:	636f4361 	.word	0x636f4361
 800611c:	3fd287a7 	.word	0x3fd287a7
 8006120:	8b60c8b3 	.word	0x8b60c8b3
 8006124:	3fc68a28 	.word	0x3fc68a28
 8006128:	509f79fb 	.word	0x509f79fb
 800612c:	3fd34413 	.word	0x3fd34413
 8006130:	08007b1f 	.word	0x08007b1f
 8006134:	08007b36 	.word	0x08007b36
 8006138:	7ff00000 	.word	0x7ff00000
 800613c:	08007b1b 	.word	0x08007b1b
 8006140:	08007aef 	.word	0x08007aef
 8006144:	08007aee 	.word	0x08007aee
 8006148:	3ff80000 	.word	0x3ff80000
 800614c:	08007c88 	.word	0x08007c88
 8006150:	08007b8e 	.word	0x08007b8e
 8006154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006158:	6018      	str	r0, [r3, #0]
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	2b0e      	cmp	r3, #14
 800615e:	f200 80a1 	bhi.w	80062a4 <_dtoa_r+0x44c>
 8006162:	2c00      	cmp	r4, #0
 8006164:	f000 809e 	beq.w	80062a4 <_dtoa_r+0x44c>
 8006168:	2f00      	cmp	r7, #0
 800616a:	dd33      	ble.n	80061d4 <_dtoa_r+0x37c>
 800616c:	4b9c      	ldr	r3, [pc, #624]	@ (80063e0 <_dtoa_r+0x588>)
 800616e:	f007 020f 	and.w	r2, r7, #15
 8006172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006176:	05f8      	lsls	r0, r7, #23
 8006178:	e9d3 3400 	ldrd	r3, r4, [r3]
 800617c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006180:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006184:	d516      	bpl.n	80061b4 <_dtoa_r+0x35c>
 8006186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800618a:	4b96      	ldr	r3, [pc, #600]	@ (80063e4 <_dtoa_r+0x58c>)
 800618c:	2603      	movs	r6, #3
 800618e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006192:	f7fa facb 	bl	800072c <__aeabi_ddiv>
 8006196:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800619a:	f004 040f 	and.w	r4, r4, #15
 800619e:	4d91      	ldr	r5, [pc, #580]	@ (80063e4 <_dtoa_r+0x58c>)
 80061a0:	b954      	cbnz	r4, 80061b8 <_dtoa_r+0x360>
 80061a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061aa:	f7fa fabf 	bl	800072c <__aeabi_ddiv>
 80061ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061b2:	e028      	b.n	8006206 <_dtoa_r+0x3ae>
 80061b4:	2602      	movs	r6, #2
 80061b6:	e7f2      	b.n	800619e <_dtoa_r+0x346>
 80061b8:	07e1      	lsls	r1, r4, #31
 80061ba:	d508      	bpl.n	80061ce <_dtoa_r+0x376>
 80061bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061c4:	f7fa f988 	bl	80004d8 <__aeabi_dmul>
 80061c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061cc:	3601      	adds	r6, #1
 80061ce:	1064      	asrs	r4, r4, #1
 80061d0:	3508      	adds	r5, #8
 80061d2:	e7e5      	b.n	80061a0 <_dtoa_r+0x348>
 80061d4:	f000 80af 	beq.w	8006336 <_dtoa_r+0x4de>
 80061d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061dc:	427c      	negs	r4, r7
 80061de:	4b80      	ldr	r3, [pc, #512]	@ (80063e0 <_dtoa_r+0x588>)
 80061e0:	f004 020f 	and.w	r2, r4, #15
 80061e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7fa f974 	bl	80004d8 <__aeabi_dmul>
 80061f0:	2602      	movs	r6, #2
 80061f2:	2300      	movs	r3, #0
 80061f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061f8:	4d7a      	ldr	r5, [pc, #488]	@ (80063e4 <_dtoa_r+0x58c>)
 80061fa:	1124      	asrs	r4, r4, #4
 80061fc:	2c00      	cmp	r4, #0
 80061fe:	f040 808f 	bne.w	8006320 <_dtoa_r+0x4c8>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1d3      	bne.n	80061ae <_dtoa_r+0x356>
 8006206:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800620a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8094 	beq.w	800633a <_dtoa_r+0x4e2>
 8006212:	2200      	movs	r2, #0
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	4b73      	ldr	r3, [pc, #460]	@ (80063e8 <_dtoa_r+0x590>)
 800621a:	f7fa fbcf 	bl	80009bc <__aeabi_dcmplt>
 800621e:	2800      	cmp	r0, #0
 8006220:	f000 808b 	beq.w	800633a <_dtoa_r+0x4e2>
 8006224:	9b08      	ldr	r3, [sp, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8087 	beq.w	800633a <_dtoa_r+0x4e2>
 800622c:	f1bb 0f00 	cmp.w	fp, #0
 8006230:	dd34      	ble.n	800629c <_dtoa_r+0x444>
 8006232:	4620      	mov	r0, r4
 8006234:	2200      	movs	r2, #0
 8006236:	4629      	mov	r1, r5
 8006238:	4b6c      	ldr	r3, [pc, #432]	@ (80063ec <_dtoa_r+0x594>)
 800623a:	f7fa f94d 	bl	80004d8 <__aeabi_dmul>
 800623e:	465c      	mov	r4, fp
 8006240:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006244:	f107 38ff 	add.w	r8, r7, #4294967295
 8006248:	3601      	adds	r6, #1
 800624a:	4630      	mov	r0, r6
 800624c:	f7fa f8da 	bl	8000404 <__aeabi_i2d>
 8006250:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006254:	f7fa f940 	bl	80004d8 <__aeabi_dmul>
 8006258:	2200      	movs	r2, #0
 800625a:	4b65      	ldr	r3, [pc, #404]	@ (80063f0 <_dtoa_r+0x598>)
 800625c:	f7f9 ff86 	bl	800016c <__adddf3>
 8006260:	4605      	mov	r5, r0
 8006262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006266:	2c00      	cmp	r4, #0
 8006268:	d16a      	bne.n	8006340 <_dtoa_r+0x4e8>
 800626a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800626e:	2200      	movs	r2, #0
 8006270:	4b60      	ldr	r3, [pc, #384]	@ (80063f4 <_dtoa_r+0x59c>)
 8006272:	f7f9 ff79 	bl	8000168 <__aeabi_dsub>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800627e:	462a      	mov	r2, r5
 8006280:	4633      	mov	r3, r6
 8006282:	f7fa fbb9 	bl	80009f8 <__aeabi_dcmpgt>
 8006286:	2800      	cmp	r0, #0
 8006288:	f040 8298 	bne.w	80067bc <_dtoa_r+0x964>
 800628c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006290:	462a      	mov	r2, r5
 8006292:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006296:	f7fa fb91 	bl	80009bc <__aeabi_dcmplt>
 800629a:	bb38      	cbnz	r0, 80062ec <_dtoa_r+0x494>
 800629c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80062a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f2c0 8157 	blt.w	800655a <_dtoa_r+0x702>
 80062ac:	2f0e      	cmp	r7, #14
 80062ae:	f300 8154 	bgt.w	800655a <_dtoa_r+0x702>
 80062b2:	4b4b      	ldr	r3, [pc, #300]	@ (80063e0 <_dtoa_r+0x588>)
 80062b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f280 80e5 	bge.w	8006492 <_dtoa_r+0x63a>
 80062c8:	9b08      	ldr	r3, [sp, #32]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f300 80e1 	bgt.w	8006492 <_dtoa_r+0x63a>
 80062d0:	d10c      	bne.n	80062ec <_dtoa_r+0x494>
 80062d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062d6:	2200      	movs	r2, #0
 80062d8:	4b46      	ldr	r3, [pc, #280]	@ (80063f4 <_dtoa_r+0x59c>)
 80062da:	f7fa f8fd 	bl	80004d8 <__aeabi_dmul>
 80062de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062e2:	f7fa fb7f 	bl	80009e4 <__aeabi_dcmpge>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	f000 8266 	beq.w	80067b8 <_dtoa_r+0x960>
 80062ec:	2400      	movs	r4, #0
 80062ee:	4625      	mov	r5, r4
 80062f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062f2:	4656      	mov	r6, sl
 80062f4:	ea6f 0803 	mvn.w	r8, r3
 80062f8:	2700      	movs	r7, #0
 80062fa:	4621      	mov	r1, r4
 80062fc:	4648      	mov	r0, r9
 80062fe:	f000 fcbd 	bl	8006c7c <_Bfree>
 8006302:	2d00      	cmp	r5, #0
 8006304:	f000 80bd 	beq.w	8006482 <_dtoa_r+0x62a>
 8006308:	b12f      	cbz	r7, 8006316 <_dtoa_r+0x4be>
 800630a:	42af      	cmp	r7, r5
 800630c:	d003      	beq.n	8006316 <_dtoa_r+0x4be>
 800630e:	4639      	mov	r1, r7
 8006310:	4648      	mov	r0, r9
 8006312:	f000 fcb3 	bl	8006c7c <_Bfree>
 8006316:	4629      	mov	r1, r5
 8006318:	4648      	mov	r0, r9
 800631a:	f000 fcaf 	bl	8006c7c <_Bfree>
 800631e:	e0b0      	b.n	8006482 <_dtoa_r+0x62a>
 8006320:	07e2      	lsls	r2, r4, #31
 8006322:	d505      	bpl.n	8006330 <_dtoa_r+0x4d8>
 8006324:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006328:	f7fa f8d6 	bl	80004d8 <__aeabi_dmul>
 800632c:	2301      	movs	r3, #1
 800632e:	3601      	adds	r6, #1
 8006330:	1064      	asrs	r4, r4, #1
 8006332:	3508      	adds	r5, #8
 8006334:	e762      	b.n	80061fc <_dtoa_r+0x3a4>
 8006336:	2602      	movs	r6, #2
 8006338:	e765      	b.n	8006206 <_dtoa_r+0x3ae>
 800633a:	46b8      	mov	r8, r7
 800633c:	9c08      	ldr	r4, [sp, #32]
 800633e:	e784      	b.n	800624a <_dtoa_r+0x3f2>
 8006340:	4b27      	ldr	r3, [pc, #156]	@ (80063e0 <_dtoa_r+0x588>)
 8006342:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800634c:	4454      	add	r4, sl
 800634e:	2900      	cmp	r1, #0
 8006350:	d054      	beq.n	80063fc <_dtoa_r+0x5a4>
 8006352:	2000      	movs	r0, #0
 8006354:	4928      	ldr	r1, [pc, #160]	@ (80063f8 <_dtoa_r+0x5a0>)
 8006356:	f7fa f9e9 	bl	800072c <__aeabi_ddiv>
 800635a:	4633      	mov	r3, r6
 800635c:	462a      	mov	r2, r5
 800635e:	f7f9 ff03 	bl	8000168 <__aeabi_dsub>
 8006362:	4656      	mov	r6, sl
 8006364:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800636c:	f7fa fb64 	bl	8000a38 <__aeabi_d2iz>
 8006370:	4605      	mov	r5, r0
 8006372:	f7fa f847 	bl	8000404 <__aeabi_i2d>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800637e:	f7f9 fef3 	bl	8000168 <__aeabi_dsub>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	3530      	adds	r5, #48	@ 0x30
 8006388:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800638c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006390:	f806 5b01 	strb.w	r5, [r6], #1
 8006394:	f7fa fb12 	bl	80009bc <__aeabi_dcmplt>
 8006398:	2800      	cmp	r0, #0
 800639a:	d172      	bne.n	8006482 <_dtoa_r+0x62a>
 800639c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063a0:	2000      	movs	r0, #0
 80063a2:	4911      	ldr	r1, [pc, #68]	@ (80063e8 <_dtoa_r+0x590>)
 80063a4:	f7f9 fee0 	bl	8000168 <__aeabi_dsub>
 80063a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063ac:	f7fa fb06 	bl	80009bc <__aeabi_dcmplt>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f040 80b4 	bne.w	800651e <_dtoa_r+0x6c6>
 80063b6:	42a6      	cmp	r6, r4
 80063b8:	f43f af70 	beq.w	800629c <_dtoa_r+0x444>
 80063bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063c0:	2200      	movs	r2, #0
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <_dtoa_r+0x594>)
 80063c4:	f7fa f888 	bl	80004d8 <__aeabi_dmul>
 80063c8:	2200      	movs	r2, #0
 80063ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d2:	4b06      	ldr	r3, [pc, #24]	@ (80063ec <_dtoa_r+0x594>)
 80063d4:	f7fa f880 	bl	80004d8 <__aeabi_dmul>
 80063d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063dc:	e7c4      	b.n	8006368 <_dtoa_r+0x510>
 80063de:	bf00      	nop
 80063e0:	08007c88 	.word	0x08007c88
 80063e4:	08007c60 	.word	0x08007c60
 80063e8:	3ff00000 	.word	0x3ff00000
 80063ec:	40240000 	.word	0x40240000
 80063f0:	401c0000 	.word	0x401c0000
 80063f4:	40140000 	.word	0x40140000
 80063f8:	3fe00000 	.word	0x3fe00000
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	f7fa f86a 	bl	80004d8 <__aeabi_dmul>
 8006404:	4656      	mov	r6, sl
 8006406:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800640a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800640c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006410:	f7fa fb12 	bl	8000a38 <__aeabi_d2iz>
 8006414:	4605      	mov	r5, r0
 8006416:	f7f9 fff5 	bl	8000404 <__aeabi_i2d>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006422:	f7f9 fea1 	bl	8000168 <__aeabi_dsub>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	3530      	adds	r5, #48	@ 0x30
 800642c:	f806 5b01 	strb.w	r5, [r6], #1
 8006430:	42a6      	cmp	r6, r4
 8006432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	d124      	bne.n	8006486 <_dtoa_r+0x62e>
 800643c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006440:	4bae      	ldr	r3, [pc, #696]	@ (80066fc <_dtoa_r+0x8a4>)
 8006442:	f7f9 fe93 	bl	800016c <__adddf3>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800644e:	f7fa fad3 	bl	80009f8 <__aeabi_dcmpgt>
 8006452:	2800      	cmp	r0, #0
 8006454:	d163      	bne.n	800651e <_dtoa_r+0x6c6>
 8006456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800645a:	2000      	movs	r0, #0
 800645c:	49a7      	ldr	r1, [pc, #668]	@ (80066fc <_dtoa_r+0x8a4>)
 800645e:	f7f9 fe83 	bl	8000168 <__aeabi_dsub>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800646a:	f7fa faa7 	bl	80009bc <__aeabi_dcmplt>
 800646e:	2800      	cmp	r0, #0
 8006470:	f43f af14 	beq.w	800629c <_dtoa_r+0x444>
 8006474:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006476:	1e73      	subs	r3, r6, #1
 8006478:	9313      	str	r3, [sp, #76]	@ 0x4c
 800647a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800647e:	2b30      	cmp	r3, #48	@ 0x30
 8006480:	d0f8      	beq.n	8006474 <_dtoa_r+0x61c>
 8006482:	4647      	mov	r7, r8
 8006484:	e03b      	b.n	80064fe <_dtoa_r+0x6a6>
 8006486:	4b9e      	ldr	r3, [pc, #632]	@ (8006700 <_dtoa_r+0x8a8>)
 8006488:	f7fa f826 	bl	80004d8 <__aeabi_dmul>
 800648c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006490:	e7bc      	b.n	800640c <_dtoa_r+0x5b4>
 8006492:	4656      	mov	r6, sl
 8006494:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	f7fa f944 	bl	800072c <__aeabi_ddiv>
 80064a4:	f7fa fac8 	bl	8000a38 <__aeabi_d2iz>
 80064a8:	4680      	mov	r8, r0
 80064aa:	f7f9 ffab 	bl	8000404 <__aeabi_i2d>
 80064ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064b2:	f7fa f811 	bl	80004d8 <__aeabi_dmul>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4620      	mov	r0, r4
 80064bc:	4629      	mov	r1, r5
 80064be:	f7f9 fe53 	bl	8000168 <__aeabi_dsub>
 80064c2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80064c6:	9d08      	ldr	r5, [sp, #32]
 80064c8:	f806 4b01 	strb.w	r4, [r6], #1
 80064cc:	eba6 040a 	sub.w	r4, r6, sl
 80064d0:	42a5      	cmp	r5, r4
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	d133      	bne.n	8006540 <_dtoa_r+0x6e8>
 80064d8:	f7f9 fe48 	bl	800016c <__adddf3>
 80064dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064e0:	4604      	mov	r4, r0
 80064e2:	460d      	mov	r5, r1
 80064e4:	f7fa fa88 	bl	80009f8 <__aeabi_dcmpgt>
 80064e8:	b9c0      	cbnz	r0, 800651c <_dtoa_r+0x6c4>
 80064ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7fa fa59 	bl	80009a8 <__aeabi_dcmpeq>
 80064f6:	b110      	cbz	r0, 80064fe <_dtoa_r+0x6a6>
 80064f8:	f018 0f01 	tst.w	r8, #1
 80064fc:	d10e      	bne.n	800651c <_dtoa_r+0x6c4>
 80064fe:	4648      	mov	r0, r9
 8006500:	9903      	ldr	r1, [sp, #12]
 8006502:	f000 fbbb 	bl	8006c7c <_Bfree>
 8006506:	2300      	movs	r3, #0
 8006508:	7033      	strb	r3, [r6, #0]
 800650a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800650c:	3701      	adds	r7, #1
 800650e:	601f      	str	r7, [r3, #0]
 8006510:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 824b 	beq.w	80069ae <_dtoa_r+0xb56>
 8006518:	601e      	str	r6, [r3, #0]
 800651a:	e248      	b.n	80069ae <_dtoa_r+0xb56>
 800651c:	46b8      	mov	r8, r7
 800651e:	4633      	mov	r3, r6
 8006520:	461e      	mov	r6, r3
 8006522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006526:	2a39      	cmp	r2, #57	@ 0x39
 8006528:	d106      	bne.n	8006538 <_dtoa_r+0x6e0>
 800652a:	459a      	cmp	sl, r3
 800652c:	d1f8      	bne.n	8006520 <_dtoa_r+0x6c8>
 800652e:	2230      	movs	r2, #48	@ 0x30
 8006530:	f108 0801 	add.w	r8, r8, #1
 8006534:	f88a 2000 	strb.w	r2, [sl]
 8006538:	781a      	ldrb	r2, [r3, #0]
 800653a:	3201      	adds	r2, #1
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	e7a0      	b.n	8006482 <_dtoa_r+0x62a>
 8006540:	2200      	movs	r2, #0
 8006542:	4b6f      	ldr	r3, [pc, #444]	@ (8006700 <_dtoa_r+0x8a8>)
 8006544:	f7f9 ffc8 	bl	80004d8 <__aeabi_dmul>
 8006548:	2200      	movs	r2, #0
 800654a:	2300      	movs	r3, #0
 800654c:	4604      	mov	r4, r0
 800654e:	460d      	mov	r5, r1
 8006550:	f7fa fa2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006554:	2800      	cmp	r0, #0
 8006556:	d09f      	beq.n	8006498 <_dtoa_r+0x640>
 8006558:	e7d1      	b.n	80064fe <_dtoa_r+0x6a6>
 800655a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800655c:	2a00      	cmp	r2, #0
 800655e:	f000 80ea 	beq.w	8006736 <_dtoa_r+0x8de>
 8006562:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006564:	2a01      	cmp	r2, #1
 8006566:	f300 80cd 	bgt.w	8006704 <_dtoa_r+0x8ac>
 800656a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800656c:	2a00      	cmp	r2, #0
 800656e:	f000 80c1 	beq.w	80066f4 <_dtoa_r+0x89c>
 8006572:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006576:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006578:	9e04      	ldr	r6, [sp, #16]
 800657a:	9a04      	ldr	r2, [sp, #16]
 800657c:	2101      	movs	r1, #1
 800657e:	441a      	add	r2, r3
 8006580:	9204      	str	r2, [sp, #16]
 8006582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006584:	4648      	mov	r0, r9
 8006586:	441a      	add	r2, r3
 8006588:	9209      	str	r2, [sp, #36]	@ 0x24
 800658a:	f000 fc2b 	bl	8006de4 <__i2b>
 800658e:	4605      	mov	r5, r0
 8006590:	b166      	cbz	r6, 80065ac <_dtoa_r+0x754>
 8006592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	dd09      	ble.n	80065ac <_dtoa_r+0x754>
 8006598:	42b3      	cmp	r3, r6
 800659a:	bfa8      	it	ge
 800659c:	4633      	movge	r3, r6
 800659e:	9a04      	ldr	r2, [sp, #16]
 80065a0:	1af6      	subs	r6, r6, r3
 80065a2:	1ad2      	subs	r2, r2, r3
 80065a4:	9204      	str	r2, [sp, #16]
 80065a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ae:	b30b      	cbz	r3, 80065f4 <_dtoa_r+0x79c>
 80065b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80c6 	beq.w	8006744 <_dtoa_r+0x8ec>
 80065b8:	2c00      	cmp	r4, #0
 80065ba:	f000 80c0 	beq.w	800673e <_dtoa_r+0x8e6>
 80065be:	4629      	mov	r1, r5
 80065c0:	4622      	mov	r2, r4
 80065c2:	4648      	mov	r0, r9
 80065c4:	f000 fcc6 	bl	8006f54 <__pow5mult>
 80065c8:	9a03      	ldr	r2, [sp, #12]
 80065ca:	4601      	mov	r1, r0
 80065cc:	4605      	mov	r5, r0
 80065ce:	4648      	mov	r0, r9
 80065d0:	f000 fc1e 	bl	8006e10 <__multiply>
 80065d4:	9903      	ldr	r1, [sp, #12]
 80065d6:	4680      	mov	r8, r0
 80065d8:	4648      	mov	r0, r9
 80065da:	f000 fb4f 	bl	8006c7c <_Bfree>
 80065de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065e0:	1b1b      	subs	r3, r3, r4
 80065e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065e4:	f000 80b1 	beq.w	800674a <_dtoa_r+0x8f2>
 80065e8:	4641      	mov	r1, r8
 80065ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065ec:	4648      	mov	r0, r9
 80065ee:	f000 fcb1 	bl	8006f54 <__pow5mult>
 80065f2:	9003      	str	r0, [sp, #12]
 80065f4:	2101      	movs	r1, #1
 80065f6:	4648      	mov	r0, r9
 80065f8:	f000 fbf4 	bl	8006de4 <__i2b>
 80065fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fe:	4604      	mov	r4, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 81d8 	beq.w	80069b6 <_dtoa_r+0xb5e>
 8006606:	461a      	mov	r2, r3
 8006608:	4601      	mov	r1, r0
 800660a:	4648      	mov	r0, r9
 800660c:	f000 fca2 	bl	8006f54 <__pow5mult>
 8006610:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006612:	4604      	mov	r4, r0
 8006614:	2b01      	cmp	r3, #1
 8006616:	f300 809f 	bgt.w	8006758 <_dtoa_r+0x900>
 800661a:	9b06      	ldr	r3, [sp, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 8097 	bne.w	8006750 <_dtoa_r+0x8f8>
 8006622:	9b07      	ldr	r3, [sp, #28]
 8006624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 8093 	bne.w	8006754 <_dtoa_r+0x8fc>
 800662e:	9b07      	ldr	r3, [sp, #28]
 8006630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006634:	0d1b      	lsrs	r3, r3, #20
 8006636:	051b      	lsls	r3, r3, #20
 8006638:	b133      	cbz	r3, 8006648 <_dtoa_r+0x7f0>
 800663a:	9b04      	ldr	r3, [sp, #16]
 800663c:	3301      	adds	r3, #1
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006642:	3301      	adds	r3, #1
 8006644:	9309      	str	r3, [sp, #36]	@ 0x24
 8006646:	2301      	movs	r3, #1
 8006648:	930a      	str	r3, [sp, #40]	@ 0x28
 800664a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 81b8 	beq.w	80069c2 <_dtoa_r+0xb6a>
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006658:	6918      	ldr	r0, [r3, #16]
 800665a:	f000 fb77 	bl	8006d4c <__hi0bits>
 800665e:	f1c0 0020 	rsb	r0, r0, #32
 8006662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006664:	4418      	add	r0, r3
 8006666:	f010 001f 	ands.w	r0, r0, #31
 800666a:	f000 8082 	beq.w	8006772 <_dtoa_r+0x91a>
 800666e:	f1c0 0320 	rsb	r3, r0, #32
 8006672:	2b04      	cmp	r3, #4
 8006674:	dd73      	ble.n	800675e <_dtoa_r+0x906>
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	f1c0 001c 	rsb	r0, r0, #28
 800667c:	4403      	add	r3, r0
 800667e:	9304      	str	r3, [sp, #16]
 8006680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006682:	4406      	add	r6, r0
 8006684:	4403      	add	r3, r0
 8006686:	9309      	str	r3, [sp, #36]	@ 0x24
 8006688:	9b04      	ldr	r3, [sp, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	dd05      	ble.n	800669a <_dtoa_r+0x842>
 800668e:	461a      	mov	r2, r3
 8006690:	4648      	mov	r0, r9
 8006692:	9903      	ldr	r1, [sp, #12]
 8006694:	f000 fcb8 	bl	8007008 <__lshift>
 8006698:	9003      	str	r0, [sp, #12]
 800669a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	dd05      	ble.n	80066ac <_dtoa_r+0x854>
 80066a0:	4621      	mov	r1, r4
 80066a2:	461a      	mov	r2, r3
 80066a4:	4648      	mov	r0, r9
 80066a6:	f000 fcaf 	bl	8007008 <__lshift>
 80066aa:	4604      	mov	r4, r0
 80066ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d061      	beq.n	8006776 <_dtoa_r+0x91e>
 80066b2:	4621      	mov	r1, r4
 80066b4:	9803      	ldr	r0, [sp, #12]
 80066b6:	f000 fd13 	bl	80070e0 <__mcmp>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	da5b      	bge.n	8006776 <_dtoa_r+0x91e>
 80066be:	2300      	movs	r3, #0
 80066c0:	220a      	movs	r2, #10
 80066c2:	4648      	mov	r0, r9
 80066c4:	9903      	ldr	r1, [sp, #12]
 80066c6:	f000 fafb 	bl	8006cc0 <__multadd>
 80066ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066cc:	f107 38ff 	add.w	r8, r7, #4294967295
 80066d0:	9003      	str	r0, [sp, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8177 	beq.w	80069c6 <_dtoa_r+0xb6e>
 80066d8:	4629      	mov	r1, r5
 80066da:	2300      	movs	r3, #0
 80066dc:	220a      	movs	r2, #10
 80066de:	4648      	mov	r0, r9
 80066e0:	f000 faee 	bl	8006cc0 <__multadd>
 80066e4:	f1bb 0f00 	cmp.w	fp, #0
 80066e8:	4605      	mov	r5, r0
 80066ea:	dc6f      	bgt.n	80067cc <_dtoa_r+0x974>
 80066ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	dc49      	bgt.n	8006786 <_dtoa_r+0x92e>
 80066f2:	e06b      	b.n	80067cc <_dtoa_r+0x974>
 80066f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066fa:	e73c      	b.n	8006576 <_dtoa_r+0x71e>
 80066fc:	3fe00000 	.word	0x3fe00000
 8006700:	40240000 	.word	0x40240000
 8006704:	9b08      	ldr	r3, [sp, #32]
 8006706:	1e5c      	subs	r4, r3, #1
 8006708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800670a:	42a3      	cmp	r3, r4
 800670c:	db09      	blt.n	8006722 <_dtoa_r+0x8ca>
 800670e:	1b1c      	subs	r4, r3, r4
 8006710:	9b08      	ldr	r3, [sp, #32]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f6bf af30 	bge.w	8006578 <_dtoa_r+0x720>
 8006718:	9b04      	ldr	r3, [sp, #16]
 800671a:	9a08      	ldr	r2, [sp, #32]
 800671c:	1a9e      	subs	r6, r3, r2
 800671e:	2300      	movs	r3, #0
 8006720:	e72b      	b.n	800657a <_dtoa_r+0x722>
 8006722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006724:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006726:	1ae3      	subs	r3, r4, r3
 8006728:	441a      	add	r2, r3
 800672a:	940a      	str	r4, [sp, #40]	@ 0x28
 800672c:	9e04      	ldr	r6, [sp, #16]
 800672e:	2400      	movs	r4, #0
 8006730:	9b08      	ldr	r3, [sp, #32]
 8006732:	920e      	str	r2, [sp, #56]	@ 0x38
 8006734:	e721      	b.n	800657a <_dtoa_r+0x722>
 8006736:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006738:	9e04      	ldr	r6, [sp, #16]
 800673a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800673c:	e728      	b.n	8006590 <_dtoa_r+0x738>
 800673e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006742:	e751      	b.n	80065e8 <_dtoa_r+0x790>
 8006744:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006746:	9903      	ldr	r1, [sp, #12]
 8006748:	e750      	b.n	80065ec <_dtoa_r+0x794>
 800674a:	f8cd 800c 	str.w	r8, [sp, #12]
 800674e:	e751      	b.n	80065f4 <_dtoa_r+0x79c>
 8006750:	2300      	movs	r3, #0
 8006752:	e779      	b.n	8006648 <_dtoa_r+0x7f0>
 8006754:	9b06      	ldr	r3, [sp, #24]
 8006756:	e777      	b.n	8006648 <_dtoa_r+0x7f0>
 8006758:	2300      	movs	r3, #0
 800675a:	930a      	str	r3, [sp, #40]	@ 0x28
 800675c:	e779      	b.n	8006652 <_dtoa_r+0x7fa>
 800675e:	d093      	beq.n	8006688 <_dtoa_r+0x830>
 8006760:	9a04      	ldr	r2, [sp, #16]
 8006762:	331c      	adds	r3, #28
 8006764:	441a      	add	r2, r3
 8006766:	9204      	str	r2, [sp, #16]
 8006768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800676a:	441e      	add	r6, r3
 800676c:	441a      	add	r2, r3
 800676e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006770:	e78a      	b.n	8006688 <_dtoa_r+0x830>
 8006772:	4603      	mov	r3, r0
 8006774:	e7f4      	b.n	8006760 <_dtoa_r+0x908>
 8006776:	9b08      	ldr	r3, [sp, #32]
 8006778:	46b8      	mov	r8, r7
 800677a:	2b00      	cmp	r3, #0
 800677c:	dc20      	bgt.n	80067c0 <_dtoa_r+0x968>
 800677e:	469b      	mov	fp, r3
 8006780:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006782:	2b02      	cmp	r3, #2
 8006784:	dd1e      	ble.n	80067c4 <_dtoa_r+0x96c>
 8006786:	f1bb 0f00 	cmp.w	fp, #0
 800678a:	f47f adb1 	bne.w	80062f0 <_dtoa_r+0x498>
 800678e:	4621      	mov	r1, r4
 8006790:	465b      	mov	r3, fp
 8006792:	2205      	movs	r2, #5
 8006794:	4648      	mov	r0, r9
 8006796:	f000 fa93 	bl	8006cc0 <__multadd>
 800679a:	4601      	mov	r1, r0
 800679c:	4604      	mov	r4, r0
 800679e:	9803      	ldr	r0, [sp, #12]
 80067a0:	f000 fc9e 	bl	80070e0 <__mcmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	f77f ada3 	ble.w	80062f0 <_dtoa_r+0x498>
 80067aa:	4656      	mov	r6, sl
 80067ac:	2331      	movs	r3, #49	@ 0x31
 80067ae:	f108 0801 	add.w	r8, r8, #1
 80067b2:	f806 3b01 	strb.w	r3, [r6], #1
 80067b6:	e59f      	b.n	80062f8 <_dtoa_r+0x4a0>
 80067b8:	46b8      	mov	r8, r7
 80067ba:	9c08      	ldr	r4, [sp, #32]
 80067bc:	4625      	mov	r5, r4
 80067be:	e7f4      	b.n	80067aa <_dtoa_r+0x952>
 80067c0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80067c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8101 	beq.w	80069ce <_dtoa_r+0xb76>
 80067cc:	2e00      	cmp	r6, #0
 80067ce:	dd05      	ble.n	80067dc <_dtoa_r+0x984>
 80067d0:	4629      	mov	r1, r5
 80067d2:	4632      	mov	r2, r6
 80067d4:	4648      	mov	r0, r9
 80067d6:	f000 fc17 	bl	8007008 <__lshift>
 80067da:	4605      	mov	r5, r0
 80067dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d05c      	beq.n	800689c <_dtoa_r+0xa44>
 80067e2:	4648      	mov	r0, r9
 80067e4:	6869      	ldr	r1, [r5, #4]
 80067e6:	f000 fa09 	bl	8006bfc <_Balloc>
 80067ea:	4606      	mov	r6, r0
 80067ec:	b928      	cbnz	r0, 80067fa <_dtoa_r+0x9a2>
 80067ee:	4602      	mov	r2, r0
 80067f0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067f4:	4b80      	ldr	r3, [pc, #512]	@ (80069f8 <_dtoa_r+0xba0>)
 80067f6:	f7ff bb43 	b.w	8005e80 <_dtoa_r+0x28>
 80067fa:	692a      	ldr	r2, [r5, #16]
 80067fc:	f105 010c 	add.w	r1, r5, #12
 8006800:	3202      	adds	r2, #2
 8006802:	0092      	lsls	r2, r2, #2
 8006804:	300c      	adds	r0, #12
 8006806:	f000 fe2b 	bl	8007460 <memcpy>
 800680a:	2201      	movs	r2, #1
 800680c:	4631      	mov	r1, r6
 800680e:	4648      	mov	r0, r9
 8006810:	f000 fbfa 	bl	8007008 <__lshift>
 8006814:	462f      	mov	r7, r5
 8006816:	4605      	mov	r5, r0
 8006818:	f10a 0301 	add.w	r3, sl, #1
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	eb0a 030b 	add.w	r3, sl, fp
 8006822:	930a      	str	r3, [sp, #40]	@ 0x28
 8006824:	9b06      	ldr	r3, [sp, #24]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	9309      	str	r3, [sp, #36]	@ 0x24
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	4621      	mov	r1, r4
 8006830:	9803      	ldr	r0, [sp, #12]
 8006832:	f103 3bff 	add.w	fp, r3, #4294967295
 8006836:	f7ff fa86 	bl	8005d46 <quorem>
 800683a:	4603      	mov	r3, r0
 800683c:	4639      	mov	r1, r7
 800683e:	3330      	adds	r3, #48	@ 0x30
 8006840:	9006      	str	r0, [sp, #24]
 8006842:	9803      	ldr	r0, [sp, #12]
 8006844:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006846:	f000 fc4b 	bl	80070e0 <__mcmp>
 800684a:	462a      	mov	r2, r5
 800684c:	9008      	str	r0, [sp, #32]
 800684e:	4621      	mov	r1, r4
 8006850:	4648      	mov	r0, r9
 8006852:	f000 fc61 	bl	8007118 <__mdiff>
 8006856:	68c2      	ldr	r2, [r0, #12]
 8006858:	4606      	mov	r6, r0
 800685a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800685c:	bb02      	cbnz	r2, 80068a0 <_dtoa_r+0xa48>
 800685e:	4601      	mov	r1, r0
 8006860:	9803      	ldr	r0, [sp, #12]
 8006862:	f000 fc3d 	bl	80070e0 <__mcmp>
 8006866:	4602      	mov	r2, r0
 8006868:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800686a:	4631      	mov	r1, r6
 800686c:	4648      	mov	r0, r9
 800686e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006872:	f000 fa03 	bl	8006c7c <_Bfree>
 8006876:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800687a:	9e04      	ldr	r6, [sp, #16]
 800687c:	ea42 0103 	orr.w	r1, r2, r3
 8006880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006882:	4319      	orrs	r1, r3
 8006884:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006886:	d10d      	bne.n	80068a4 <_dtoa_r+0xa4c>
 8006888:	2b39      	cmp	r3, #57	@ 0x39
 800688a:	d027      	beq.n	80068dc <_dtoa_r+0xa84>
 800688c:	9a08      	ldr	r2, [sp, #32]
 800688e:	2a00      	cmp	r2, #0
 8006890:	dd01      	ble.n	8006896 <_dtoa_r+0xa3e>
 8006892:	9b06      	ldr	r3, [sp, #24]
 8006894:	3331      	adds	r3, #49	@ 0x31
 8006896:	f88b 3000 	strb.w	r3, [fp]
 800689a:	e52e      	b.n	80062fa <_dtoa_r+0x4a2>
 800689c:	4628      	mov	r0, r5
 800689e:	e7b9      	b.n	8006814 <_dtoa_r+0x9bc>
 80068a0:	2201      	movs	r2, #1
 80068a2:	e7e2      	b.n	800686a <_dtoa_r+0xa12>
 80068a4:	9908      	ldr	r1, [sp, #32]
 80068a6:	2900      	cmp	r1, #0
 80068a8:	db04      	blt.n	80068b4 <_dtoa_r+0xa5c>
 80068aa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80068ac:	4301      	orrs	r1, r0
 80068ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068b0:	4301      	orrs	r1, r0
 80068b2:	d120      	bne.n	80068f6 <_dtoa_r+0xa9e>
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	ddee      	ble.n	8006896 <_dtoa_r+0xa3e>
 80068b8:	2201      	movs	r2, #1
 80068ba:	9903      	ldr	r1, [sp, #12]
 80068bc:	4648      	mov	r0, r9
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	f000 fba2 	bl	8007008 <__lshift>
 80068c4:	4621      	mov	r1, r4
 80068c6:	9003      	str	r0, [sp, #12]
 80068c8:	f000 fc0a 	bl	80070e0 <__mcmp>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	dc02      	bgt.n	80068d8 <_dtoa_r+0xa80>
 80068d2:	d1e0      	bne.n	8006896 <_dtoa_r+0xa3e>
 80068d4:	07da      	lsls	r2, r3, #31
 80068d6:	d5de      	bpl.n	8006896 <_dtoa_r+0xa3e>
 80068d8:	2b39      	cmp	r3, #57	@ 0x39
 80068da:	d1da      	bne.n	8006892 <_dtoa_r+0xa3a>
 80068dc:	2339      	movs	r3, #57	@ 0x39
 80068de:	f88b 3000 	strb.w	r3, [fp]
 80068e2:	4633      	mov	r3, r6
 80068e4:	461e      	mov	r6, r3
 80068e6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	2a39      	cmp	r2, #57	@ 0x39
 80068ee:	d04e      	beq.n	800698e <_dtoa_r+0xb36>
 80068f0:	3201      	adds	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e501      	b.n	80062fa <_dtoa_r+0x4a2>
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	dd03      	ble.n	8006902 <_dtoa_r+0xaaa>
 80068fa:	2b39      	cmp	r3, #57	@ 0x39
 80068fc:	d0ee      	beq.n	80068dc <_dtoa_r+0xa84>
 80068fe:	3301      	adds	r3, #1
 8006900:	e7c9      	b.n	8006896 <_dtoa_r+0xa3e>
 8006902:	9a04      	ldr	r2, [sp, #16]
 8006904:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006906:	f802 3c01 	strb.w	r3, [r2, #-1]
 800690a:	428a      	cmp	r2, r1
 800690c:	d028      	beq.n	8006960 <_dtoa_r+0xb08>
 800690e:	2300      	movs	r3, #0
 8006910:	220a      	movs	r2, #10
 8006912:	9903      	ldr	r1, [sp, #12]
 8006914:	4648      	mov	r0, r9
 8006916:	f000 f9d3 	bl	8006cc0 <__multadd>
 800691a:	42af      	cmp	r7, r5
 800691c:	9003      	str	r0, [sp, #12]
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	f04f 020a 	mov.w	r2, #10
 8006926:	4639      	mov	r1, r7
 8006928:	4648      	mov	r0, r9
 800692a:	d107      	bne.n	800693c <_dtoa_r+0xae4>
 800692c:	f000 f9c8 	bl	8006cc0 <__multadd>
 8006930:	4607      	mov	r7, r0
 8006932:	4605      	mov	r5, r0
 8006934:	9b04      	ldr	r3, [sp, #16]
 8006936:	3301      	adds	r3, #1
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	e777      	b.n	800682c <_dtoa_r+0x9d4>
 800693c:	f000 f9c0 	bl	8006cc0 <__multadd>
 8006940:	4629      	mov	r1, r5
 8006942:	4607      	mov	r7, r0
 8006944:	2300      	movs	r3, #0
 8006946:	220a      	movs	r2, #10
 8006948:	4648      	mov	r0, r9
 800694a:	f000 f9b9 	bl	8006cc0 <__multadd>
 800694e:	4605      	mov	r5, r0
 8006950:	e7f0      	b.n	8006934 <_dtoa_r+0xadc>
 8006952:	f1bb 0f00 	cmp.w	fp, #0
 8006956:	bfcc      	ite	gt
 8006958:	465e      	movgt	r6, fp
 800695a:	2601      	movle	r6, #1
 800695c:	2700      	movs	r7, #0
 800695e:	4456      	add	r6, sl
 8006960:	2201      	movs	r2, #1
 8006962:	9903      	ldr	r1, [sp, #12]
 8006964:	4648      	mov	r0, r9
 8006966:	9304      	str	r3, [sp, #16]
 8006968:	f000 fb4e 	bl	8007008 <__lshift>
 800696c:	4621      	mov	r1, r4
 800696e:	9003      	str	r0, [sp, #12]
 8006970:	f000 fbb6 	bl	80070e0 <__mcmp>
 8006974:	2800      	cmp	r0, #0
 8006976:	dcb4      	bgt.n	80068e2 <_dtoa_r+0xa8a>
 8006978:	d102      	bne.n	8006980 <_dtoa_r+0xb28>
 800697a:	9b04      	ldr	r3, [sp, #16]
 800697c:	07db      	lsls	r3, r3, #31
 800697e:	d4b0      	bmi.n	80068e2 <_dtoa_r+0xa8a>
 8006980:	4633      	mov	r3, r6
 8006982:	461e      	mov	r6, r3
 8006984:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006988:	2a30      	cmp	r2, #48	@ 0x30
 800698a:	d0fa      	beq.n	8006982 <_dtoa_r+0xb2a>
 800698c:	e4b5      	b.n	80062fa <_dtoa_r+0x4a2>
 800698e:	459a      	cmp	sl, r3
 8006990:	d1a8      	bne.n	80068e4 <_dtoa_r+0xa8c>
 8006992:	2331      	movs	r3, #49	@ 0x31
 8006994:	f108 0801 	add.w	r8, r8, #1
 8006998:	f88a 3000 	strb.w	r3, [sl]
 800699c:	e4ad      	b.n	80062fa <_dtoa_r+0x4a2>
 800699e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80069fc <_dtoa_r+0xba4>
 80069a4:	b11b      	cbz	r3, 80069ae <_dtoa_r+0xb56>
 80069a6:	f10a 0308 	add.w	r3, sl, #8
 80069aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4650      	mov	r0, sl
 80069b0:	b017      	add	sp, #92	@ 0x5c
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	f77f ae2e 	ble.w	800661a <_dtoa_r+0x7c2>
 80069be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c2:	2001      	movs	r0, #1
 80069c4:	e64d      	b.n	8006662 <_dtoa_r+0x80a>
 80069c6:	f1bb 0f00 	cmp.w	fp, #0
 80069ca:	f77f aed9 	ble.w	8006780 <_dtoa_r+0x928>
 80069ce:	4656      	mov	r6, sl
 80069d0:	4621      	mov	r1, r4
 80069d2:	9803      	ldr	r0, [sp, #12]
 80069d4:	f7ff f9b7 	bl	8005d46 <quorem>
 80069d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80069dc:	f806 3b01 	strb.w	r3, [r6], #1
 80069e0:	eba6 020a 	sub.w	r2, r6, sl
 80069e4:	4593      	cmp	fp, r2
 80069e6:	ddb4      	ble.n	8006952 <_dtoa_r+0xafa>
 80069e8:	2300      	movs	r3, #0
 80069ea:	220a      	movs	r2, #10
 80069ec:	4648      	mov	r0, r9
 80069ee:	9903      	ldr	r1, [sp, #12]
 80069f0:	f000 f966 	bl	8006cc0 <__multadd>
 80069f4:	9003      	str	r0, [sp, #12]
 80069f6:	e7eb      	b.n	80069d0 <_dtoa_r+0xb78>
 80069f8:	08007b8e 	.word	0x08007b8e
 80069fc:	08007b12 	.word	0x08007b12

08006a00 <_free_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4605      	mov	r5, r0
 8006a04:	2900      	cmp	r1, #0
 8006a06:	d040      	beq.n	8006a8a <_free_r+0x8a>
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f0c      	subs	r4, r1, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfb8      	it	lt
 8006a12:	18e4      	addlt	r4, r4, r3
 8006a14:	f000 f8e6 	bl	8006be4 <__malloc_lock>
 8006a18:	4a1c      	ldr	r2, [pc, #112]	@ (8006a8c <_free_r+0x8c>)
 8006a1a:	6813      	ldr	r3, [r2, #0]
 8006a1c:	b933      	cbnz	r3, 8006a2c <_free_r+0x2c>
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	6014      	str	r4, [r2, #0]
 8006a22:	4628      	mov	r0, r5
 8006a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a28:	f000 b8e2 	b.w	8006bf0 <__malloc_unlock>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d908      	bls.n	8006a42 <_free_r+0x42>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	1821      	adds	r1, r4, r0
 8006a34:	428b      	cmp	r3, r1
 8006a36:	bf01      	itttt	eq
 8006a38:	6819      	ldreq	r1, [r3, #0]
 8006a3a:	685b      	ldreq	r3, [r3, #4]
 8006a3c:	1809      	addeq	r1, r1, r0
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	e7ed      	b.n	8006a1e <_free_r+0x1e>
 8006a42:	461a      	mov	r2, r3
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b10b      	cbz	r3, 8006a4c <_free_r+0x4c>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d9fa      	bls.n	8006a42 <_free_r+0x42>
 8006a4c:	6811      	ldr	r1, [r2, #0]
 8006a4e:	1850      	adds	r0, r2, r1
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d10b      	bne.n	8006a6c <_free_r+0x6c>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	4401      	add	r1, r0
 8006a58:	1850      	adds	r0, r2, r1
 8006a5a:	4283      	cmp	r3, r0
 8006a5c:	6011      	str	r1, [r2, #0]
 8006a5e:	d1e0      	bne.n	8006a22 <_free_r+0x22>
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4408      	add	r0, r1
 8006a66:	6010      	str	r0, [r2, #0]
 8006a68:	6053      	str	r3, [r2, #4]
 8006a6a:	e7da      	b.n	8006a22 <_free_r+0x22>
 8006a6c:	d902      	bls.n	8006a74 <_free_r+0x74>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	e7d6      	b.n	8006a22 <_free_r+0x22>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	1821      	adds	r1, r4, r0
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf01      	itttt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6063      	str	r3, [r4, #4]
 8006a86:	6054      	str	r4, [r2, #4]
 8006a88:	e7cb      	b.n	8006a22 <_free_r+0x22>
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	200005ac 	.word	0x200005ac

08006a90 <malloc>:
 8006a90:	4b02      	ldr	r3, [pc, #8]	@ (8006a9c <malloc+0xc>)
 8006a92:	4601      	mov	r1, r0
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	f000 b825 	b.w	8006ae4 <_malloc_r>
 8006a9a:	bf00      	nop
 8006a9c:	20000018 	.word	0x20000018

08006aa0 <sbrk_aligned>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8006ae0 <sbrk_aligned+0x40>)
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	6831      	ldr	r1, [r6, #0]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	b911      	cbnz	r1, 8006ab2 <sbrk_aligned+0x12>
 8006aac:	f000 fcc8 	bl	8007440 <_sbrk_r>
 8006ab0:	6030      	str	r0, [r6, #0]
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f000 fcc3 	bl	8007440 <_sbrk_r>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	d103      	bne.n	8006ac6 <sbrk_aligned+0x26>
 8006abe:	f04f 34ff 	mov.w	r4, #4294967295
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}
 8006ac6:	1cc4      	adds	r4, r0, #3
 8006ac8:	f024 0403 	bic.w	r4, r4, #3
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d0f8      	beq.n	8006ac2 <sbrk_aligned+0x22>
 8006ad0:	1a21      	subs	r1, r4, r0
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 fcb4 	bl	8007440 <_sbrk_r>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d1f2      	bne.n	8006ac2 <sbrk_aligned+0x22>
 8006adc:	e7ef      	b.n	8006abe <sbrk_aligned+0x1e>
 8006ade:	bf00      	nop
 8006ae0:	200005a8 	.word	0x200005a8

08006ae4 <_malloc_r>:
 8006ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae8:	1ccd      	adds	r5, r1, #3
 8006aea:	f025 0503 	bic.w	r5, r5, #3
 8006aee:	3508      	adds	r5, #8
 8006af0:	2d0c      	cmp	r5, #12
 8006af2:	bf38      	it	cc
 8006af4:	250c      	movcc	r5, #12
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	4606      	mov	r6, r0
 8006afa:	db01      	blt.n	8006b00 <_malloc_r+0x1c>
 8006afc:	42a9      	cmp	r1, r5
 8006afe:	d904      	bls.n	8006b0a <_malloc_r+0x26>
 8006b00:	230c      	movs	r3, #12
 8006b02:	6033      	str	r3, [r6, #0]
 8006b04:	2000      	movs	r0, #0
 8006b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006be0 <_malloc_r+0xfc>
 8006b0e:	f000 f869 	bl	8006be4 <__malloc_lock>
 8006b12:	f8d8 3000 	ldr.w	r3, [r8]
 8006b16:	461c      	mov	r4, r3
 8006b18:	bb44      	cbnz	r4, 8006b6c <_malloc_r+0x88>
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff ffbf 	bl	8006aa0 <sbrk_aligned>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	4604      	mov	r4, r0
 8006b26:	d158      	bne.n	8006bda <_malloc_r+0xf6>
 8006b28:	f8d8 4000 	ldr.w	r4, [r8]
 8006b2c:	4627      	mov	r7, r4
 8006b2e:	2f00      	cmp	r7, #0
 8006b30:	d143      	bne.n	8006bba <_malloc_r+0xd6>
 8006b32:	2c00      	cmp	r4, #0
 8006b34:	d04b      	beq.n	8006bce <_malloc_r+0xea>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	eb04 0903 	add.w	r9, r4, r3
 8006b40:	f000 fc7e 	bl	8007440 <_sbrk_r>
 8006b44:	4581      	cmp	r9, r0
 8006b46:	d142      	bne.n	8006bce <_malloc_r+0xea>
 8006b48:	6821      	ldr	r1, [r4, #0]
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	1a6d      	subs	r5, r5, r1
 8006b4e:	4629      	mov	r1, r5
 8006b50:	f7ff ffa6 	bl	8006aa0 <sbrk_aligned>
 8006b54:	3001      	adds	r0, #1
 8006b56:	d03a      	beq.n	8006bce <_malloc_r+0xea>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	442b      	add	r3, r5
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	bb62      	cbnz	r2, 8006bc0 <_malloc_r+0xdc>
 8006b66:	f8c8 7000 	str.w	r7, [r8]
 8006b6a:	e00f      	b.n	8006b8c <_malloc_r+0xa8>
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	1b52      	subs	r2, r2, r5
 8006b70:	d420      	bmi.n	8006bb4 <_malloc_r+0xd0>
 8006b72:	2a0b      	cmp	r2, #11
 8006b74:	d917      	bls.n	8006ba6 <_malloc_r+0xc2>
 8006b76:	1961      	adds	r1, r4, r5
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	6025      	str	r5, [r4, #0]
 8006b7c:	bf18      	it	ne
 8006b7e:	6059      	strne	r1, [r3, #4]
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	bf08      	it	eq
 8006b84:	f8c8 1000 	streq.w	r1, [r8]
 8006b88:	5162      	str	r2, [r4, r5]
 8006b8a:	604b      	str	r3, [r1, #4]
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f000 f82f 	bl	8006bf0 <__malloc_unlock>
 8006b92:	f104 000b 	add.w	r0, r4, #11
 8006b96:	1d23      	adds	r3, r4, #4
 8006b98:	f020 0007 	bic.w	r0, r0, #7
 8006b9c:	1ac2      	subs	r2, r0, r3
 8006b9e:	bf1c      	itt	ne
 8006ba0:	1a1b      	subne	r3, r3, r0
 8006ba2:	50a3      	strne	r3, [r4, r2]
 8006ba4:	e7af      	b.n	8006b06 <_malloc_r+0x22>
 8006ba6:	6862      	ldr	r2, [r4, #4]
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	bf0c      	ite	eq
 8006bac:	f8c8 2000 	streq.w	r2, [r8]
 8006bb0:	605a      	strne	r2, [r3, #4]
 8006bb2:	e7eb      	b.n	8006b8c <_malloc_r+0xa8>
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	6864      	ldr	r4, [r4, #4]
 8006bb8:	e7ae      	b.n	8006b18 <_malloc_r+0x34>
 8006bba:	463c      	mov	r4, r7
 8006bbc:	687f      	ldr	r7, [r7, #4]
 8006bbe:	e7b6      	b.n	8006b2e <_malloc_r+0x4a>
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	d1fb      	bne.n	8006bc0 <_malloc_r+0xdc>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6053      	str	r3, [r2, #4]
 8006bcc:	e7de      	b.n	8006b8c <_malloc_r+0xa8>
 8006bce:	230c      	movs	r3, #12
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	6033      	str	r3, [r6, #0]
 8006bd4:	f000 f80c 	bl	8006bf0 <__malloc_unlock>
 8006bd8:	e794      	b.n	8006b04 <_malloc_r+0x20>
 8006bda:	6005      	str	r5, [r0, #0]
 8006bdc:	e7d6      	b.n	8006b8c <_malloc_r+0xa8>
 8006bde:	bf00      	nop
 8006be0:	200005ac 	.word	0x200005ac

08006be4 <__malloc_lock>:
 8006be4:	4801      	ldr	r0, [pc, #4]	@ (8006bec <__malloc_lock+0x8>)
 8006be6:	f7ff b89e 	b.w	8005d26 <__retarget_lock_acquire_recursive>
 8006bea:	bf00      	nop
 8006bec:	200005a4 	.word	0x200005a4

08006bf0 <__malloc_unlock>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	@ (8006bf8 <__malloc_unlock+0x8>)
 8006bf2:	f7ff b899 	b.w	8005d28 <__retarget_lock_release_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	200005a4 	.word	0x200005a4

08006bfc <_Balloc>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	69c6      	ldr	r6, [r0, #28]
 8006c00:	4604      	mov	r4, r0
 8006c02:	460d      	mov	r5, r1
 8006c04:	b976      	cbnz	r6, 8006c24 <_Balloc+0x28>
 8006c06:	2010      	movs	r0, #16
 8006c08:	f7ff ff42 	bl	8006a90 <malloc>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	61e0      	str	r0, [r4, #28]
 8006c10:	b920      	cbnz	r0, 8006c1c <_Balloc+0x20>
 8006c12:	216b      	movs	r1, #107	@ 0x6b
 8006c14:	4b17      	ldr	r3, [pc, #92]	@ (8006c74 <_Balloc+0x78>)
 8006c16:	4818      	ldr	r0, [pc, #96]	@ (8006c78 <_Balloc+0x7c>)
 8006c18:	f000 fc30 	bl	800747c <__assert_func>
 8006c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c20:	6006      	str	r6, [r0, #0]
 8006c22:	60c6      	str	r6, [r0, #12]
 8006c24:	69e6      	ldr	r6, [r4, #28]
 8006c26:	68f3      	ldr	r3, [r6, #12]
 8006c28:	b183      	cbz	r3, 8006c4c <_Balloc+0x50>
 8006c2a:	69e3      	ldr	r3, [r4, #28]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c32:	b9b8      	cbnz	r0, 8006c64 <_Balloc+0x68>
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f605 	lsl.w	r6, r1, r5
 8006c3a:	1d72      	adds	r2, r6, #5
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	0092      	lsls	r2, r2, #2
 8006c40:	f000 fc3a 	bl	80074b8 <_calloc_r>
 8006c44:	b160      	cbz	r0, 8006c60 <_Balloc+0x64>
 8006c46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c4a:	e00e      	b.n	8006c6a <_Balloc+0x6e>
 8006c4c:	2221      	movs	r2, #33	@ 0x21
 8006c4e:	2104      	movs	r1, #4
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 fc31 	bl	80074b8 <_calloc_r>
 8006c56:	69e3      	ldr	r3, [r4, #28]
 8006c58:	60f0      	str	r0, [r6, #12]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e4      	bne.n	8006c2a <_Balloc+0x2e>
 8006c60:	2000      	movs	r0, #0
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	6802      	ldr	r2, [r0, #0]
 8006c66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c70:	e7f7      	b.n	8006c62 <_Balloc+0x66>
 8006c72:	bf00      	nop
 8006c74:	08007b1f 	.word	0x08007b1f
 8006c78:	08007b9f 	.word	0x08007b9f

08006c7c <_Bfree>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	69c6      	ldr	r6, [r0, #28]
 8006c80:	4605      	mov	r5, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	b976      	cbnz	r6, 8006ca4 <_Bfree+0x28>
 8006c86:	2010      	movs	r0, #16
 8006c88:	f7ff ff02 	bl	8006a90 <malloc>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	61e8      	str	r0, [r5, #28]
 8006c90:	b920      	cbnz	r0, 8006c9c <_Bfree+0x20>
 8006c92:	218f      	movs	r1, #143	@ 0x8f
 8006c94:	4b08      	ldr	r3, [pc, #32]	@ (8006cb8 <_Bfree+0x3c>)
 8006c96:	4809      	ldr	r0, [pc, #36]	@ (8006cbc <_Bfree+0x40>)
 8006c98:	f000 fbf0 	bl	800747c <__assert_func>
 8006c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ca0:	6006      	str	r6, [r0, #0]
 8006ca2:	60c6      	str	r6, [r0, #12]
 8006ca4:	b13c      	cbz	r4, 8006cb6 <_Bfree+0x3a>
 8006ca6:	69eb      	ldr	r3, [r5, #28]
 8006ca8:	6862      	ldr	r2, [r4, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cb0:	6021      	str	r1, [r4, #0]
 8006cb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	08007b1f 	.word	0x08007b1f
 8006cbc:	08007b9f 	.word	0x08007b9f

08006cc0 <__multadd>:
 8006cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	461e      	mov	r6, r3
 8006cca:	2000      	movs	r0, #0
 8006ccc:	690d      	ldr	r5, [r1, #16]
 8006cce:	f101 0c14 	add.w	ip, r1, #20
 8006cd2:	f8dc 3000 	ldr.w	r3, [ip]
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	b299      	uxth	r1, r3
 8006cda:	fb02 6101 	mla	r1, r2, r1, r6
 8006cde:	0c1e      	lsrs	r6, r3, #16
 8006ce0:	0c0b      	lsrs	r3, r1, #16
 8006ce2:	fb02 3306 	mla	r3, r2, r6, r3
 8006ce6:	b289      	uxth	r1, r1
 8006ce8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cec:	4285      	cmp	r5, r0
 8006cee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cf2:	f84c 1b04 	str.w	r1, [ip], #4
 8006cf6:	dcec      	bgt.n	8006cd2 <__multadd+0x12>
 8006cf8:	b30e      	cbz	r6, 8006d3e <__multadd+0x7e>
 8006cfa:	68a3      	ldr	r3, [r4, #8]
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	dc19      	bgt.n	8006d34 <__multadd+0x74>
 8006d00:	6861      	ldr	r1, [r4, #4]
 8006d02:	4638      	mov	r0, r7
 8006d04:	3101      	adds	r1, #1
 8006d06:	f7ff ff79 	bl	8006bfc <_Balloc>
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	b928      	cbnz	r0, 8006d1a <__multadd+0x5a>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	21ba      	movs	r1, #186	@ 0xba
 8006d12:	4b0c      	ldr	r3, [pc, #48]	@ (8006d44 <__multadd+0x84>)
 8006d14:	480c      	ldr	r0, [pc, #48]	@ (8006d48 <__multadd+0x88>)
 8006d16:	f000 fbb1 	bl	800747c <__assert_func>
 8006d1a:	6922      	ldr	r2, [r4, #16]
 8006d1c:	f104 010c 	add.w	r1, r4, #12
 8006d20:	3202      	adds	r2, #2
 8006d22:	0092      	lsls	r2, r2, #2
 8006d24:	300c      	adds	r0, #12
 8006d26:	f000 fb9b 	bl	8007460 <memcpy>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	f7ff ffa5 	bl	8006c7c <_Bfree>
 8006d32:	4644      	mov	r4, r8
 8006d34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d38:	3501      	adds	r5, #1
 8006d3a:	615e      	str	r6, [r3, #20]
 8006d3c:	6125      	str	r5, [r4, #16]
 8006d3e:	4620      	mov	r0, r4
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	08007b8e 	.word	0x08007b8e
 8006d48:	08007b9f 	.word	0x08007b9f

08006d4c <__hi0bits>:
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d52:	bf3a      	itte	cc
 8006d54:	0403      	lslcc	r3, r0, #16
 8006d56:	2010      	movcc	r0, #16
 8006d58:	2000      	movcs	r0, #0
 8006d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d5e:	bf3c      	itt	cc
 8006d60:	021b      	lslcc	r3, r3, #8
 8006d62:	3008      	addcc	r0, #8
 8006d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d68:	bf3c      	itt	cc
 8006d6a:	011b      	lslcc	r3, r3, #4
 8006d6c:	3004      	addcc	r0, #4
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d72:	bf3c      	itt	cc
 8006d74:	009b      	lslcc	r3, r3, #2
 8006d76:	3002      	addcc	r0, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	db05      	blt.n	8006d88 <__hi0bits+0x3c>
 8006d7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d80:	f100 0001 	add.w	r0, r0, #1
 8006d84:	bf08      	it	eq
 8006d86:	2020      	moveq	r0, #32
 8006d88:	4770      	bx	lr

08006d8a <__lo0bits>:
 8006d8a:	6803      	ldr	r3, [r0, #0]
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	f013 0007 	ands.w	r0, r3, #7
 8006d92:	d00b      	beq.n	8006dac <__lo0bits+0x22>
 8006d94:	07d9      	lsls	r1, r3, #31
 8006d96:	d421      	bmi.n	8006ddc <__lo0bits+0x52>
 8006d98:	0798      	lsls	r0, r3, #30
 8006d9a:	bf49      	itett	mi
 8006d9c:	085b      	lsrmi	r3, r3, #1
 8006d9e:	089b      	lsrpl	r3, r3, #2
 8006da0:	2001      	movmi	r0, #1
 8006da2:	6013      	strmi	r3, [r2, #0]
 8006da4:	bf5c      	itt	pl
 8006da6:	2002      	movpl	r0, #2
 8006da8:	6013      	strpl	r3, [r2, #0]
 8006daa:	4770      	bx	lr
 8006dac:	b299      	uxth	r1, r3
 8006dae:	b909      	cbnz	r1, 8006db4 <__lo0bits+0x2a>
 8006db0:	2010      	movs	r0, #16
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	b2d9      	uxtb	r1, r3
 8006db6:	b909      	cbnz	r1, 8006dbc <__lo0bits+0x32>
 8006db8:	3008      	adds	r0, #8
 8006dba:	0a1b      	lsrs	r3, r3, #8
 8006dbc:	0719      	lsls	r1, r3, #28
 8006dbe:	bf04      	itt	eq
 8006dc0:	091b      	lsreq	r3, r3, #4
 8006dc2:	3004      	addeq	r0, #4
 8006dc4:	0799      	lsls	r1, r3, #30
 8006dc6:	bf04      	itt	eq
 8006dc8:	089b      	lsreq	r3, r3, #2
 8006dca:	3002      	addeq	r0, #2
 8006dcc:	07d9      	lsls	r1, r3, #31
 8006dce:	d403      	bmi.n	8006dd8 <__lo0bits+0x4e>
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	f100 0001 	add.w	r0, r0, #1
 8006dd6:	d003      	beq.n	8006de0 <__lo0bits+0x56>
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	4770      	bx	lr
 8006ddc:	2000      	movs	r0, #0
 8006dde:	4770      	bx	lr
 8006de0:	2020      	movs	r0, #32
 8006de2:	4770      	bx	lr

08006de4 <__i2b>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	460c      	mov	r4, r1
 8006de8:	2101      	movs	r1, #1
 8006dea:	f7ff ff07 	bl	8006bfc <_Balloc>
 8006dee:	4602      	mov	r2, r0
 8006df0:	b928      	cbnz	r0, 8006dfe <__i2b+0x1a>
 8006df2:	f240 1145 	movw	r1, #325	@ 0x145
 8006df6:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <__i2b+0x24>)
 8006df8:	4804      	ldr	r0, [pc, #16]	@ (8006e0c <__i2b+0x28>)
 8006dfa:	f000 fb3f 	bl	800747c <__assert_func>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	6144      	str	r4, [r0, #20]
 8006e02:	6103      	str	r3, [r0, #16]
 8006e04:	bd10      	pop	{r4, pc}
 8006e06:	bf00      	nop
 8006e08:	08007b8e 	.word	0x08007b8e
 8006e0c:	08007b9f 	.word	0x08007b9f

08006e10 <__multiply>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	4617      	mov	r7, r2
 8006e16:	690a      	ldr	r2, [r1, #16]
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	4689      	mov	r9, r1
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	bfa2      	ittt	ge
 8006e20:	463b      	movge	r3, r7
 8006e22:	460f      	movge	r7, r1
 8006e24:	4699      	movge	r9, r3
 8006e26:	693d      	ldr	r5, [r7, #16]
 8006e28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	eb05 060a 	add.w	r6, r5, sl
 8006e34:	42b3      	cmp	r3, r6
 8006e36:	b085      	sub	sp, #20
 8006e38:	bfb8      	it	lt
 8006e3a:	3101      	addlt	r1, #1
 8006e3c:	f7ff fede 	bl	8006bfc <_Balloc>
 8006e40:	b930      	cbnz	r0, 8006e50 <__multiply+0x40>
 8006e42:	4602      	mov	r2, r0
 8006e44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e48:	4b40      	ldr	r3, [pc, #256]	@ (8006f4c <__multiply+0x13c>)
 8006e4a:	4841      	ldr	r0, [pc, #260]	@ (8006f50 <__multiply+0x140>)
 8006e4c:	f000 fb16 	bl	800747c <__assert_func>
 8006e50:	f100 0414 	add.w	r4, r0, #20
 8006e54:	4623      	mov	r3, r4
 8006e56:	2200      	movs	r2, #0
 8006e58:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006e5c:	4573      	cmp	r3, lr
 8006e5e:	d320      	bcc.n	8006ea2 <__multiply+0x92>
 8006e60:	f107 0814 	add.w	r8, r7, #20
 8006e64:	f109 0114 	add.w	r1, r9, #20
 8006e68:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006e6c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006e70:	9302      	str	r3, [sp, #8]
 8006e72:	1beb      	subs	r3, r5, r7
 8006e74:	3b15      	subs	r3, #21
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	3715      	adds	r7, #21
 8006e7e:	42bd      	cmp	r5, r7
 8006e80:	bf38      	it	cc
 8006e82:	2304      	movcc	r3, #4
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	9b02      	ldr	r3, [sp, #8]
 8006e88:	9103      	str	r1, [sp, #12]
 8006e8a:	428b      	cmp	r3, r1
 8006e8c:	d80c      	bhi.n	8006ea8 <__multiply+0x98>
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	dd03      	ble.n	8006e9a <__multiply+0x8a>
 8006e92:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d055      	beq.n	8006f46 <__multiply+0x136>
 8006e9a:	6106      	str	r6, [r0, #16]
 8006e9c:	b005      	add	sp, #20
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	f843 2b04 	str.w	r2, [r3], #4
 8006ea6:	e7d9      	b.n	8006e5c <__multiply+0x4c>
 8006ea8:	f8b1 a000 	ldrh.w	sl, [r1]
 8006eac:	f1ba 0f00 	cmp.w	sl, #0
 8006eb0:	d01f      	beq.n	8006ef2 <__multiply+0xe2>
 8006eb2:	46c4      	mov	ip, r8
 8006eb4:	46a1      	mov	r9, r4
 8006eb6:	2700      	movs	r7, #0
 8006eb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ebc:	f8d9 3000 	ldr.w	r3, [r9]
 8006ec0:	fa1f fb82 	uxth.w	fp, r2
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	fb0a 330b 	mla	r3, sl, fp, r3
 8006eca:	443b      	add	r3, r7
 8006ecc:	f8d9 7000 	ldr.w	r7, [r9]
 8006ed0:	0c12      	lsrs	r2, r2, #16
 8006ed2:	0c3f      	lsrs	r7, r7, #16
 8006ed4:	fb0a 7202 	mla	r2, sl, r2, r7
 8006ed8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ee2:	4565      	cmp	r5, ip
 8006ee4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006ee8:	f849 3b04 	str.w	r3, [r9], #4
 8006eec:	d8e4      	bhi.n	8006eb8 <__multiply+0xa8>
 8006eee:	9b01      	ldr	r3, [sp, #4]
 8006ef0:	50e7      	str	r7, [r4, r3]
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	3104      	adds	r1, #4
 8006ef6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006efa:	f1b9 0f00 	cmp.w	r9, #0
 8006efe:	d020      	beq.n	8006f42 <__multiply+0x132>
 8006f00:	4647      	mov	r7, r8
 8006f02:	46a4      	mov	ip, r4
 8006f04:	f04f 0a00 	mov.w	sl, #0
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	f8b7 b000 	ldrh.w	fp, [r7]
 8006f0e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	fb09 220b 	mla	r2, r9, fp, r2
 8006f18:	4452      	add	r2, sl
 8006f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f1e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f22:	f857 3b04 	ldr.w	r3, [r7], #4
 8006f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f2a:	f8bc 3000 	ldrh.w	r3, [ip]
 8006f2e:	42bd      	cmp	r5, r7
 8006f30:	fb09 330a 	mla	r3, r9, sl, r3
 8006f34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006f38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f3c:	d8e5      	bhi.n	8006f0a <__multiply+0xfa>
 8006f3e:	9a01      	ldr	r2, [sp, #4]
 8006f40:	50a3      	str	r3, [r4, r2]
 8006f42:	3404      	adds	r4, #4
 8006f44:	e79f      	b.n	8006e86 <__multiply+0x76>
 8006f46:	3e01      	subs	r6, #1
 8006f48:	e7a1      	b.n	8006e8e <__multiply+0x7e>
 8006f4a:	bf00      	nop
 8006f4c:	08007b8e 	.word	0x08007b8e
 8006f50:	08007b9f 	.word	0x08007b9f

08006f54 <__pow5mult>:
 8006f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f58:	4615      	mov	r5, r2
 8006f5a:	f012 0203 	ands.w	r2, r2, #3
 8006f5e:	4607      	mov	r7, r0
 8006f60:	460e      	mov	r6, r1
 8006f62:	d007      	beq.n	8006f74 <__pow5mult+0x20>
 8006f64:	4c25      	ldr	r4, [pc, #148]	@ (8006ffc <__pow5mult+0xa8>)
 8006f66:	3a01      	subs	r2, #1
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f6e:	f7ff fea7 	bl	8006cc0 <__multadd>
 8006f72:	4606      	mov	r6, r0
 8006f74:	10ad      	asrs	r5, r5, #2
 8006f76:	d03d      	beq.n	8006ff4 <__pow5mult+0xa0>
 8006f78:	69fc      	ldr	r4, [r7, #28]
 8006f7a:	b97c      	cbnz	r4, 8006f9c <__pow5mult+0x48>
 8006f7c:	2010      	movs	r0, #16
 8006f7e:	f7ff fd87 	bl	8006a90 <malloc>
 8006f82:	4602      	mov	r2, r0
 8006f84:	61f8      	str	r0, [r7, #28]
 8006f86:	b928      	cbnz	r0, 8006f94 <__pow5mult+0x40>
 8006f88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007000 <__pow5mult+0xac>)
 8006f8e:	481d      	ldr	r0, [pc, #116]	@ (8007004 <__pow5mult+0xb0>)
 8006f90:	f000 fa74 	bl	800747c <__assert_func>
 8006f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f98:	6004      	str	r4, [r0, #0]
 8006f9a:	60c4      	str	r4, [r0, #12]
 8006f9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fa4:	b94c      	cbnz	r4, 8006fba <__pow5mult+0x66>
 8006fa6:	f240 2171 	movw	r1, #625	@ 0x271
 8006faa:	4638      	mov	r0, r7
 8006fac:	f7ff ff1a 	bl	8006de4 <__i2b>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fb8:	6003      	str	r3, [r0, #0]
 8006fba:	f04f 0900 	mov.w	r9, #0
 8006fbe:	07eb      	lsls	r3, r5, #31
 8006fc0:	d50a      	bpl.n	8006fd8 <__pow5mult+0x84>
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	f7ff ff22 	bl	8006e10 <__multiply>
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f7ff fe53 	bl	8006c7c <_Bfree>
 8006fd6:	4646      	mov	r6, r8
 8006fd8:	106d      	asrs	r5, r5, #1
 8006fda:	d00b      	beq.n	8006ff4 <__pow5mult+0xa0>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	b938      	cbnz	r0, 8006ff0 <__pow5mult+0x9c>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7ff ff13 	bl	8006e10 <__multiply>
 8006fea:	6020      	str	r0, [r4, #0]
 8006fec:	f8c0 9000 	str.w	r9, [r0]
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	e7e4      	b.n	8006fbe <__pow5mult+0x6a>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	bf00      	nop
 8006ffc:	08007c50 	.word	0x08007c50
 8007000:	08007b1f 	.word	0x08007b1f
 8007004:	08007b9f 	.word	0x08007b9f

08007008 <__lshift>:
 8007008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	460c      	mov	r4, r1
 800700e:	4607      	mov	r7, r0
 8007010:	4691      	mov	r9, r2
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	6849      	ldr	r1, [r1, #4]
 8007016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007020:	f108 0601 	add.w	r6, r8, #1
 8007024:	42b3      	cmp	r3, r6
 8007026:	db0b      	blt.n	8007040 <__lshift+0x38>
 8007028:	4638      	mov	r0, r7
 800702a:	f7ff fde7 	bl	8006bfc <_Balloc>
 800702e:	4605      	mov	r5, r0
 8007030:	b948      	cbnz	r0, 8007046 <__lshift+0x3e>
 8007032:	4602      	mov	r2, r0
 8007034:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007038:	4b27      	ldr	r3, [pc, #156]	@ (80070d8 <__lshift+0xd0>)
 800703a:	4828      	ldr	r0, [pc, #160]	@ (80070dc <__lshift+0xd4>)
 800703c:	f000 fa1e 	bl	800747c <__assert_func>
 8007040:	3101      	adds	r1, #1
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	e7ee      	b.n	8007024 <__lshift+0x1c>
 8007046:	2300      	movs	r3, #0
 8007048:	f100 0114 	add.w	r1, r0, #20
 800704c:	f100 0210 	add.w	r2, r0, #16
 8007050:	4618      	mov	r0, r3
 8007052:	4553      	cmp	r3, sl
 8007054:	db33      	blt.n	80070be <__lshift+0xb6>
 8007056:	6920      	ldr	r0, [r4, #16]
 8007058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800705c:	f104 0314 	add.w	r3, r4, #20
 8007060:	f019 091f 	ands.w	r9, r9, #31
 8007064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007068:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800706c:	d02b      	beq.n	80070c6 <__lshift+0xbe>
 800706e:	468a      	mov	sl, r1
 8007070:	2200      	movs	r2, #0
 8007072:	f1c9 0e20 	rsb	lr, r9, #32
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	fa00 f009 	lsl.w	r0, r0, r9
 800707c:	4310      	orrs	r0, r2
 800707e:	f84a 0b04 	str.w	r0, [sl], #4
 8007082:	f853 2b04 	ldr.w	r2, [r3], #4
 8007086:	459c      	cmp	ip, r3
 8007088:	fa22 f20e 	lsr.w	r2, r2, lr
 800708c:	d8f3      	bhi.n	8007076 <__lshift+0x6e>
 800708e:	ebac 0304 	sub.w	r3, ip, r4
 8007092:	3b15      	subs	r3, #21
 8007094:	f023 0303 	bic.w	r3, r3, #3
 8007098:	3304      	adds	r3, #4
 800709a:	f104 0015 	add.w	r0, r4, #21
 800709e:	4560      	cmp	r0, ip
 80070a0:	bf88      	it	hi
 80070a2:	2304      	movhi	r3, #4
 80070a4:	50ca      	str	r2, [r1, r3]
 80070a6:	b10a      	cbz	r2, 80070ac <__lshift+0xa4>
 80070a8:	f108 0602 	add.w	r6, r8, #2
 80070ac:	3e01      	subs	r6, #1
 80070ae:	4638      	mov	r0, r7
 80070b0:	4621      	mov	r1, r4
 80070b2:	612e      	str	r6, [r5, #16]
 80070b4:	f7ff fde2 	bl	8006c7c <_Bfree>
 80070b8:	4628      	mov	r0, r5
 80070ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070be:	f842 0f04 	str.w	r0, [r2, #4]!
 80070c2:	3301      	adds	r3, #1
 80070c4:	e7c5      	b.n	8007052 <__lshift+0x4a>
 80070c6:	3904      	subs	r1, #4
 80070c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070cc:	459c      	cmp	ip, r3
 80070ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80070d2:	d8f9      	bhi.n	80070c8 <__lshift+0xc0>
 80070d4:	e7ea      	b.n	80070ac <__lshift+0xa4>
 80070d6:	bf00      	nop
 80070d8:	08007b8e 	.word	0x08007b8e
 80070dc:	08007b9f 	.word	0x08007b9f

080070e0 <__mcmp>:
 80070e0:	4603      	mov	r3, r0
 80070e2:	690a      	ldr	r2, [r1, #16]
 80070e4:	6900      	ldr	r0, [r0, #16]
 80070e6:	b530      	push	{r4, r5, lr}
 80070e8:	1a80      	subs	r0, r0, r2
 80070ea:	d10e      	bne.n	800710a <__mcmp+0x2a>
 80070ec:	3314      	adds	r3, #20
 80070ee:	3114      	adds	r1, #20
 80070f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007100:	4295      	cmp	r5, r2
 8007102:	d003      	beq.n	800710c <__mcmp+0x2c>
 8007104:	d205      	bcs.n	8007112 <__mcmp+0x32>
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	bd30      	pop	{r4, r5, pc}
 800710c:	42a3      	cmp	r3, r4
 800710e:	d3f3      	bcc.n	80070f8 <__mcmp+0x18>
 8007110:	e7fb      	b.n	800710a <__mcmp+0x2a>
 8007112:	2001      	movs	r0, #1
 8007114:	e7f9      	b.n	800710a <__mcmp+0x2a>
	...

08007118 <__mdiff>:
 8007118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	4689      	mov	r9, r1
 800711e:	4606      	mov	r6, r0
 8007120:	4611      	mov	r1, r2
 8007122:	4648      	mov	r0, r9
 8007124:	4614      	mov	r4, r2
 8007126:	f7ff ffdb 	bl	80070e0 <__mcmp>
 800712a:	1e05      	subs	r5, r0, #0
 800712c:	d112      	bne.n	8007154 <__mdiff+0x3c>
 800712e:	4629      	mov	r1, r5
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff fd63 	bl	8006bfc <_Balloc>
 8007136:	4602      	mov	r2, r0
 8007138:	b928      	cbnz	r0, 8007146 <__mdiff+0x2e>
 800713a:	f240 2137 	movw	r1, #567	@ 0x237
 800713e:	4b3e      	ldr	r3, [pc, #248]	@ (8007238 <__mdiff+0x120>)
 8007140:	483e      	ldr	r0, [pc, #248]	@ (800723c <__mdiff+0x124>)
 8007142:	f000 f99b 	bl	800747c <__assert_func>
 8007146:	2301      	movs	r3, #1
 8007148:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800714c:	4610      	mov	r0, r2
 800714e:	b003      	add	sp, #12
 8007150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007154:	bfbc      	itt	lt
 8007156:	464b      	movlt	r3, r9
 8007158:	46a1      	movlt	r9, r4
 800715a:	4630      	mov	r0, r6
 800715c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007160:	bfba      	itte	lt
 8007162:	461c      	movlt	r4, r3
 8007164:	2501      	movlt	r5, #1
 8007166:	2500      	movge	r5, #0
 8007168:	f7ff fd48 	bl	8006bfc <_Balloc>
 800716c:	4602      	mov	r2, r0
 800716e:	b918      	cbnz	r0, 8007178 <__mdiff+0x60>
 8007170:	f240 2145 	movw	r1, #581	@ 0x245
 8007174:	4b30      	ldr	r3, [pc, #192]	@ (8007238 <__mdiff+0x120>)
 8007176:	e7e3      	b.n	8007140 <__mdiff+0x28>
 8007178:	f100 0b14 	add.w	fp, r0, #20
 800717c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007180:	f109 0310 	add.w	r3, r9, #16
 8007184:	60c5      	str	r5, [r0, #12]
 8007186:	f04f 0c00 	mov.w	ip, #0
 800718a:	f109 0514 	add.w	r5, r9, #20
 800718e:	46d9      	mov	r9, fp
 8007190:	6926      	ldr	r6, [r4, #16]
 8007192:	f104 0e14 	add.w	lr, r4, #20
 8007196:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800719a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	9b01      	ldr	r3, [sp, #4]
 80071a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071aa:	b281      	uxth	r1, r0
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	fa1f f38a 	uxth.w	r3, sl
 80071b2:	1a5b      	subs	r3, r3, r1
 80071b4:	0c00      	lsrs	r0, r0, #16
 80071b6:	4463      	add	r3, ip
 80071b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80071bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071c6:	4576      	cmp	r6, lr
 80071c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071cc:	f849 3b04 	str.w	r3, [r9], #4
 80071d0:	d8e6      	bhi.n	80071a0 <__mdiff+0x88>
 80071d2:	1b33      	subs	r3, r6, r4
 80071d4:	3b15      	subs	r3, #21
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	3415      	adds	r4, #21
 80071dc:	3304      	adds	r3, #4
 80071de:	42a6      	cmp	r6, r4
 80071e0:	bf38      	it	cc
 80071e2:	2304      	movcc	r3, #4
 80071e4:	441d      	add	r5, r3
 80071e6:	445b      	add	r3, fp
 80071e8:	461e      	mov	r6, r3
 80071ea:	462c      	mov	r4, r5
 80071ec:	4544      	cmp	r4, r8
 80071ee:	d30e      	bcc.n	800720e <__mdiff+0xf6>
 80071f0:	f108 0103 	add.w	r1, r8, #3
 80071f4:	1b49      	subs	r1, r1, r5
 80071f6:	f021 0103 	bic.w	r1, r1, #3
 80071fa:	3d03      	subs	r5, #3
 80071fc:	45a8      	cmp	r8, r5
 80071fe:	bf38      	it	cc
 8007200:	2100      	movcc	r1, #0
 8007202:	440b      	add	r3, r1
 8007204:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007208:	b199      	cbz	r1, 8007232 <__mdiff+0x11a>
 800720a:	6117      	str	r7, [r2, #16]
 800720c:	e79e      	b.n	800714c <__mdiff+0x34>
 800720e:	46e6      	mov	lr, ip
 8007210:	f854 1b04 	ldr.w	r1, [r4], #4
 8007214:	fa1f fc81 	uxth.w	ip, r1
 8007218:	44f4      	add	ip, lr
 800721a:	0c08      	lsrs	r0, r1, #16
 800721c:	4471      	add	r1, lr
 800721e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007222:	b289      	uxth	r1, r1
 8007224:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007228:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800722c:	f846 1b04 	str.w	r1, [r6], #4
 8007230:	e7dc      	b.n	80071ec <__mdiff+0xd4>
 8007232:	3f01      	subs	r7, #1
 8007234:	e7e6      	b.n	8007204 <__mdiff+0xec>
 8007236:	bf00      	nop
 8007238:	08007b8e 	.word	0x08007b8e
 800723c:	08007b9f 	.word	0x08007b9f

08007240 <__d2b>:
 8007240:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007244:	2101      	movs	r1, #1
 8007246:	4690      	mov	r8, r2
 8007248:	4699      	mov	r9, r3
 800724a:	9e08      	ldr	r6, [sp, #32]
 800724c:	f7ff fcd6 	bl	8006bfc <_Balloc>
 8007250:	4604      	mov	r4, r0
 8007252:	b930      	cbnz	r0, 8007262 <__d2b+0x22>
 8007254:	4602      	mov	r2, r0
 8007256:	f240 310f 	movw	r1, #783	@ 0x30f
 800725a:	4b23      	ldr	r3, [pc, #140]	@ (80072e8 <__d2b+0xa8>)
 800725c:	4823      	ldr	r0, [pc, #140]	@ (80072ec <__d2b+0xac>)
 800725e:	f000 f90d 	bl	800747c <__assert_func>
 8007262:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007266:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800726a:	b10d      	cbz	r5, 8007270 <__d2b+0x30>
 800726c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	f1b8 0300 	subs.w	r3, r8, #0
 8007276:	d024      	beq.n	80072c2 <__d2b+0x82>
 8007278:	4668      	mov	r0, sp
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	f7ff fd85 	bl	8006d8a <__lo0bits>
 8007280:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007284:	b1d8      	cbz	r0, 80072be <__d2b+0x7e>
 8007286:	f1c0 0320 	rsb	r3, r0, #32
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	430b      	orrs	r3, r1
 8007290:	40c2      	lsrs	r2, r0
 8007292:	6163      	str	r3, [r4, #20]
 8007294:	9201      	str	r2, [sp, #4]
 8007296:	9b01      	ldr	r3, [sp, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	bf0c      	ite	eq
 800729c:	2201      	moveq	r2, #1
 800729e:	2202      	movne	r2, #2
 80072a0:	61a3      	str	r3, [r4, #24]
 80072a2:	6122      	str	r2, [r4, #16]
 80072a4:	b1ad      	cbz	r5, 80072d2 <__d2b+0x92>
 80072a6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072aa:	4405      	add	r5, r0
 80072ac:	6035      	str	r5, [r6, #0]
 80072ae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b4:	6018      	str	r0, [r3, #0]
 80072b6:	4620      	mov	r0, r4
 80072b8:	b002      	add	sp, #8
 80072ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80072be:	6161      	str	r1, [r4, #20]
 80072c0:	e7e9      	b.n	8007296 <__d2b+0x56>
 80072c2:	a801      	add	r0, sp, #4
 80072c4:	f7ff fd61 	bl	8006d8a <__lo0bits>
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	6163      	str	r3, [r4, #20]
 80072ce:	3020      	adds	r0, #32
 80072d0:	e7e7      	b.n	80072a2 <__d2b+0x62>
 80072d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80072d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072da:	6030      	str	r0, [r6, #0]
 80072dc:	6918      	ldr	r0, [r3, #16]
 80072de:	f7ff fd35 	bl	8006d4c <__hi0bits>
 80072e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072e6:	e7e4      	b.n	80072b2 <__d2b+0x72>
 80072e8:	08007b8e 	.word	0x08007b8e
 80072ec:	08007b9f 	.word	0x08007b9f

080072f0 <__sflush_r>:
 80072f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	0716      	lsls	r6, r2, #28
 80072f8:	4605      	mov	r5, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	d454      	bmi.n	80073a8 <__sflush_r+0xb8>
 80072fe:	684b      	ldr	r3, [r1, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc02      	bgt.n	800730a <__sflush_r+0x1a>
 8007304:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	dd48      	ble.n	800739c <__sflush_r+0xac>
 800730a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800730c:	2e00      	cmp	r6, #0
 800730e:	d045      	beq.n	800739c <__sflush_r+0xac>
 8007310:	2300      	movs	r3, #0
 8007312:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007316:	682f      	ldr	r7, [r5, #0]
 8007318:	6a21      	ldr	r1, [r4, #32]
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	d030      	beq.n	8007380 <__sflush_r+0x90>
 800731e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	0759      	lsls	r1, r3, #29
 8007324:	d505      	bpl.n	8007332 <__sflush_r+0x42>
 8007326:	6863      	ldr	r3, [r4, #4]
 8007328:	1ad2      	subs	r2, r2, r3
 800732a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800732c:	b10b      	cbz	r3, 8007332 <__sflush_r+0x42>
 800732e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007330:	1ad2      	subs	r2, r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	4628      	mov	r0, r5
 8007336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007338:	6a21      	ldr	r1, [r4, #32]
 800733a:	47b0      	blx	r6
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	d106      	bne.n	8007350 <__sflush_r+0x60>
 8007342:	6829      	ldr	r1, [r5, #0]
 8007344:	291d      	cmp	r1, #29
 8007346:	d82b      	bhi.n	80073a0 <__sflush_r+0xb0>
 8007348:	4a28      	ldr	r2, [pc, #160]	@ (80073ec <__sflush_r+0xfc>)
 800734a:	40ca      	lsrs	r2, r1
 800734c:	07d6      	lsls	r6, r2, #31
 800734e:	d527      	bpl.n	80073a0 <__sflush_r+0xb0>
 8007350:	2200      	movs	r2, #0
 8007352:	6062      	str	r2, [r4, #4]
 8007354:	6922      	ldr	r2, [r4, #16]
 8007356:	04d9      	lsls	r1, r3, #19
 8007358:	6022      	str	r2, [r4, #0]
 800735a:	d504      	bpl.n	8007366 <__sflush_r+0x76>
 800735c:	1c42      	adds	r2, r0, #1
 800735e:	d101      	bne.n	8007364 <__sflush_r+0x74>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b903      	cbnz	r3, 8007366 <__sflush_r+0x76>
 8007364:	6560      	str	r0, [r4, #84]	@ 0x54
 8007366:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007368:	602f      	str	r7, [r5, #0]
 800736a:	b1b9      	cbz	r1, 800739c <__sflush_r+0xac>
 800736c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007370:	4299      	cmp	r1, r3
 8007372:	d002      	beq.n	800737a <__sflush_r+0x8a>
 8007374:	4628      	mov	r0, r5
 8007376:	f7ff fb43 	bl	8006a00 <_free_r>
 800737a:	2300      	movs	r3, #0
 800737c:	6363      	str	r3, [r4, #52]	@ 0x34
 800737e:	e00d      	b.n	800739c <__sflush_r+0xac>
 8007380:	2301      	movs	r3, #1
 8007382:	4628      	mov	r0, r5
 8007384:	47b0      	blx	r6
 8007386:	4602      	mov	r2, r0
 8007388:	1c50      	adds	r0, r2, #1
 800738a:	d1c9      	bne.n	8007320 <__sflush_r+0x30>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0c6      	beq.n	8007320 <__sflush_r+0x30>
 8007392:	2b1d      	cmp	r3, #29
 8007394:	d001      	beq.n	800739a <__sflush_r+0xaa>
 8007396:	2b16      	cmp	r3, #22
 8007398:	d11d      	bne.n	80073d6 <__sflush_r+0xe6>
 800739a:	602f      	str	r7, [r5, #0]
 800739c:	2000      	movs	r0, #0
 800739e:	e021      	b.n	80073e4 <__sflush_r+0xf4>
 80073a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a4:	b21b      	sxth	r3, r3
 80073a6:	e01a      	b.n	80073de <__sflush_r+0xee>
 80073a8:	690f      	ldr	r7, [r1, #16]
 80073aa:	2f00      	cmp	r7, #0
 80073ac:	d0f6      	beq.n	800739c <__sflush_r+0xac>
 80073ae:	0793      	lsls	r3, r2, #30
 80073b0:	bf18      	it	ne
 80073b2:	2300      	movne	r3, #0
 80073b4:	680e      	ldr	r6, [r1, #0]
 80073b6:	bf08      	it	eq
 80073b8:	694b      	ldreq	r3, [r1, #20]
 80073ba:	1bf6      	subs	r6, r6, r7
 80073bc:	600f      	str	r7, [r1, #0]
 80073be:	608b      	str	r3, [r1, #8]
 80073c0:	2e00      	cmp	r6, #0
 80073c2:	ddeb      	ble.n	800739c <__sflush_r+0xac>
 80073c4:	4633      	mov	r3, r6
 80073c6:	463a      	mov	r2, r7
 80073c8:	4628      	mov	r0, r5
 80073ca:	6a21      	ldr	r1, [r4, #32]
 80073cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80073d0:	47e0      	blx	ip
 80073d2:	2800      	cmp	r0, #0
 80073d4:	dc07      	bgt.n	80073e6 <__sflush_r+0xf6>
 80073d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073de:	f04f 30ff 	mov.w	r0, #4294967295
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e6:	4407      	add	r7, r0
 80073e8:	1a36      	subs	r6, r6, r0
 80073ea:	e7e9      	b.n	80073c0 <__sflush_r+0xd0>
 80073ec:	20400001 	.word	0x20400001

080073f0 <_fflush_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	4605      	mov	r5, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b913      	cbnz	r3, 8007400 <_fflush_r+0x10>
 80073fa:	2500      	movs	r5, #0
 80073fc:	4628      	mov	r0, r5
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	b118      	cbz	r0, 800740a <_fflush_r+0x1a>
 8007402:	6a03      	ldr	r3, [r0, #32]
 8007404:	b90b      	cbnz	r3, 800740a <_fflush_r+0x1a>
 8007406:	f7fe fb97 	bl	8005b38 <__sinit>
 800740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f3      	beq.n	80073fa <_fflush_r+0xa>
 8007412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007414:	07d0      	lsls	r0, r2, #31
 8007416:	d404      	bmi.n	8007422 <_fflush_r+0x32>
 8007418:	0599      	lsls	r1, r3, #22
 800741a:	d402      	bmi.n	8007422 <_fflush_r+0x32>
 800741c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800741e:	f7fe fc82 	bl	8005d26 <__retarget_lock_acquire_recursive>
 8007422:	4628      	mov	r0, r5
 8007424:	4621      	mov	r1, r4
 8007426:	f7ff ff63 	bl	80072f0 <__sflush_r>
 800742a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800742c:	4605      	mov	r5, r0
 800742e:	07da      	lsls	r2, r3, #31
 8007430:	d4e4      	bmi.n	80073fc <_fflush_r+0xc>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	059b      	lsls	r3, r3, #22
 8007436:	d4e1      	bmi.n	80073fc <_fflush_r+0xc>
 8007438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800743a:	f7fe fc75 	bl	8005d28 <__retarget_lock_release_recursive>
 800743e:	e7dd      	b.n	80073fc <_fflush_r+0xc>

08007440 <_sbrk_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	2300      	movs	r3, #0
 8007444:	4d05      	ldr	r5, [pc, #20]	@ (800745c <_sbrk_r+0x1c>)
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	f7f9 ff0a 	bl	8001264 <_sbrk>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d102      	bne.n	800745a <_sbrk_r+0x1a>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	b103      	cbz	r3, 800745a <_sbrk_r+0x1a>
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	200005a0 	.word	0x200005a0

08007460 <memcpy>:
 8007460:	440a      	add	r2, r1
 8007462:	4291      	cmp	r1, r2
 8007464:	f100 33ff 	add.w	r3, r0, #4294967295
 8007468:	d100      	bne.n	800746c <memcpy+0xc>
 800746a:	4770      	bx	lr
 800746c:	b510      	push	{r4, lr}
 800746e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007472:	4291      	cmp	r1, r2
 8007474:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007478:	d1f9      	bne.n	800746e <memcpy+0xe>
 800747a:	bd10      	pop	{r4, pc}

0800747c <__assert_func>:
 800747c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800747e:	4614      	mov	r4, r2
 8007480:	461a      	mov	r2, r3
 8007482:	4b09      	ldr	r3, [pc, #36]	@ (80074a8 <__assert_func+0x2c>)
 8007484:	4605      	mov	r5, r0
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68d8      	ldr	r0, [r3, #12]
 800748a:	b14c      	cbz	r4, 80074a0 <__assert_func+0x24>
 800748c:	4b07      	ldr	r3, [pc, #28]	@ (80074ac <__assert_func+0x30>)
 800748e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007492:	9100      	str	r1, [sp, #0]
 8007494:	462b      	mov	r3, r5
 8007496:	4906      	ldr	r1, [pc, #24]	@ (80074b0 <__assert_func+0x34>)
 8007498:	f000 f842 	bl	8007520 <fiprintf>
 800749c:	f000 f852 	bl	8007544 <abort>
 80074a0:	4b04      	ldr	r3, [pc, #16]	@ (80074b4 <__assert_func+0x38>)
 80074a2:	461c      	mov	r4, r3
 80074a4:	e7f3      	b.n	800748e <__assert_func+0x12>
 80074a6:	bf00      	nop
 80074a8:	20000018 	.word	0x20000018
 80074ac:	08007c02 	.word	0x08007c02
 80074b0:	08007c0f 	.word	0x08007c0f
 80074b4:	08007c3d 	.word	0x08007c3d

080074b8 <_calloc_r>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	fba1 5402 	umull	r5, r4, r1, r2
 80074be:	b934      	cbnz	r4, 80074ce <_calloc_r+0x16>
 80074c0:	4629      	mov	r1, r5
 80074c2:	f7ff fb0f 	bl	8006ae4 <_malloc_r>
 80074c6:	4606      	mov	r6, r0
 80074c8:	b928      	cbnz	r0, 80074d6 <_calloc_r+0x1e>
 80074ca:	4630      	mov	r0, r6
 80074cc:	bd70      	pop	{r4, r5, r6, pc}
 80074ce:	220c      	movs	r2, #12
 80074d0:	2600      	movs	r6, #0
 80074d2:	6002      	str	r2, [r0, #0]
 80074d4:	e7f9      	b.n	80074ca <_calloc_r+0x12>
 80074d6:	462a      	mov	r2, r5
 80074d8:	4621      	mov	r1, r4
 80074da:	f7fe fba6 	bl	8005c2a <memset>
 80074de:	e7f4      	b.n	80074ca <_calloc_r+0x12>

080074e0 <__ascii_mbtowc>:
 80074e0:	b082      	sub	sp, #8
 80074e2:	b901      	cbnz	r1, 80074e6 <__ascii_mbtowc+0x6>
 80074e4:	a901      	add	r1, sp, #4
 80074e6:	b142      	cbz	r2, 80074fa <__ascii_mbtowc+0x1a>
 80074e8:	b14b      	cbz	r3, 80074fe <__ascii_mbtowc+0x1e>
 80074ea:	7813      	ldrb	r3, [r2, #0]
 80074ec:	600b      	str	r3, [r1, #0]
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	1e10      	subs	r0, r2, #0
 80074f2:	bf18      	it	ne
 80074f4:	2001      	movne	r0, #1
 80074f6:	b002      	add	sp, #8
 80074f8:	4770      	bx	lr
 80074fa:	4610      	mov	r0, r2
 80074fc:	e7fb      	b.n	80074f6 <__ascii_mbtowc+0x16>
 80074fe:	f06f 0001 	mvn.w	r0, #1
 8007502:	e7f8      	b.n	80074f6 <__ascii_mbtowc+0x16>

08007504 <__ascii_wctomb>:
 8007504:	4603      	mov	r3, r0
 8007506:	4608      	mov	r0, r1
 8007508:	b141      	cbz	r1, 800751c <__ascii_wctomb+0x18>
 800750a:	2aff      	cmp	r2, #255	@ 0xff
 800750c:	d904      	bls.n	8007518 <__ascii_wctomb+0x14>
 800750e:	228a      	movs	r2, #138	@ 0x8a
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	4770      	bx	lr
 8007518:	2001      	movs	r0, #1
 800751a:	700a      	strb	r2, [r1, #0]
 800751c:	4770      	bx	lr
	...

08007520 <fiprintf>:
 8007520:	b40e      	push	{r1, r2, r3}
 8007522:	b503      	push	{r0, r1, lr}
 8007524:	4601      	mov	r1, r0
 8007526:	ab03      	add	r3, sp, #12
 8007528:	4805      	ldr	r0, [pc, #20]	@ (8007540 <fiprintf+0x20>)
 800752a:	f853 2b04 	ldr.w	r2, [r3], #4
 800752e:	6800      	ldr	r0, [r0, #0]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	f000 f835 	bl	80075a0 <_vfiprintf_r>
 8007536:	b002      	add	sp, #8
 8007538:	f85d eb04 	ldr.w	lr, [sp], #4
 800753c:	b003      	add	sp, #12
 800753e:	4770      	bx	lr
 8007540:	20000018 	.word	0x20000018

08007544 <abort>:
 8007544:	2006      	movs	r0, #6
 8007546:	b508      	push	{r3, lr}
 8007548:	f000 f9fe 	bl	8007948 <raise>
 800754c:	2001      	movs	r0, #1
 800754e:	f7f9 fe14 	bl	800117a <_exit>

08007552 <__sfputc_r>:
 8007552:	6893      	ldr	r3, [r2, #8]
 8007554:	b410      	push	{r4}
 8007556:	3b01      	subs	r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	6093      	str	r3, [r2, #8]
 800755c:	da07      	bge.n	800756e <__sfputc_r+0x1c>
 800755e:	6994      	ldr	r4, [r2, #24]
 8007560:	42a3      	cmp	r3, r4
 8007562:	db01      	blt.n	8007568 <__sfputc_r+0x16>
 8007564:	290a      	cmp	r1, #10
 8007566:	d102      	bne.n	800756e <__sfputc_r+0x1c>
 8007568:	bc10      	pop	{r4}
 800756a:	f000 b931 	b.w	80077d0 <__swbuf_r>
 800756e:	6813      	ldr	r3, [r2, #0]
 8007570:	1c58      	adds	r0, r3, #1
 8007572:	6010      	str	r0, [r2, #0]
 8007574:	7019      	strb	r1, [r3, #0]
 8007576:	4608      	mov	r0, r1
 8007578:	bc10      	pop	{r4}
 800757a:	4770      	bx	lr

0800757c <__sfputs_r>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	4614      	mov	r4, r2
 8007584:	18d5      	adds	r5, r2, r3
 8007586:	42ac      	cmp	r4, r5
 8007588:	d101      	bne.n	800758e <__sfputs_r+0x12>
 800758a:	2000      	movs	r0, #0
 800758c:	e007      	b.n	800759e <__sfputs_r+0x22>
 800758e:	463a      	mov	r2, r7
 8007590:	4630      	mov	r0, r6
 8007592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007596:	f7ff ffdc 	bl	8007552 <__sfputc_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	d1f3      	bne.n	8007586 <__sfputs_r+0xa>
 800759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075a0 <_vfiprintf_r>:
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	460d      	mov	r5, r1
 80075a6:	4614      	mov	r4, r2
 80075a8:	4698      	mov	r8, r3
 80075aa:	4606      	mov	r6, r0
 80075ac:	b09d      	sub	sp, #116	@ 0x74
 80075ae:	b118      	cbz	r0, 80075b8 <_vfiprintf_r+0x18>
 80075b0:	6a03      	ldr	r3, [r0, #32]
 80075b2:	b90b      	cbnz	r3, 80075b8 <_vfiprintf_r+0x18>
 80075b4:	f7fe fac0 	bl	8005b38 <__sinit>
 80075b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ba:	07d9      	lsls	r1, r3, #31
 80075bc:	d405      	bmi.n	80075ca <_vfiprintf_r+0x2a>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	059a      	lsls	r2, r3, #22
 80075c2:	d402      	bmi.n	80075ca <_vfiprintf_r+0x2a>
 80075c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075c6:	f7fe fbae 	bl	8005d26 <__retarget_lock_acquire_recursive>
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	071b      	lsls	r3, r3, #28
 80075ce:	d501      	bpl.n	80075d4 <_vfiprintf_r+0x34>
 80075d0:	692b      	ldr	r3, [r5, #16]
 80075d2:	b99b      	cbnz	r3, 80075fc <_vfiprintf_r+0x5c>
 80075d4:	4629      	mov	r1, r5
 80075d6:	4630      	mov	r0, r6
 80075d8:	f000 f938 	bl	800784c <__swsetup_r>
 80075dc:	b170      	cbz	r0, 80075fc <_vfiprintf_r+0x5c>
 80075de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075e0:	07dc      	lsls	r4, r3, #31
 80075e2:	d504      	bpl.n	80075ee <_vfiprintf_r+0x4e>
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295
 80075e8:	b01d      	add	sp, #116	@ 0x74
 80075ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	0598      	lsls	r0, r3, #22
 80075f2:	d4f7      	bmi.n	80075e4 <_vfiprintf_r+0x44>
 80075f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075f6:	f7fe fb97 	bl	8005d28 <__retarget_lock_release_recursive>
 80075fa:	e7f3      	b.n	80075e4 <_vfiprintf_r+0x44>
 80075fc:	2300      	movs	r3, #0
 80075fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007600:	2320      	movs	r3, #32
 8007602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007606:	2330      	movs	r3, #48	@ 0x30
 8007608:	f04f 0901 	mov.w	r9, #1
 800760c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007610:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80077bc <_vfiprintf_r+0x21c>
 8007614:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007618:	4623      	mov	r3, r4
 800761a:	469a      	mov	sl, r3
 800761c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007620:	b10a      	cbz	r2, 8007626 <_vfiprintf_r+0x86>
 8007622:	2a25      	cmp	r2, #37	@ 0x25
 8007624:	d1f9      	bne.n	800761a <_vfiprintf_r+0x7a>
 8007626:	ebba 0b04 	subs.w	fp, sl, r4
 800762a:	d00b      	beq.n	8007644 <_vfiprintf_r+0xa4>
 800762c:	465b      	mov	r3, fp
 800762e:	4622      	mov	r2, r4
 8007630:	4629      	mov	r1, r5
 8007632:	4630      	mov	r0, r6
 8007634:	f7ff ffa2 	bl	800757c <__sfputs_r>
 8007638:	3001      	adds	r0, #1
 800763a:	f000 80a7 	beq.w	800778c <_vfiprintf_r+0x1ec>
 800763e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007640:	445a      	add	r2, fp
 8007642:	9209      	str	r2, [sp, #36]	@ 0x24
 8007644:	f89a 3000 	ldrb.w	r3, [sl]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 809f 	beq.w	800778c <_vfiprintf_r+0x1ec>
 800764e:	2300      	movs	r3, #0
 8007650:	f04f 32ff 	mov.w	r2, #4294967295
 8007654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007658:	f10a 0a01 	add.w	sl, sl, #1
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	9307      	str	r3, [sp, #28]
 8007660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007664:	931a      	str	r3, [sp, #104]	@ 0x68
 8007666:	4654      	mov	r4, sl
 8007668:	2205      	movs	r2, #5
 800766a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800766e:	4853      	ldr	r0, [pc, #332]	@ (80077bc <_vfiprintf_r+0x21c>)
 8007670:	f7fe fb5b 	bl	8005d2a <memchr>
 8007674:	9a04      	ldr	r2, [sp, #16]
 8007676:	b9d8      	cbnz	r0, 80076b0 <_vfiprintf_r+0x110>
 8007678:	06d1      	lsls	r1, r2, #27
 800767a:	bf44      	itt	mi
 800767c:	2320      	movmi	r3, #32
 800767e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007682:	0713      	lsls	r3, r2, #28
 8007684:	bf44      	itt	mi
 8007686:	232b      	movmi	r3, #43	@ 0x2b
 8007688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800768c:	f89a 3000 	ldrb.w	r3, [sl]
 8007690:	2b2a      	cmp	r3, #42	@ 0x2a
 8007692:	d015      	beq.n	80076c0 <_vfiprintf_r+0x120>
 8007694:	4654      	mov	r4, sl
 8007696:	2000      	movs	r0, #0
 8007698:	f04f 0c0a 	mov.w	ip, #10
 800769c:	9a07      	ldr	r2, [sp, #28]
 800769e:	4621      	mov	r1, r4
 80076a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a4:	3b30      	subs	r3, #48	@ 0x30
 80076a6:	2b09      	cmp	r3, #9
 80076a8:	d94b      	bls.n	8007742 <_vfiprintf_r+0x1a2>
 80076aa:	b1b0      	cbz	r0, 80076da <_vfiprintf_r+0x13a>
 80076ac:	9207      	str	r2, [sp, #28]
 80076ae:	e014      	b.n	80076da <_vfiprintf_r+0x13a>
 80076b0:	eba0 0308 	sub.w	r3, r0, r8
 80076b4:	fa09 f303 	lsl.w	r3, r9, r3
 80076b8:	4313      	orrs	r3, r2
 80076ba:	46a2      	mov	sl, r4
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	e7d2      	b.n	8007666 <_vfiprintf_r+0xc6>
 80076c0:	9b03      	ldr	r3, [sp, #12]
 80076c2:	1d19      	adds	r1, r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	9103      	str	r1, [sp, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfbb      	ittet	lt
 80076cc:	425b      	neglt	r3, r3
 80076ce:	f042 0202 	orrlt.w	r2, r2, #2
 80076d2:	9307      	strge	r3, [sp, #28]
 80076d4:	9307      	strlt	r3, [sp, #28]
 80076d6:	bfb8      	it	lt
 80076d8:	9204      	strlt	r2, [sp, #16]
 80076da:	7823      	ldrb	r3, [r4, #0]
 80076dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80076de:	d10a      	bne.n	80076f6 <_vfiprintf_r+0x156>
 80076e0:	7863      	ldrb	r3, [r4, #1]
 80076e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076e4:	d132      	bne.n	800774c <_vfiprintf_r+0x1ac>
 80076e6:	9b03      	ldr	r3, [sp, #12]
 80076e8:	3402      	adds	r4, #2
 80076ea:	1d1a      	adds	r2, r3, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	9203      	str	r2, [sp, #12]
 80076f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076f4:	9305      	str	r3, [sp, #20]
 80076f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80077c0 <_vfiprintf_r+0x220>
 80076fa:	2203      	movs	r2, #3
 80076fc:	4650      	mov	r0, sl
 80076fe:	7821      	ldrb	r1, [r4, #0]
 8007700:	f7fe fb13 	bl	8005d2a <memchr>
 8007704:	b138      	cbz	r0, 8007716 <_vfiprintf_r+0x176>
 8007706:	2240      	movs	r2, #64	@ 0x40
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	eba0 000a 	sub.w	r0, r0, sl
 800770e:	4082      	lsls	r2, r0
 8007710:	4313      	orrs	r3, r2
 8007712:	3401      	adds	r4, #1
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771a:	2206      	movs	r2, #6
 800771c:	4829      	ldr	r0, [pc, #164]	@ (80077c4 <_vfiprintf_r+0x224>)
 800771e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007722:	f7fe fb02 	bl	8005d2a <memchr>
 8007726:	2800      	cmp	r0, #0
 8007728:	d03f      	beq.n	80077aa <_vfiprintf_r+0x20a>
 800772a:	4b27      	ldr	r3, [pc, #156]	@ (80077c8 <_vfiprintf_r+0x228>)
 800772c:	bb1b      	cbnz	r3, 8007776 <_vfiprintf_r+0x1d6>
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	3307      	adds	r3, #7
 8007732:	f023 0307 	bic.w	r3, r3, #7
 8007736:	3308      	adds	r3, #8
 8007738:	9303      	str	r3, [sp, #12]
 800773a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800773c:	443b      	add	r3, r7
 800773e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007740:	e76a      	b.n	8007618 <_vfiprintf_r+0x78>
 8007742:	460c      	mov	r4, r1
 8007744:	2001      	movs	r0, #1
 8007746:	fb0c 3202 	mla	r2, ip, r2, r3
 800774a:	e7a8      	b.n	800769e <_vfiprintf_r+0xfe>
 800774c:	2300      	movs	r3, #0
 800774e:	f04f 0c0a 	mov.w	ip, #10
 8007752:	4619      	mov	r1, r3
 8007754:	3401      	adds	r4, #1
 8007756:	9305      	str	r3, [sp, #20]
 8007758:	4620      	mov	r0, r4
 800775a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800775e:	3a30      	subs	r2, #48	@ 0x30
 8007760:	2a09      	cmp	r2, #9
 8007762:	d903      	bls.n	800776c <_vfiprintf_r+0x1cc>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0c6      	beq.n	80076f6 <_vfiprintf_r+0x156>
 8007768:	9105      	str	r1, [sp, #20]
 800776a:	e7c4      	b.n	80076f6 <_vfiprintf_r+0x156>
 800776c:	4604      	mov	r4, r0
 800776e:	2301      	movs	r3, #1
 8007770:	fb0c 2101 	mla	r1, ip, r1, r2
 8007774:	e7f0      	b.n	8007758 <_vfiprintf_r+0x1b8>
 8007776:	ab03      	add	r3, sp, #12
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	462a      	mov	r2, r5
 800777c:	4630      	mov	r0, r6
 800777e:	4b13      	ldr	r3, [pc, #76]	@ (80077cc <_vfiprintf_r+0x22c>)
 8007780:	a904      	add	r1, sp, #16
 8007782:	f7fd fd91 	bl	80052a8 <_printf_float>
 8007786:	4607      	mov	r7, r0
 8007788:	1c78      	adds	r0, r7, #1
 800778a:	d1d6      	bne.n	800773a <_vfiprintf_r+0x19a>
 800778c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800778e:	07d9      	lsls	r1, r3, #31
 8007790:	d405      	bmi.n	800779e <_vfiprintf_r+0x1fe>
 8007792:	89ab      	ldrh	r3, [r5, #12]
 8007794:	059a      	lsls	r2, r3, #22
 8007796:	d402      	bmi.n	800779e <_vfiprintf_r+0x1fe>
 8007798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800779a:	f7fe fac5 	bl	8005d28 <__retarget_lock_release_recursive>
 800779e:	89ab      	ldrh	r3, [r5, #12]
 80077a0:	065b      	lsls	r3, r3, #25
 80077a2:	f53f af1f 	bmi.w	80075e4 <_vfiprintf_r+0x44>
 80077a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077a8:	e71e      	b.n	80075e8 <_vfiprintf_r+0x48>
 80077aa:	ab03      	add	r3, sp, #12
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	462a      	mov	r2, r5
 80077b0:	4630      	mov	r0, r6
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <_vfiprintf_r+0x22c>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	f7fe f815 	bl	80057e4 <_printf_i>
 80077ba:	e7e4      	b.n	8007786 <_vfiprintf_r+0x1e6>
 80077bc:	08007c3e 	.word	0x08007c3e
 80077c0:	08007c44 	.word	0x08007c44
 80077c4:	08007c48 	.word	0x08007c48
 80077c8:	080052a9 	.word	0x080052a9
 80077cc:	0800757d 	.word	0x0800757d

080077d0 <__swbuf_r>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	460e      	mov	r6, r1
 80077d4:	4614      	mov	r4, r2
 80077d6:	4605      	mov	r5, r0
 80077d8:	b118      	cbz	r0, 80077e2 <__swbuf_r+0x12>
 80077da:	6a03      	ldr	r3, [r0, #32]
 80077dc:	b90b      	cbnz	r3, 80077e2 <__swbuf_r+0x12>
 80077de:	f7fe f9ab 	bl	8005b38 <__sinit>
 80077e2:	69a3      	ldr	r3, [r4, #24]
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	071a      	lsls	r2, r3, #28
 80077ea:	d501      	bpl.n	80077f0 <__swbuf_r+0x20>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	b943      	cbnz	r3, 8007802 <__swbuf_r+0x32>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4628      	mov	r0, r5
 80077f4:	f000 f82a 	bl	800784c <__swsetup_r>
 80077f8:	b118      	cbz	r0, 8007802 <__swbuf_r+0x32>
 80077fa:	f04f 37ff 	mov.w	r7, #4294967295
 80077fe:	4638      	mov	r0, r7
 8007800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	6922      	ldr	r2, [r4, #16]
 8007806:	b2f6      	uxtb	r6, r6
 8007808:	1a98      	subs	r0, r3, r2
 800780a:	6963      	ldr	r3, [r4, #20]
 800780c:	4637      	mov	r7, r6
 800780e:	4283      	cmp	r3, r0
 8007810:	dc05      	bgt.n	800781e <__swbuf_r+0x4e>
 8007812:	4621      	mov	r1, r4
 8007814:	4628      	mov	r0, r5
 8007816:	f7ff fdeb 	bl	80073f0 <_fflush_r>
 800781a:	2800      	cmp	r0, #0
 800781c:	d1ed      	bne.n	80077fa <__swbuf_r+0x2a>
 800781e:	68a3      	ldr	r3, [r4, #8]
 8007820:	3b01      	subs	r3, #1
 8007822:	60a3      	str	r3, [r4, #8]
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	6022      	str	r2, [r4, #0]
 800782a:	701e      	strb	r6, [r3, #0]
 800782c:	6962      	ldr	r2, [r4, #20]
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	429a      	cmp	r2, r3
 8007832:	d004      	beq.n	800783e <__swbuf_r+0x6e>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	07db      	lsls	r3, r3, #31
 8007838:	d5e1      	bpl.n	80077fe <__swbuf_r+0x2e>
 800783a:	2e0a      	cmp	r6, #10
 800783c:	d1df      	bne.n	80077fe <__swbuf_r+0x2e>
 800783e:	4621      	mov	r1, r4
 8007840:	4628      	mov	r0, r5
 8007842:	f7ff fdd5 	bl	80073f0 <_fflush_r>
 8007846:	2800      	cmp	r0, #0
 8007848:	d0d9      	beq.n	80077fe <__swbuf_r+0x2e>
 800784a:	e7d6      	b.n	80077fa <__swbuf_r+0x2a>

0800784c <__swsetup_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4b29      	ldr	r3, [pc, #164]	@ (80078f4 <__swsetup_r+0xa8>)
 8007850:	4605      	mov	r5, r0
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	460c      	mov	r4, r1
 8007856:	b118      	cbz	r0, 8007860 <__swsetup_r+0x14>
 8007858:	6a03      	ldr	r3, [r0, #32]
 800785a:	b90b      	cbnz	r3, 8007860 <__swsetup_r+0x14>
 800785c:	f7fe f96c 	bl	8005b38 <__sinit>
 8007860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007864:	0719      	lsls	r1, r3, #28
 8007866:	d422      	bmi.n	80078ae <__swsetup_r+0x62>
 8007868:	06da      	lsls	r2, r3, #27
 800786a:	d407      	bmi.n	800787c <__swsetup_r+0x30>
 800786c:	2209      	movs	r2, #9
 800786e:	602a      	str	r2, [r5, #0]
 8007870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	e033      	b.n	80078e4 <__swsetup_r+0x98>
 800787c:	0758      	lsls	r0, r3, #29
 800787e:	d512      	bpl.n	80078a6 <__swsetup_r+0x5a>
 8007880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007882:	b141      	cbz	r1, 8007896 <__swsetup_r+0x4a>
 8007884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007888:	4299      	cmp	r1, r3
 800788a:	d002      	beq.n	8007892 <__swsetup_r+0x46>
 800788c:	4628      	mov	r0, r5
 800788e:	f7ff f8b7 	bl	8006a00 <_free_r>
 8007892:	2300      	movs	r3, #0
 8007894:	6363      	str	r3, [r4, #52]	@ 0x34
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	2300      	movs	r3, #0
 80078a0:	6063      	str	r3, [r4, #4]
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f043 0308 	orr.w	r3, r3, #8
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	b94b      	cbnz	r3, 80078c6 <__swsetup_r+0x7a>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078bc:	d003      	beq.n	80078c6 <__swsetup_r+0x7a>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 f882 	bl	80079ca <__smakebuf_r>
 80078c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ca:	f013 0201 	ands.w	r2, r3, #1
 80078ce:	d00a      	beq.n	80078e6 <__swsetup_r+0x9a>
 80078d0:	2200      	movs	r2, #0
 80078d2:	60a2      	str	r2, [r4, #8]
 80078d4:	6962      	ldr	r2, [r4, #20]
 80078d6:	4252      	negs	r2, r2
 80078d8:	61a2      	str	r2, [r4, #24]
 80078da:	6922      	ldr	r2, [r4, #16]
 80078dc:	b942      	cbnz	r2, 80078f0 <__swsetup_r+0xa4>
 80078de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078e2:	d1c5      	bne.n	8007870 <__swsetup_r+0x24>
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	0799      	lsls	r1, r3, #30
 80078e8:	bf58      	it	pl
 80078ea:	6962      	ldrpl	r2, [r4, #20]
 80078ec:	60a2      	str	r2, [r4, #8]
 80078ee:	e7f4      	b.n	80078da <__swsetup_r+0x8e>
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7f7      	b.n	80078e4 <__swsetup_r+0x98>
 80078f4:	20000018 	.word	0x20000018

080078f8 <_raise_r>:
 80078f8:	291f      	cmp	r1, #31
 80078fa:	b538      	push	{r3, r4, r5, lr}
 80078fc:	4605      	mov	r5, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	d904      	bls.n	800790c <_raise_r+0x14>
 8007902:	2316      	movs	r3, #22
 8007904:	6003      	str	r3, [r0, #0]
 8007906:	f04f 30ff 	mov.w	r0, #4294967295
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800790e:	b112      	cbz	r2, 8007916 <_raise_r+0x1e>
 8007910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007914:	b94b      	cbnz	r3, 800792a <_raise_r+0x32>
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f830 	bl	800797c <_getpid_r>
 800791c:	4622      	mov	r2, r4
 800791e:	4601      	mov	r1, r0
 8007920:	4628      	mov	r0, r5
 8007922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007926:	f000 b817 	b.w	8007958 <_kill_r>
 800792a:	2b01      	cmp	r3, #1
 800792c:	d00a      	beq.n	8007944 <_raise_r+0x4c>
 800792e:	1c59      	adds	r1, r3, #1
 8007930:	d103      	bne.n	800793a <_raise_r+0x42>
 8007932:	2316      	movs	r3, #22
 8007934:	6003      	str	r3, [r0, #0]
 8007936:	2001      	movs	r0, #1
 8007938:	e7e7      	b.n	800790a <_raise_r+0x12>
 800793a:	2100      	movs	r1, #0
 800793c:	4620      	mov	r0, r4
 800793e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007942:	4798      	blx	r3
 8007944:	2000      	movs	r0, #0
 8007946:	e7e0      	b.n	800790a <_raise_r+0x12>

08007948 <raise>:
 8007948:	4b02      	ldr	r3, [pc, #8]	@ (8007954 <raise+0xc>)
 800794a:	4601      	mov	r1, r0
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	f7ff bfd3 	b.w	80078f8 <_raise_r>
 8007952:	bf00      	nop
 8007954:	20000018 	.word	0x20000018

08007958 <_kill_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	2300      	movs	r3, #0
 800795c:	4d06      	ldr	r5, [pc, #24]	@ (8007978 <_kill_r+0x20>)
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	f7f9 fbf8 	bl	800115a <_kill>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d102      	bne.n	8007974 <_kill_r+0x1c>
 800796e:	682b      	ldr	r3, [r5, #0]
 8007970:	b103      	cbz	r3, 8007974 <_kill_r+0x1c>
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	bd38      	pop	{r3, r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	200005a0 	.word	0x200005a0

0800797c <_getpid_r>:
 800797c:	f7f9 bbe6 	b.w	800114c <_getpid>

08007980 <__swhatbuf_r>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	4615      	mov	r5, r2
 800798a:	2900      	cmp	r1, #0
 800798c:	461e      	mov	r6, r3
 800798e:	b096      	sub	sp, #88	@ 0x58
 8007990:	da0c      	bge.n	80079ac <__swhatbuf_r+0x2c>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	2100      	movs	r1, #0
 8007996:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800799a:	bf14      	ite	ne
 800799c:	2340      	movne	r3, #64	@ 0x40
 800799e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079a2:	2000      	movs	r0, #0
 80079a4:	6031      	str	r1, [r6, #0]
 80079a6:	602b      	str	r3, [r5, #0]
 80079a8:	b016      	add	sp, #88	@ 0x58
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	466a      	mov	r2, sp
 80079ae:	f000 f849 	bl	8007a44 <_fstat_r>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	dbed      	blt.n	8007992 <__swhatbuf_r+0x12>
 80079b6:	9901      	ldr	r1, [sp, #4]
 80079b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079c0:	4259      	negs	r1, r3
 80079c2:	4159      	adcs	r1, r3
 80079c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079c8:	e7eb      	b.n	80079a2 <__swhatbuf_r+0x22>

080079ca <__smakebuf_r>:
 80079ca:	898b      	ldrh	r3, [r1, #12]
 80079cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ce:	079d      	lsls	r5, r3, #30
 80079d0:	4606      	mov	r6, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	d507      	bpl.n	80079e6 <__smakebuf_r+0x1c>
 80079d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	2301      	movs	r3, #1
 80079e0:	6163      	str	r3, [r4, #20]
 80079e2:	b003      	add	sp, #12
 80079e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e6:	466a      	mov	r2, sp
 80079e8:	ab01      	add	r3, sp, #4
 80079ea:	f7ff ffc9 	bl	8007980 <__swhatbuf_r>
 80079ee:	9f00      	ldr	r7, [sp, #0]
 80079f0:	4605      	mov	r5, r0
 80079f2:	4639      	mov	r1, r7
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7ff f875 	bl	8006ae4 <_malloc_r>
 80079fa:	b948      	cbnz	r0, 8007a10 <__smakebuf_r+0x46>
 80079fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a00:	059a      	lsls	r2, r3, #22
 8007a02:	d4ee      	bmi.n	80079e2 <__smakebuf_r+0x18>
 8007a04:	f023 0303 	bic.w	r3, r3, #3
 8007a08:	f043 0302 	orr.w	r3, r3, #2
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	e7e2      	b.n	80079d6 <__smakebuf_r+0xc>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	9b01      	ldr	r3, [sp, #4]
 8007a1e:	6020      	str	r0, [r4, #0]
 8007a20:	b15b      	cbz	r3, 8007a3a <__smakebuf_r+0x70>
 8007a22:	4630      	mov	r0, r6
 8007a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a28:	f000 f81e 	bl	8007a68 <_isatty_r>
 8007a2c:	b128      	cbz	r0, 8007a3a <__smakebuf_r+0x70>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f023 0303 	bic.w	r3, r3, #3
 8007a34:	f043 0301 	orr.w	r3, r3, #1
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	431d      	orrs	r5, r3
 8007a3e:	81a5      	strh	r5, [r4, #12]
 8007a40:	e7cf      	b.n	80079e2 <__smakebuf_r+0x18>
	...

08007a44 <_fstat_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	2300      	movs	r3, #0
 8007a48:	4d06      	ldr	r5, [pc, #24]	@ (8007a64 <_fstat_r+0x20>)
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	f7f9 fbe1 	bl	8001218 <_fstat>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d102      	bne.n	8007a60 <_fstat_r+0x1c>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	b103      	cbz	r3, 8007a60 <_fstat_r+0x1c>
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	bd38      	pop	{r3, r4, r5, pc}
 8007a62:	bf00      	nop
 8007a64:	200005a0 	.word	0x200005a0

08007a68 <_isatty_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4d05      	ldr	r5, [pc, #20]	@ (8007a84 <_isatty_r+0x1c>)
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	f7f9 fbdf 	bl	8001236 <_isatty>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_isatty_r+0x1a>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_isatty_r+0x1a>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	200005a0 	.word	0x200005a0

08007a88 <_init>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr

08007a94 <_fini>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr
