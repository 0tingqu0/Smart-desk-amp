
led_text_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08007fc8  08007fc8  00008fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800838c  0800838c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800838c  0800838c  0000938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008394  08008394  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008394  08008394  00009394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008398  08008398  00009398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800839c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001d4  08008570  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08008570  0000a4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc82  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc4  00000000  00000000  00019e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001cb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bca  00000000  00000000  0001da90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040fb  00000000  00000000  0001e65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013755  00000000  00000000  00022755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091802  00000000  00000000  00035eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c76ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f1c  00000000  00000000  000c76f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000cc60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fb0 	.word	0x08007fb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007fb0 	.word	0x08007fb0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <hal_ledpwm>:

extern uint32_t led;

/*确定范围*/
void hal_ledpwm(uint32_t a)
  {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	  if (a<=0)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d109      	bne.n	8000b4a <hal_ledpwm+0x22>
	  {
		  led=0;
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <hal_ledpwm+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
		  MX_TIM1_Init();
 8000b3c:	f000 fc24 	bl	8001388 <MX_TIM1_Init>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000b40:	2100      	movs	r1, #0
 8000b42:	4813      	ldr	r0, [pc, #76]	@ (8000b90 <hal_ledpwm+0x68>)
 8000b44:	f002 ff2a 	bl	800399c <HAL_TIM_PWM_Stop>
	  {
		  led=a;
		  MX_TIM1_Init();
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);//输出tim1的pwm波
	  }
  }
 8000b48:	e01b      	b.n	8000b82 <hal_ledpwm+0x5a>
	  else if (a>=100)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b63      	cmp	r3, #99	@ 0x63
 8000b4e:	d909      	bls.n	8000b64 <hal_ledpwm+0x3c>
		  led=99.9;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <hal_ledpwm+0x64>)
 8000b52:	2263      	movs	r2, #99	@ 0x63
 8000b54:	601a      	str	r2, [r3, #0]
		  MX_TIM1_Init();
 8000b56:	f000 fc17 	bl	8001388 <MX_TIM1_Init>
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);//输出tim1的pwm波
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <hal_ledpwm+0x68>)
 8000b5e:	f002 fe7b 	bl	8003858 <HAL_TIM_PWM_Start>
  }
 8000b62:	e00e      	b.n	8000b82 <hal_ledpwm+0x5a>
	  else if(a>0&&a<100)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00b      	beq.n	8000b82 <hal_ledpwm+0x5a>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b63      	cmp	r3, #99	@ 0x63
 8000b6e:	d808      	bhi.n	8000b82 <hal_ledpwm+0x5a>
		  led=a;
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <hal_ledpwm+0x64>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
		  MX_TIM1_Init();
 8000b76:	f000 fc07 	bl	8001388 <MX_TIM1_Init>
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);//输出tim1的pwm波
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <hal_ledpwm+0x68>)
 8000b7e:	f002 fe6b 	bl	8003858 <HAL_TIM_PWM_Start>
  }
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000026c 	.word	0x2000026c
 8000b90:	20000270 	.word	0x20000270

08000b94 <hal_detect_Closeup_human>:
/**
 * @brief 检测是否有人
 * @note 传感器有人时输出低电平（GPIOB0为RESET），无人时高电平（SET）
 */
bool hal_detect_Closeup_human(void)//近距离0-10mm
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==SET)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <hal_detect_Closeup_human+0x1c>)
 8000b9c:	f002 f808 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d101      	bne.n	8000baa <hal_detect_Closeup_human+0x16>
	{
		return false;//无人
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <hal_detect_Closeup_human+0x18>
	}
	else
	{
		return true;//有人
 8000baa:	2301      	movs	r3, #1
	}
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000bc6:	4a19      	ldr	r2, [pc, #100]	@ (8000c2c <MX_ADC1_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000bde:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000be2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be4:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf0:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000bf2:	f000 fee3 	bl	80019bc <HAL_ADC_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bfc:	f000 fa47 	bl	800108e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_ADC1_Init+0x74>)
 8000c12:	f001 fa3d 	bl	8002090 <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c1c:	f000 fa37 	bl	800108e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200001f0 	.word	0x200001f0
 8000c2c:	40012400 	.word	0x40012400

08000c30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <HAL_ADC_MspInit+0x7c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d129      	bne.n	8000ca4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a16      	ldr	r2, [pc, #88]	@ (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a10      	ldr	r2, [pc, #64]	@ (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ao_Pin;
 8000c80:	2302      	movs	r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c84:	2303      	movs	r3, #3
 8000c86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ao_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <HAL_ADC_MspInit+0x84>)
 8000c90:	f001 fe0a 	bl	80028a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2101      	movs	r1, #1
 8000c98:	2012      	movs	r0, #18
 8000c9a:	f001 fd1c 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c9e:	2012      	movs	r0, #18
 8000ca0:	f001 fd35 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40012400 	.word	0x40012400
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b37      	ldr	r3, [pc, #220]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a36      	ldr	r2, [pc, #216]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b34      	ldr	r3, [pc, #208]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce4:	4b31      	ldr	r3, [pc, #196]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a30      	ldr	r2, [pc, #192]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000cea:	f043 0320 	orr.w	r3, r3, #32
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a2a      	ldr	r2, [pc, #168]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a24      	ldr	r2, [pc, #144]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <MX_GPIO_Init+0xf4>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d32:	481f      	ldr	r0, [pc, #124]	@ (8000db0 <MX_GPIO_Init+0xf8>)
 8000d34:	f001 ff53 	bl	8002bde <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4817      	ldr	r0, [pc, #92]	@ (8000db0 <MX_GPIO_Init+0xf8>)
 8000d52:	f001 fda9 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : red_Pin key1_Pin key2_Pin key3_Pin
                           key4_Pin */
  GPIO_InitStruct.Pin = red_Pin|key1_Pin|key2_Pin|key3_Pin
 8000d56:	f24f 0301 	movw	r3, #61441	@ 0xf001
 8000d5a:	613b      	str	r3, [r7, #16]
                          |key4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <MX_GPIO_Init+0xfc>)
 8000d6c:	f001 fd9c 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : key5_Pin */
  GPIO_InitStruct.Pin = key5_Pin;
 8000d70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(key5_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000d86:	f001 fd8f 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8a:	23c0      	movs	r3, #192	@ 0xc0
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_GPIO_Init+0xfc>)
 8000d9e:	f001 fd83 	bl	80028a8 <HAL_GPIO_Init>

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40010800 	.word	0x40010800

08000dbc <Apply_Sliding_Filter>:
//    HAL_ResumeTick();
//#endif
//}

/* 滑动窗口滤波 */
int Apply_Sliding_Filter(int new_value) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    filter_sum -= filter_buffer[filter_index];
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <Apply_Sliding_Filter+0x68>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <Apply_Sliding_Filter+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <Apply_Sliding_Filter+0x70>)
 8000dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	4a13      	ldr	r2, [pc, #76]	@ (8000e24 <Apply_Sliding_Filter+0x68>)
 8000dd8:	6013      	str	r3, [r2, #0]
    filter_buffer[filter_index] = new_value;
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <Apply_Sliding_Filter+0x6c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <Apply_Sliding_Filter+0x70>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    filter_sum += new_value;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <Apply_Sliding_Filter+0x68>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <Apply_Sliding_Filter+0x68>)
 8000df2:	6013      	str	r3, [r2, #0]
    filter_index = (filter_index + 1) % SLIDING_WINDOW_SIZE;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <Apply_Sliding_Filter+0x6c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	425a      	negs	r2, r3
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	f002 020f 	and.w	r2, r2, #15
 8000e04:	bf58      	it	pl
 8000e06:	4253      	negpl	r3, r2
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <Apply_Sliding_Filter+0x6c>)
 8000e0c:	701a      	strb	r2, [r3, #0]
    return filter_sum / SLIDING_WINDOW_SIZE;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <Apply_Sliding_Filter+0x68>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da00      	bge.n	8000e18 <Apply_Sliding_Filter+0x5c>
 8000e16:	330f      	adds	r3, #15
 8000e18:	111b      	asrs	r3, r3, #4
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	20000264 	.word	0x20000264
 8000e28:	20000260 	.word	0x20000260
 8000e2c:	20000220 	.word	0x20000220

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b092      	sub	sp, #72	@ 0x48
 8000e34:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	int value = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	double  voltage  = 0.0;
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	e9c7 2308 	strd	r2, r3, [r7, #32]
	char message[32] = "";
 8000e46:	463b      	mov	r3, r7
 8000e48:	2220      	movs	r2, #32
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 ffca 	bl	8005de6 <memset>
	uint32_t i=0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
	long int mean_value=0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	@ 0x38
	double mean_voltage=0.0;
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f000 fd23 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f000 f8b5 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // 检查HSI时钟状态
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8000e6e:	4b56      	ldr	r3, [pc, #344]	@ (8000fc8 <main+0x198>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <main+0x4e>
  Error_Handler();
 8000e7a:	f000 f908 	bl	800108e <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f7ff ff1b 	bl	8000cb8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e82:	f7ff fe97 	bl	8000bb4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e86:	f000 fa7f 	bl	8001388 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e8a:	f000 fb25 	bl	80014d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000e8e:	f000 fbfd 	bl	800168c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e92:	f000 fc25 	bl	80016e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000e96:	484d      	ldr	r0, [pc, #308]	@ (8000fcc <main+0x19c>)
 8000e98:	f001 fa8e 	bl	80023b8 <HAL_ADCEx_Calibration_Start>
  {

//	  key_control();

	    // 启动ADC转换并等待完成
	    HAL_ADC_Start(&hadc1);  // 单次模式需每次启动
 8000e9c:	484b      	ldr	r0, [pc, #300]	@ (8000fcc <main+0x19c>)
 8000e9e:	f000 fe65 	bl	8001b6c <HAL_ADC_Start>
	    //Enter_LowPower_Mode();//低功耗会导致无法烧录

	    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000ea2:	2164      	movs	r1, #100	@ 0x64
 8000ea4:	4849      	ldr	r0, [pc, #292]	@ (8000fcc <main+0x19c>)
 8000ea6:	f000 ff0f 	bl	8001cc8 <HAL_ADC_PollForConversion>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d16d      	bne.n	8000f8c <main+0x15c>
	               value = Apply_Sliding_Filter(HAL_ADC_GetValue(&hadc1));
 8000eb0:	4846      	ldr	r0, [pc, #280]	@ (8000fcc <main+0x19c>)
 8000eb2:	f001 f80f 	bl	8001ed4 <HAL_ADC_GetValue>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff7f 	bl	8000dbc <Apply_Sliding_Filter>
 8000ebe:	62f8      	str	r0, [r7, #44]	@ 0x2c
	               mean_value += value;
 8000ec0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec4:	4413      	add	r3, r2
 8000ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
	               voltage = (value / 4095.0) * 3.3;
 8000ec8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000eca:	f7ff fa9b 	bl	8000404 <__aeabi_i2d>
 8000ece:	a33a      	add	r3, pc, #232	@ (adr r3, 8000fb8 <main+0x188>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff fc2a 	bl	800072c <__aeabi_ddiv>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	a337      	add	r3, pc, #220	@ (adr r3, 8000fc0 <main+0x190>)
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	f7ff faf7 	bl	80004d8 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	               mean_voltage += voltage;
 8000ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ef6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000efa:	f7ff f937 	bl	800016c <__adddf3>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	               i++;
 8000f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f08:	3301      	adds	r3, #1
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	               if (i == 1023) {
 8000f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f0e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d13c      	bne.n	8000f90 <main+0x160>
	                   mean_value /= i;
 8000f16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
	                   mean_voltage /= i;
 8000f20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000f22:	f7ff fa5f 	bl	80003e4 <__aeabi_ui2d>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000f2e:	f7ff fbfd 	bl	800072c <__aeabi_ddiv>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	                   snprintf(message, sizeof(message), "ADC:%ld V:%.2f",mean_value, (float)mean_voltage);
 8000f3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000f3e:	f7ff fda3 	bl	8000a88 <__aeabi_d2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa6f 	bl	8000428 <__aeabi_f2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4638      	mov	r0, r7
 8000f50:	e9cd 2300 	strd	r2, r3, [sp]
 8000f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f56:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <main+0x1a0>)
 8000f58:	2120      	movs	r1, #32
 8000f5a:	f004 fecb 	bl	8005cf4 <sniprintf>
	                   // 直接发送数据
	                   HAL_UART_Transmit(&huart1, (uint8_t*)message,strnlen(message, sizeof(message)), 100);
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2120      	movs	r1, #32
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 ff47 	bl	8005df6 <strnlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4639      	mov	r1, r7
 8000f6e:	2364      	movs	r3, #100	@ 0x64
 8000f70:	4818      	ldr	r0, [pc, #96]	@ (8000fd4 <main+0x1a4>)
 8000f72:	f003 fbde 	bl	8004732 <HAL_UART_Transmit>

	                   i = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
	                   mean_value = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
	                   mean_voltage = 0.0;
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000f8a:	e001      	b.n	8000f90 <main+0x160>
	               }
	           }
	    else {
	               Error_Handler();
 8000f8c:	f000 f87f 	bl	800108e <Error_Handler>
	           }

	  if (hal_detect_Closeup_human())//判断人
 8000f90:	f7ff fe00 	bl	8000b94 <hal_detect_Closeup_human>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <main+0x17a>
	    {
		  hal_ledpwm(50);//调pwm波
 8000f9a:	2032      	movs	r0, #50	@ 0x32
 8000f9c:	f7ff fdc4 	bl	8000b28 <hal_ledpwm>
//		  HAL_ADC_Start_IT(&hadc1);
		  HAL_Delay(500);
 8000fa0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fa4:	f000 fce6 	bl	8001974 <HAL_Delay>
 8000fa8:	e778      	b.n	8000e9c <main+0x6c>

	   }
	  else {

		  hal_ledpwm(0);//调pwm波
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff fdbc 	bl	8000b28 <hal_ledpwm>
	    HAL_ADC_Start(&hadc1);  // 单次模式需每次启动
 8000fb0:	e774      	b.n	8000e9c <main+0x6c>
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40affe00 	.word	0x40affe00
 8000fc0:	66666666 	.word	0x66666666
 8000fc4:	400a6666 	.word	0x400a6666
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	200001f0 	.word	0x200001f0
 8000fd0:	08007fc8 	.word	0x08007fc8
 8000fd4:	20000300 	.word	0x20000300

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	@ 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe2:	2228      	movs	r2, #40	@ 0x28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fefd 	bl	8005de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001016:	2301      	movs	r3, #1
 8001018:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001024:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fdee 	bl	8002c10 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800103a:	f000 f828 	bl	800108e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800104e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f002 f85a 	bl	8003114 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001066:	f000 f812 	bl	800108e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800106a:	2302      	movs	r3, #2
 800106c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800106e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001072:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f9da 	bl	8003430 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001082:	f000 f804 	bl	800108e <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	@ 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001092:	b672      	cpsid	i
}
 8001094:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001096:	bf00      	nop
 8001098:	e7fd      	b.n	8001096 <Error_Handler+0x8>
	...

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_MspInit+0x5c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <HAL_MspInit+0x5c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <HAL_MspInit+0x5c>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <HAL_MspInit+0x5c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_MspInit+0x60>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_MspInit+0x60>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <NMI_Handler+0x4>

08001108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <MemManage_Handler+0x4>

08001118 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <UsageFault_Handler+0x4>

08001128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 fbf4 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <ADC1_2_IRQHandler+0x10>)
 800115e:	f000 fec5 	bl	8001eec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001f0 	.word	0x200001f0

0800116c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <TIM1_BRK_IRQHandler+0x10>)
 8001172:	f002 fc77 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000270 	.word	0x20000270

08001180 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <TIM1_UP_IRQHandler+0x10>)
 8001186:	f002 fc6d 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000270 	.word	0x20000270

08001194 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <TIM1_TRG_COM_IRQHandler+0x10>)
 800119a:	f002 fc63 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000270 	.word	0x20000270

080011a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <TIM1_CC_IRQHandler+0x10>)
 80011ae:	f002 fc59 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000270 	.word	0x20000270

080011bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <TIM2_IRQHandler+0x10>)
 80011c2:	f002 fc4f 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002b8 	.word	0x200002b8

080011d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <USART1_IRQHandler+0x10>)
 80011d6:	f003 fb37 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000300 	.word	0x20000300

080011e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <USART3_IRQHandler+0x10>)
 80011ea:	f003 fb2d 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000348 	.word	0x20000348

080011f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return 1;
 80011fc:	2301      	movs	r3, #1
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <_kill>:

int _kill(int pid, int sig)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001210:	f004 fe48 	bl	8005ea4 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	2216      	movs	r2, #22
 8001218:	601a      	str	r2, [r3, #0]
  return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_exit>:

void _exit (int status)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800122e:	f04f 31ff 	mov.w	r1, #4294967295
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffe7 	bl	8001206 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <_exit+0x12>

0800123c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
  }

  return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e009      	b.n	800129c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf1      	blt.n	8001288 <_write+0x12>
  }
  return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_close>:

int _close(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d4:	605a      	str	r2, [r3, #4]
  return 0;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <_isatty>:

int _isatty(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
	...

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	@ (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f004 fdb0 	bl	8005ea4 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20005000 	.word	0x20005000
 8001370:	00000400 	.word	0x00000400
 8001374:	20000268 	.word	0x20000268
 8001378:	200004e0 	.word	0x200004e0

0800137c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b096      	sub	sp, #88	@ 0x58
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2220      	movs	r2, #32
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 fd10 	bl	8005de6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <MX_TIM1_Init+0x144>)
 80013c8:	4a41      	ldr	r2, [pc, #260]	@ (80014d0 <MX_TIM1_Init+0x148>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80013cc:	4b3f      	ldr	r3, [pc, #252]	@ (80014cc <MX_TIM1_Init+0x144>)
 80013ce:	2247      	movs	r2, #71	@ 0x47
 80013d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <MX_TIM1_Init+0x144>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80013d8:	4b3c      	ldr	r3, [pc, #240]	@ (80014cc <MX_TIM1_Init+0x144>)
 80013da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b3a      	ldr	r3, [pc, #232]	@ (80014cc <MX_TIM1_Init+0x144>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013e6:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <MX_TIM1_Init+0x144>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ec:	4b37      	ldr	r3, [pc, #220]	@ (80014cc <MX_TIM1_Init+0x144>)
 80013ee:	2280      	movs	r2, #128	@ 0x80
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013f2:	4836      	ldr	r0, [pc, #216]	@ (80014cc <MX_TIM1_Init+0x144>)
 80013f4:	f002 f988 	bl	8003708 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013fe:	f7ff fe46 	bl	800108e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001406:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800140c:	4619      	mov	r1, r3
 800140e:	482f      	ldr	r0, [pc, #188]	@ (80014cc <MX_TIM1_Init+0x144>)
 8001410:	f002 fcda 	bl	8003dc8 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800141a:	f7ff fe38 	bl	800108e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800141e:	482b      	ldr	r0, [pc, #172]	@ (80014cc <MX_TIM1_Init+0x144>)
 8001420:	f002 f9c1 	bl	80037a6 <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800142a:	f7ff fe30 	bl	800108e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001436:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800143a:	4619      	mov	r1, r3
 800143c:	4823      	ldr	r0, [pc, #140]	@ (80014cc <MX_TIM1_Init+0x144>)
 800143e:	f003 f867 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001448:	f7ff fe21 	bl	800108e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	@ 0x60
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = led*10;
 8001450:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <MX_TIM1_Init+0x14c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001466:	2304      	movs	r3, #4
 8001468:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4814      	ldr	r0, [pc, #80]	@ (80014cc <MX_TIM1_Init+0x144>)
 800147c:	f002 fbe2 	bl	8003c44 <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001486:	f7ff fe02 	bl	800108e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	@ (80014cc <MX_TIM1_Init+0x144>)
 80014ae:	f003 f88d 	bl	80045cc <HAL_TIMEx_ConfigBreakDeadTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80014b8:	f7ff fde9 	bl	800108e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <MX_TIM1_Init+0x144>)
 80014be:	f000 f8b1 	bl	8001624 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3758      	adds	r7, #88	@ 0x58
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000270 	.word	0x20000270
 80014d0:	40012c00 	.word	0x40012c00
 80014d4:	2000026c 	.word	0x2000026c

080014d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <MX_TIM2_Init+0x98>)
 80014f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <MX_TIM2_Init+0x98>)
 80014fe:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <MX_TIM2_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <MX_TIM2_Init+0x98>)
 800150c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <MX_TIM2_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_TIM2_Init+0x98>)
 800151a:	2280      	movs	r2, #128	@ 0x80
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800151e:	4814      	ldr	r0, [pc, #80]	@ (8001570 <MX_TIM2_Init+0x98>)
 8001520:	f002 f8f2 	bl	8003708 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800152a:	f7ff fdb0 	bl	800108e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	@ (8001570 <MX_TIM2_Init+0x98>)
 800153c:	f002 fc44 	bl	8003dc8 <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001546:	f7ff fda2 	bl	800108e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	@ (8001570 <MX_TIM2_Init+0x98>)
 8001558:	f002 ffda 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001562:	f7ff fd94 	bl	800108e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200002b8 	.word	0x200002b8

08001574 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a26      	ldr	r2, [pc, #152]	@ (800161c <HAL_TIM_Base_MspInit+0xa8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12c      	bne.n	80015e0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <HAL_TIM_Base_MspInit+0xac>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a25      	ldr	r2, [pc, #148]	@ (8001620 <HAL_TIM_Base_MspInit+0xac>)
 800158c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <HAL_TIM_Base_MspInit+0xac>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2018      	movs	r0, #24
 80015a4:	f001 f897 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80015a8:	2018      	movs	r0, #24
 80015aa:	f001 f8b0 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2102      	movs	r1, #2
 80015b2:	2019      	movs	r0, #25
 80015b4:	f001 f88f 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80015b8:	2019      	movs	r0, #25
 80015ba:	f001 f8a8 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	201a      	movs	r0, #26
 80015c4:	f001 f887 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80015c8:	201a      	movs	r0, #26
 80015ca:	f001 f8a0 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	201b      	movs	r0, #27
 80015d4:	f001 f87f 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80015d8:	201b      	movs	r0, #27
 80015da:	f001 f898 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015de:	e018      	b.n	8001612 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e8:	d113      	bne.n	8001612 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <HAL_TIM_Base_MspInit+0xac>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001620 <HAL_TIM_Base_MspInit+0xac>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_TIM_Base_MspInit+0xac>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2103      	movs	r1, #3
 8001606:	201c      	movs	r0, #28
 8001608:	f001 f865 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800160c:	201c      	movs	r0, #28
 800160e:	f001 f87e 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012c00 	.word	0x40012c00
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a10      	ldr	r2, [pc, #64]	@ (8001680 <HAL_TIM_MspPostInit+0x5c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d118      	bne.n	8001676 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_TIM_MspPostInit+0x60>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_TIM_MspPostInit+0x60>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_TIM_MspPostInit+0x60>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = led_Pin;
 800165c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2302      	movs	r3, #2
 8001668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <HAL_TIM_MspPostInit+0x64>)
 8001672:	f001 f919 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800

0800168c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <MX_USART1_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016c4:	f002 ffe5 	bl	8004692 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f7ff fcde 	bl	800108e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000300 	.word	0x20000300
 80016dc:	40013800 	.word	0x40013800

080016e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <MX_USART3_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 80016ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_USART3_UART_Init+0x4c>)
 8001718:	f002 ffbb 	bl	8004692 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f7ff fcb4 	bl	800108e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000348 	.word	0x20000348
 8001730:	40004800 	.word	0x40004800

08001734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a40      	ldr	r2, [pc, #256]	@ (8001850 <HAL_UART_MspInit+0x11c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d13a      	bne.n	80017ca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001754:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <HAL_UART_MspInit+0x120>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a3e      	ldr	r2, [pc, #248]	@ (8001854 <HAL_UART_MspInit+0x120>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <HAL_UART_MspInit+0x120>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <HAL_UART_MspInit+0x120>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a38      	ldr	r2, [pc, #224]	@ (8001854 <HAL_UART_MspInit+0x120>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b36      	ldr	r3, [pc, #216]	@ (8001854 <HAL_UART_MspInit+0x120>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	4619      	mov	r1, r3
 8001798:	482f      	ldr	r0, [pc, #188]	@ (8001858 <HAL_UART_MspInit+0x124>)
 800179a:	f001 f885 	bl	80028a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800179e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4829      	ldr	r0, [pc, #164]	@ (8001858 <HAL_UART_MspInit+0x124>)
 80017b4:	f001 f878 	bl	80028a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2105      	movs	r1, #5
 80017bc:	2025      	movs	r0, #37	@ 0x25
 80017be:	f000 ff8a 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017c2:	2025      	movs	r0, #37	@ 0x25
 80017c4:	f000 ffa3 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017c8:	e03e      	b.n	8001848 <HAL_UART_MspInit+0x114>
  else if(uartHandle->Instance==USART3)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a23      	ldr	r2, [pc, #140]	@ (800185c <HAL_UART_MspInit+0x128>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d139      	bne.n	8001848 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <HAL_UART_MspInit+0x120>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001854 <HAL_UART_MspInit+0x120>)
 80017da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017de:	61d3      	str	r3, [r2, #28]
 80017e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_UART_MspInit+0x120>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_UART_MspInit+0x120>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <HAL_UART_MspInit+0x120>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_UART_MspInit+0x120>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001804:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 0318 	add.w	r3, r7, #24
 8001816:	4619      	mov	r1, r3
 8001818:	4811      	ldr	r0, [pc, #68]	@ (8001860 <HAL_UART_MspInit+0x12c>)
 800181a:	f001 f845 	bl	80028a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800181e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	4619      	mov	r1, r3
 8001832:	480b      	ldr	r0, [pc, #44]	@ (8001860 <HAL_UART_MspInit+0x12c>)
 8001834:	f001 f838 	bl	80028a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 4, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2104      	movs	r1, #4
 800183c:	2027      	movs	r0, #39	@ 0x27
 800183e:	f000 ff4a 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001842:	2027      	movs	r0, #39	@ 0x27
 8001844:	f000 ff63 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40013800 	.word	0x40013800
 8001854:	40021000 	.word	0x40021000
 8001858:	40010800 	.word	0x40010800
 800185c:	40004800 	.word	0x40004800
 8001860:	40010c00 	.word	0x40010c00

08001864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001864:	f7ff fd8a 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480b      	ldr	r0, [pc, #44]	@ (8001898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800186a:	490c      	ldr	r1, [pc, #48]	@ (800189c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800186c:	4a0c      	ldr	r2, [pc, #48]	@ (80018a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001880:	4c09      	ldr	r4, [pc, #36]	@ (80018a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f004 fb0f 	bl	8005eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001892:	f7ff facd 	bl	8000e30 <main>
  bx lr
 8001896:	4770      	bx	lr
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018a0:	0800839c 	.word	0x0800839c
  ldr r2, =_sbss
 80018a4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018a8:	200004e0 	.word	0x200004e0

080018ac <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <CAN1_RX1_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <HAL_Init+0x28>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	@ (80018d8 <HAL_Init+0x28>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 fefd 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fbe6 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 ff15 	bl	800272a <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 fedd 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	@ (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	20000008 	.word	0x20000008
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_IncTick+0x1c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_IncTick+0x20>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a03      	ldr	r2, [pc, #12]	@ (800195c <HAL_IncTick+0x20>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000008 	.word	0x20000008
 800195c:	20000390 	.word	0x20000390

08001960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b02      	ldr	r3, [pc, #8]	@ (8001970 <HAL_GetTick+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	20000390 	.word	0x20000390

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff fff0 	bl	8001960 <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffe0 	bl	8001960 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008

080019bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0be      	b.n	8001b5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff f918 	bl	8000c30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fc97 	bl	8002334 <ADC_ConversionStop_Disable>
 8001a06:	4603      	mov	r3, r0
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 8099 	bne.w	8001b4a <HAL_ADC_Init+0x18e>
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 8095 	bne.w	8001b4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a28:	f023 0302 	bic.w	r3, r3, #2
 8001a2c:	f043 0202 	orr.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7b1b      	ldrb	r3, [r3, #12]
 8001a42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a54:	d003      	beq.n	8001a5e <HAL_ADC_Init+0xa2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d102      	bne.n	8001a64 <HAL_ADC_Init+0xa8>
 8001a5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_Init+0xaa>
 8001a64:	2300      	movs	r3, #0
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7d1b      	ldrb	r3, [r3, #20]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d119      	bne.n	8001aa8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	035a      	lsls	r2, r3, #13
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a94:	f043 0220 	orr.w	r2, r3, #32
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_ADC_Init+0x1a8>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad8:	d003      	beq.n	8001ae2 <HAL_ADC_Init+0x126>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d104      	bne.n	8001aec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	051b      	lsls	r3, r3, #20
 8001aea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <HAL_ADC_Init+0x1ac>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b26:	e018      	b.n	8001b5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	f023 0312 	bic.w	r3, r3, #18
 8001b30:	f043 0210 	orr.w	r2, r3, #16
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b48:	e007      	b.n	8001b5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	ffe1f7fd 	.word	0xffe1f7fd
 8001b68:	ff1f0efe 	.word	0xff1f0efe

08001b6c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Start+0x1a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e098      	b.n	8001cb8 <HAL_ADC_Start+0x14c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fb76 	bl	8002280 <ADC_Enable>
 8001b94:	4603      	mov	r3, r0
 8001b96:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 8087 	bne.w	8001cae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a41      	ldr	r2, [pc, #260]	@ (8001cc0 <HAL_ADC_Start+0x154>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d105      	bne.n	8001bca <HAL_ADC_Start+0x5e>
 8001bbe:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <HAL_ADC_Start+0x158>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d115      	bne.n	8001bf6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d026      	beq.n	8001c32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bf4:	e01d      	b.n	8001c32 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2f      	ldr	r2, [pc, #188]	@ (8001cc4 <HAL_ADC_Start+0x158>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d004      	beq.n	8001c16 <HAL_ADC_Start+0xaa>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc0 <HAL_ADC_Start+0x154>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10d      	bne.n	8001c32 <HAL_ADC_Start+0xc6>
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_ADC_Start+0x158>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c42:	f023 0206 	bic.w	r2, r3, #6
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c4a:	e002      	b.n	8001c52 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f06f 0202 	mvn.w	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c72:	d113      	bne.n	8001c9c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c78:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <HAL_ADC_Start+0x154>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d105      	bne.n	8001c8a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_ADC_Start+0x158>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	e00c      	b.n	8001cb6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	e003      	b.n	8001cb6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40012800 	.word	0x40012800
 8001cc4:	40012400 	.word	0x40012400

08001cc8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cde:	f7ff fe3f 	bl	8001960 <HAL_GetTick>
 8001ce2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	f043 0220 	orr.w	r2, r3, #32
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0d3      	b.n	8001eb2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d131      	bne.n	8001d7c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d12a      	bne.n	8001d7c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d26:	e021      	b.n	8001d6c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2e:	d01d      	beq.n	8001d6c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_ADC_PollForConversion+0x7e>
 8001d36:	f7ff fe13 	bl	8001960 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d212      	bcs.n	8001d6c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	f043 0204 	orr.w	r2, r3, #4
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0a2      	b.n	8001eb2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0d6      	beq.n	8001d28 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d7a:	e070      	b.n	8001e5e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001ebc <HAL_ADC_PollForConversion+0x1f4>)
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	2002      	movs	r0, #2
 8001d82:	f001 fc0b 	bl	800359c <HAL_RCCEx_GetPeriphCLKFreq>
 8001d86:	4603      	mov	r3, r0
 8001d88:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6919      	ldr	r1, [r3, #16]
 8001d92:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec0 <HAL_ADC_PollForConversion+0x1f8>)
 8001d94:	400b      	ands	r3, r1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_ADC_PollForConversion+0x104>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68d9      	ldr	r1, [r3, #12]
 8001da0:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <HAL_ADC_PollForConversion+0x1fc>)
 8001da2:	400b      	ands	r3, r1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d111      	bne.n	8001dcc <HAL_ADC_PollForConversion+0x104>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	4b46      	ldr	r3, [pc, #280]	@ (8001ec8 <HAL_ADC_PollForConversion+0x200>)
 8001db0:	400b      	ands	r3, r1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d108      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x100>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	4b43      	ldr	r3, [pc, #268]	@ (8001ecc <HAL_ADC_PollForConversion+0x204>)
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x100>
 8001dc4:	2314      	movs	r3, #20
 8001dc6:	e020      	b.n	8001e0a <HAL_ADC_PollForConversion+0x142>
 8001dc8:	2329      	movs	r3, #41	@ 0x29
 8001dca:	e01e      	b.n	8001e0a <HAL_ADC_PollForConversion+0x142>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_ADC_PollForConversion+0x200>)
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_ADC_PollForConversion+0x120>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68d9      	ldr	r1, [r3, #12]
 8001de0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <HAL_ADC_PollForConversion+0x204>)
 8001de2:	400b      	ands	r3, r1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00d      	beq.n	8001e04 <HAL_ADC_PollForConversion+0x13c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	4b38      	ldr	r3, [pc, #224]	@ (8001ed0 <HAL_ADC_PollForConversion+0x208>)
 8001df0:	400b      	ands	r3, r1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d108      	bne.n	8001e08 <HAL_ADC_PollForConversion+0x140>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68d9      	ldr	r1, [r3, #12]
 8001dfc:	4b34      	ldr	r3, [pc, #208]	@ (8001ed0 <HAL_ADC_PollForConversion+0x208>)
 8001dfe:	400b      	ands	r3, r1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_PollForConversion+0x140>
 8001e04:	2354      	movs	r3, #84	@ 0x54
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_PollForConversion+0x142>
 8001e08:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e10:	e021      	b.n	8001e56 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d01a      	beq.n	8001e50 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_ADC_PollForConversion+0x168>
 8001e20:	f7ff fd9e 	bl	8001960 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d20f      	bcs.n	8001e50 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d90b      	bls.n	8001e50 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e030      	b.n	8001eb2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3301      	adds	r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d8d9      	bhi.n	8001e12 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0212 	mvn.w	r2, #18
 8001e66:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e7e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e82:	d115      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d111      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	24924924 	.word	0x24924924
 8001ec4:	00924924 	.word	0x00924924
 8001ec8:	12492492 	.word	0x12492492
 8001ecc:	00492492 	.word	0x00492492
 8001ed0:	00249249 	.word	0x00249249

08001ed4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03e      	beq.n	8001f8c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d039      	beq.n	8001f8c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f3a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f3e:	d11d      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d119      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0220 	bic.w	r2, r2, #32
 8001f56:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f874 	bl	800206a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0212 	mvn.w	r2, #18
 8001f8a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d04d      	beq.n	8002032 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d048      	beq.n	8002032 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001fc2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001fc6:	d012      	beq.n	8001fee <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d125      	bne.n	8002022 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fe0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fe4:	d11d      	bne.n	8002022 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d119      	bne.n	8002022 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ffc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fa76 	bl	8002514 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 020c 	mvn.w	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d012      	beq.n	8002062 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f812 	bl	800207c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0201 	mvn.w	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x20>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e0dc      	b.n	800226a <HAL_ADC_ConfigChannel+0x1da>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	d81c      	bhi.n	80020fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3b05      	subs	r3, #5
 80020d2:	221f      	movs	r2, #31
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	4019      	ands	r1, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3b05      	subs	r3, #5
 80020ec:	fa00 f203 	lsl.w	r2, r0, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80020f8:	e03c      	b.n	8002174 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d81c      	bhi.n	800213c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b23      	subs	r3, #35	@ 0x23
 8002114:	221f      	movs	r2, #31
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	4019      	ands	r1, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3b23      	subs	r3, #35	@ 0x23
 800212e:	fa00 f203 	lsl.w	r2, r0, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	631a      	str	r2, [r3, #48]	@ 0x30
 800213a:	e01b      	b.n	8002174 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3b41      	subs	r3, #65	@ 0x41
 800214e:	221f      	movs	r2, #31
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	4019      	ands	r1, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3b41      	subs	r3, #65	@ 0x41
 8002168:	fa00 f203 	lsl.w	r2, r0, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d91c      	bls.n	80021b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68d9      	ldr	r1, [r3, #12]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	3b1e      	subs	r3, #30
 800218e:	2207      	movs	r2, #7
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	4019      	ands	r1, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6898      	ldr	r0, [r3, #8]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	3b1e      	subs	r3, #30
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	e019      	b.n	80021ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6919      	ldr	r1, [r3, #16]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	2207      	movs	r2, #7
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4019      	ands	r1, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6898      	ldr	r0, [r3, #8]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	fa00 f203 	lsl.w	r2, r0, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d003      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021f6:	2b11      	cmp	r3, #17
 80021f8:	d132      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002274 <HAL_ADC_ConfigChannel+0x1e4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d125      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d126      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002220:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b10      	cmp	r3, #16
 8002228:	d11a      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <HAL_ADC_ConfigChannel+0x1e8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a13      	ldr	r2, [pc, #76]	@ (800227c <HAL_ADC_ConfigChannel+0x1ec>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	0c9a      	lsrs	r2, r3, #18
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002240:	e002      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	3b01      	subs	r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f9      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x1b2>
 800224e:	e007      	b.n	8002260 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	f043 0220 	orr.w	r2, r3, #32
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40012400 	.word	0x40012400
 8002278:	20000000 	.word	0x20000000
 800227c:	431bde83 	.word	0x431bde83

08002280 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d040      	beq.n	8002320 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ae:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <ADC_Enable+0xac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002330 <ADC_Enable+0xb0>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	0c9b      	lsrs	r3, r3, #18
 80022ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022bc:	e002      	b.n	80022c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ca:	f7ff fb49 	bl	8001960 <HAL_GetTick>
 80022ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022d0:	e01f      	b.n	8002312 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022d2:	f7ff fb45 	bl	8001960 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d918      	bls.n	8002312 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d011      	beq.n	8002312 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e007      	b.n	8002322 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d1d8      	bne.n	80022d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000000 	.word	0x20000000
 8002330:	431bde83 	.word	0x431bde83

08002334 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d12e      	bne.n	80023ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800235e:	f7ff faff 	bl	8001960 <HAL_GetTick>
 8002362:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002364:	e01b      	b.n	800239e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002366:	f7ff fafb 	bl	8001960 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d914      	bls.n	800239e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10d      	bne.n	800239e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e007      	b.n	80023ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d0dc      	beq.n	8002366 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADCEx_Calibration_Start+0x1e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e097      	b.n	8002506 <HAL_ADCEx_Calibration_Start+0x14e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa8 	bl	8002334 <ADC_ConversionStop_Disable>
 80023e4:	4603      	mov	r3, r0
 80023e6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff49 	bl	8002280 <ADC_Enable>
 80023ee:	4603      	mov	r3, r0
 80023f0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 8081 	bne.w	80024fc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002402:	f023 0302 	bic.w	r3, r3, #2
 8002406:	f043 0202 	orr.w	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800240e:	4b40      	ldr	r3, [pc, #256]	@ (8002510 <HAL_ADCEx_Calibration_Start+0x158>)
 8002410:	681c      	ldr	r4, [r3, #0]
 8002412:	2002      	movs	r0, #2
 8002414:	f001 f8c2 	bl	800359c <HAL_RCCEx_GetPeriphCLKFreq>
 8002418:	4603      	mov	r3, r0
 800241a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800241e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002420:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002422:	e002      	b.n	800242a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3b01      	subs	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f9      	bne.n	8002424 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0208 	orr.w	r2, r2, #8
 800243e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002440:	f7ff fa8e 	bl	8001960 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002446:	e01b      	b.n	8002480 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002448:	f7ff fa8a 	bl	8001960 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d914      	bls.n	8002480 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00d      	beq.n	8002480 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	f023 0312 	bic.w	r3, r3, #18
 800246c:	f043 0210 	orr.w	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e042      	b.n	8002506 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1dc      	bne.n	8002448 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0204 	orr.w	r2, r2, #4
 800249c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800249e:	f7ff fa5f 	bl	8001960 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024a4:	e01b      	b.n	80024de <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80024a6:	f7ff fa5b 	bl	8001960 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b0a      	cmp	r3, #10
 80024b2:	d914      	bls.n	80024de <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	f023 0312 	bic.w	r3, r3, #18
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e013      	b.n	8002506 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1dc      	bne.n	80024a6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	f023 0303 	bic.w	r3, r3, #3
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002504:	7dfb      	ldrb	r3, [r7, #23]
}
 8002506:	4618      	mov	r0, r3
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd90      	pop	{r4, r7, pc}
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000

08002514 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
	...

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4906      	ldr	r1, [pc, #24]	@ (80025c0 <__NVIC_EnableIRQ+0x34>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	@ (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	@ (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	@ 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff90 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff2d 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff42 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff90 	bl	8002618 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5f 	bl	80025c4 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff35 	bl	800258c <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d008      	beq.n	800276c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2204      	movs	r2, #4
 800275e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e020      	b.n	80027ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 020e 	bic.w	r2, r2, #14
 800277a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f202 	lsl.w	r2, r1, r2
 800279a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d005      	beq.n	80027dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2204      	movs	r2, #4
 80027d4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e051      	b.n	8002880 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 020e 	bic.w	r2, r2, #14
 80027ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a22      	ldr	r2, [pc, #136]	@ (800288c <HAL_DMA_Abort_IT+0xd4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d029      	beq.n	800285a <HAL_DMA_Abort_IT+0xa2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a21      	ldr	r2, [pc, #132]	@ (8002890 <HAL_DMA_Abort_IT+0xd8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <HAL_DMA_Abort_IT+0x9e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1f      	ldr	r2, [pc, #124]	@ (8002894 <HAL_DMA_Abort_IT+0xdc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01a      	beq.n	8002850 <HAL_DMA_Abort_IT+0x98>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1e      	ldr	r2, [pc, #120]	@ (8002898 <HAL_DMA_Abort_IT+0xe0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d012      	beq.n	800284a <HAL_DMA_Abort_IT+0x92>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1c      	ldr	r2, [pc, #112]	@ (800289c <HAL_DMA_Abort_IT+0xe4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00a      	beq.n	8002844 <HAL_DMA_Abort_IT+0x8c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1b      	ldr	r2, [pc, #108]	@ (80028a0 <HAL_DMA_Abort_IT+0xe8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d102      	bne.n	800283e <HAL_DMA_Abort_IT+0x86>
 8002838:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800283c:	e00e      	b.n	800285c <HAL_DMA_Abort_IT+0xa4>
 800283e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002842:	e00b      	b.n	800285c <HAL_DMA_Abort_IT+0xa4>
 8002844:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002848:	e008      	b.n	800285c <HAL_DMA_Abort_IT+0xa4>
 800284a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800284e:	e005      	b.n	800285c <HAL_DMA_Abort_IT+0xa4>
 8002850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002854:	e002      	b.n	800285c <HAL_DMA_Abort_IT+0xa4>
 8002856:	2310      	movs	r3, #16
 8002858:	e000      	b.n	800285c <HAL_DMA_Abort_IT+0xa4>
 800285a:	2301      	movs	r3, #1
 800285c:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_DMA_Abort_IT+0xec>)
 800285e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
    } 
  }
  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40020008 	.word	0x40020008
 8002890:	4002001c 	.word	0x4002001c
 8002894:	40020030 	.word	0x40020030
 8002898:	40020044 	.word	0x40020044
 800289c:	40020058 	.word	0x40020058
 80028a0:	4002006c 	.word	0x4002006c
 80028a4:	40020000 	.word	0x40020000

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b08b      	sub	sp, #44	@ 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	e169      	b.n	8002b90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028bc:	2201      	movs	r2, #1
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 8158 	bne.w	8002b8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a9a      	ldr	r2, [pc, #616]	@ (8002b48 <HAL_GPIO_Init+0x2a0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d05e      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028e4:	4a98      	ldr	r2, [pc, #608]	@ (8002b48 <HAL_GPIO_Init+0x2a0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d875      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 80028ea:	4a98      	ldr	r2, [pc, #608]	@ (8002b4c <HAL_GPIO_Init+0x2a4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d058      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028f0:	4a96      	ldr	r2, [pc, #600]	@ (8002b4c <HAL_GPIO_Init+0x2a4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d86f      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 80028f6:	4a96      	ldr	r2, [pc, #600]	@ (8002b50 <HAL_GPIO_Init+0x2a8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d052      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028fc:	4a94      	ldr	r2, [pc, #592]	@ (8002b50 <HAL_GPIO_Init+0x2a8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d869      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 8002902:	4a94      	ldr	r2, [pc, #592]	@ (8002b54 <HAL_GPIO_Init+0x2ac>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d04c      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 8002908:	4a92      	ldr	r2, [pc, #584]	@ (8002b54 <HAL_GPIO_Init+0x2ac>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d863      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 800290e:	4a92      	ldr	r2, [pc, #584]	@ (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d046      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 8002914:	4a90      	ldr	r2, [pc, #576]	@ (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d85d      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 800291a:	2b12      	cmp	r3, #18
 800291c:	d82a      	bhi.n	8002974 <HAL_GPIO_Init+0xcc>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d859      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 8002922:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <HAL_GPIO_Init+0x80>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	080029a3 	.word	0x080029a3
 800292c:	0800297d 	.word	0x0800297d
 8002930:	0800298f 	.word	0x0800298f
 8002934:	080029d1 	.word	0x080029d1
 8002938:	080029d7 	.word	0x080029d7
 800293c:	080029d7 	.word	0x080029d7
 8002940:	080029d7 	.word	0x080029d7
 8002944:	080029d7 	.word	0x080029d7
 8002948:	080029d7 	.word	0x080029d7
 800294c:	080029d7 	.word	0x080029d7
 8002950:	080029d7 	.word	0x080029d7
 8002954:	080029d7 	.word	0x080029d7
 8002958:	080029d7 	.word	0x080029d7
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029d7 	.word	0x080029d7
 8002964:	080029d7 	.word	0x080029d7
 8002968:	080029d7 	.word	0x080029d7
 800296c:	08002985 	.word	0x08002985
 8002970:	08002999 	.word	0x08002999
 8002974:	4a79      	ldr	r2, [pc, #484]	@ (8002b5c <HAL_GPIO_Init+0x2b4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297a:	e02c      	b.n	80029d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e029      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	3304      	adds	r3, #4
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e024      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	3308      	adds	r3, #8
 8002994:	623b      	str	r3, [r7, #32]
          break;
 8002996:	e01f      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	330c      	adds	r3, #12
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e01a      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029aa:	2304      	movs	r3, #4
 80029ac:	623b      	str	r3, [r7, #32]
          break;
 80029ae:	e013      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b8:	2308      	movs	r3, #8
 80029ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	611a      	str	r2, [r3, #16]
          break;
 80029c2:	e009      	b.n	80029d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	615a      	str	r2, [r3, #20]
          break;
 80029ce:	e003      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          break;
 80029d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2bff      	cmp	r3, #255	@ 0xff
 80029dc:	d801      	bhi.n	80029e2 <HAL_GPIO_Init+0x13a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	e001      	b.n	80029e6 <HAL_GPIO_Init+0x13e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2bff      	cmp	r3, #255	@ 0xff
 80029ec:	d802      	bhi.n	80029f4 <HAL_GPIO_Init+0x14c>
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x152>
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	3b08      	subs	r3, #8
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	210f      	movs	r1, #15
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b1 	beq.w	8002b8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a28:	4b4d      	ldr	r3, [pc, #308]	@ (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b4a      	ldr	r3, [pc, #296]	@ (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a40:	4a48      	ldr	r2, [pc, #288]	@ (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a40      	ldr	r2, [pc, #256]	@ (8002b68 <HAL_GPIO_Init+0x2c0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_GPIO_Init+0x1ec>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b6c <HAL_GPIO_Init+0x2c4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00d      	beq.n	8002a90 <HAL_GPIO_Init+0x1e8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3e      	ldr	r2, [pc, #248]	@ (8002b70 <HAL_GPIO_Init+0x2c8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d007      	beq.n	8002a8c <HAL_GPIO_Init+0x1e4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_GPIO_Init+0x1e0>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	e004      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a94:	2300      	movs	r3, #0
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	f002 0203 	and.w	r2, r2, #3
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	4093      	lsls	r3, r2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aa6:	492f      	ldr	r1, [pc, #188]	@ (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	492c      	ldr	r1, [pc, #176]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ace:	4b2a      	ldr	r3, [pc, #168]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	4928      	ldr	r1, [pc, #160]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ae8:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	4922      	ldr	r1, [pc, #136]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60cb      	str	r3, [r1, #12]
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	491e      	ldr	r1, [pc, #120]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b10:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4918      	ldr	r1, [pc, #96]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b1e:	4b16      	ldr	r3, [pc, #88]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4914      	ldr	r1, [pc, #80]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d021      	beq.n	8002b7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	490e      	ldr	r1, [pc, #56]	@ (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
 8002b44:	e021      	b.n	8002b8a <HAL_GPIO_Init+0x2e2>
 8002b46:	bf00      	nop
 8002b48:	10320000 	.word	0x10320000
 8002b4c:	10310000 	.word	0x10310000
 8002b50:	10220000 	.word	0x10220000
 8002b54:	10210000 	.word	0x10210000
 8002b58:	10120000 	.word	0x10120000
 8002b5c:	10110000 	.word	0x10110000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40010800 	.word	0x40010800
 8002b6c:	40010c00 	.word	0x40010c00
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4909      	ldr	r1, [pc, #36]	@ (8002bac <HAL_GPIO_Init+0x304>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f47f ae8e 	bne.w	80028bc <HAL_GPIO_Init+0x14>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	372c      	adds	r7, #44	@ 0x2c
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40010400 	.word	0x40010400

08002bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
 8002bea:	4613      	mov	r3, r2
 8002bec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bee:	787b      	ldrb	r3, [r7, #1]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bfa:	e003      	b.n	8002c04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	041a      	lsls	r2, r3, #16
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	611a      	str	r2, [r3, #16]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e272      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8087 	beq.w	8002d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c30:	4b92      	ldr	r3, [pc, #584]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d00c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c3c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d112      	bne.n	8002c6e <HAL_RCC_OscConfig+0x5e>
 8002c48:	4b8c      	ldr	r3, [pc, #560]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c54:	d10b      	bne.n	8002c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c56:	4b89      	ldr	r3, [pc, #548]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d06c      	beq.n	8002d3c <HAL_RCC_OscConfig+0x12c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d168      	bne.n	8002d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e24c      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x76>
 8002c78:	4b80      	ldr	r3, [pc, #512]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a7f      	ldr	r2, [pc, #508]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e02e      	b.n	8002ce4 <HAL_RCC_OscConfig+0xd4>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x98>
 8002c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a7a      	ldr	r2, [pc, #488]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b78      	ldr	r3, [pc, #480]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a77      	ldr	r2, [pc, #476]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e01d      	b.n	8002ce4 <HAL_RCC_OscConfig+0xd4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0xbc>
 8002cb2:	4b72      	ldr	r3, [pc, #456]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a71      	ldr	r2, [pc, #452]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCC_OscConfig+0xd4>
 8002ccc:	4b6b      	ldr	r3, [pc, #428]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b68      	ldr	r3, [pc, #416]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a67      	ldr	r2, [pc, #412]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ce2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d013      	beq.n	8002d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe fe38 	bl	8001960 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fe34 	bl	8001960 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	@ 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e200      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	4b5d      	ldr	r3, [pc, #372]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xe4>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe24 	bl	8001960 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fe20 	bl	8001960 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	@ 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1ec      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2e:	4b53      	ldr	r3, [pc, #332]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x10c>
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d063      	beq.n	8002e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d56:	4b49      	ldr	r3, [pc, #292]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d11c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x18c>
 8002d62:	4b46      	ldr	r3, [pc, #280]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d116      	bne.n	8002d9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	4b43      	ldr	r3, [pc, #268]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_RCC_OscConfig+0x176>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e1c0      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d86:	4b3d      	ldr	r3, [pc, #244]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4939      	ldr	r1, [pc, #228]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	e03a      	b.n	8002e12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d020      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da4:	4b36      	ldr	r3, [pc, #216]	@ (8002e80 <HAL_RCC_OscConfig+0x270>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe fdd9 	bl	8001960 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fdd5 	bl	8001960 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1a1      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4927      	ldr	r1, [pc, #156]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]
 8002de4:	e015      	b.n	8002e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de6:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <HAL_RCC_OscConfig+0x270>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe fdb8 	bl	8001960 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df4:	f7fe fdb4 	bl	8001960 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e180      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03a      	beq.n	8002e94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d019      	beq.n	8002e5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e26:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fd98 	bl	8001960 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e34:	f7fe fd94 	bl	8001960 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e160      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e52:	2001      	movs	r0, #1
 8002e54:	f000 face 	bl	80033f4 <RCC_Delay>
 8002e58:	e01c      	b.n	8002e94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e60:	f7fe fd7e 	bl	8001960 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e66:	e00f      	b.n	8002e88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7fe fd7a 	bl	8001960 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d908      	bls.n	8002e88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e146      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	42420000 	.word	0x42420000
 8002e84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	4b92      	ldr	r3, [pc, #584]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e9      	bne.n	8002e68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a6 	beq.w	8002fee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea6:	4b8b      	ldr	r3, [pc, #556]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10d      	bne.n	8002ece <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	4b88      	ldr	r3, [pc, #544]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4a87      	ldr	r2, [pc, #540]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	61d3      	str	r3, [r2, #28]
 8002ebe:	4b85      	ldr	r3, [pc, #532]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4b82      	ldr	r3, [pc, #520]	@ (80030d8 <HAL_RCC_OscConfig+0x4c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d118      	bne.n	8002f0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eda:	4b7f      	ldr	r3, [pc, #508]	@ (80030d8 <HAL_RCC_OscConfig+0x4c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a7e      	ldr	r2, [pc, #504]	@ (80030d8 <HAL_RCC_OscConfig+0x4c8>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fd3b 	bl	8001960 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7fe fd37 	bl	8001960 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	@ 0x64
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e103      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	4b75      	ldr	r3, [pc, #468]	@ (80030d8 <HAL_RCC_OscConfig+0x4c8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x312>
 8002f14:	4b6f      	ldr	r3, [pc, #444]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a6e      	ldr	r2, [pc, #440]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	e02d      	b.n	8002f7e <HAL_RCC_OscConfig+0x36e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x334>
 8002f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a69      	ldr	r2, [pc, #420]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6213      	str	r3, [r2, #32]
 8002f36:	4b67      	ldr	r3, [pc, #412]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a66      	ldr	r2, [pc, #408]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6213      	str	r3, [r2, #32]
 8002f42:	e01c      	b.n	8002f7e <HAL_RCC_OscConfig+0x36e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCC_OscConfig+0x356>
 8002f4c:	4b61      	ldr	r3, [pc, #388]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4a60      	ldr	r2, [pc, #384]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	6213      	str	r3, [r2, #32]
 8002f58:	4b5e      	ldr	r3, [pc, #376]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	e00b      	b.n	8002f7e <HAL_RCC_OscConfig+0x36e>
 8002f66:	4b5b      	ldr	r3, [pc, #364]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a5a      	ldr	r2, [pc, #360]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6213      	str	r3, [r2, #32]
 8002f72:	4b58      	ldr	r3, [pc, #352]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a57      	ldr	r2, [pc, #348]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d015      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7fe fceb 	bl	8001960 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe fce7 	bl	8001960 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0b1      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0ee      	beq.n	8002f8e <HAL_RCC_OscConfig+0x37e>
 8002fb0:	e014      	b.n	8002fdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe fcd5 	bl	8001960 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fe fcd1 	bl	8001960 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e09b      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd0:	4b40      	ldr	r3, [pc, #256]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ee      	bne.n	8002fba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d105      	bne.n	8002fee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	4a3b      	ldr	r2, [pc, #236]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8087 	beq.w	8003106 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff8:	4b36      	ldr	r3, [pc, #216]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b08      	cmp	r3, #8
 8003002:	d061      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d146      	bne.n	800309a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300c:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <HAL_RCC_OscConfig+0x4cc>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe fca5 	bl	8001960 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe fca1 	bl	8001960 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e06d      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302c:	4b29      	ldr	r3, [pc, #164]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003040:	d108      	bne.n	8003054 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003042:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	4921      	ldr	r1, [pc, #132]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003054:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a19      	ldr	r1, [r3, #32]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	430b      	orrs	r3, r1
 8003066:	491b      	ldr	r1, [pc, #108]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306c:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <HAL_RCC_OscConfig+0x4cc>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe fc75 	bl	8001960 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe fc71 	bl	8001960 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e03d      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x46a>
 8003098:	e035      	b.n	8003106 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <HAL_RCC_OscConfig+0x4cc>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fc5e 	bl	8001960 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fc5a 	bl	8001960 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e026      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x498>
 80030c6:	e01e      	b.n	8003106 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e019      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40007000 	.word	0x40007000
 80030dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <HAL_RCC_OscConfig+0x500>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0d0      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b6a      	ldr	r3, [pc, #424]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d910      	bls.n	8003158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b67      	ldr	r3, [pc, #412]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 0207 	bic.w	r2, r3, #7
 800313e:	4965      	ldr	r1, [pc, #404]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b63      	ldr	r3, [pc, #396]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0b8      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003170:	4b59      	ldr	r3, [pc, #356]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a58      	ldr	r2, [pc, #352]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800317a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003188:	4b53      	ldr	r3, [pc, #332]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a52      	ldr	r2, [pc, #328]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b50      	ldr	r3, [pc, #320]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	494d      	ldr	r1, [pc, #308]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d040      	beq.n	8003234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	4b47      	ldr	r3, [pc, #284]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d115      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b41      	ldr	r3, [pc, #260]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e073      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b3d      	ldr	r3, [pc, #244]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e06b      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b39      	ldr	r3, [pc, #228]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4936      	ldr	r1, [pc, #216]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fe fbac 	bl	8001960 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe fba8 	bl	8001960 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e053      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b27      	ldr	r3, [pc, #156]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d210      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b24      	ldr	r3, [pc, #144]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4922      	ldr	r1, [pc, #136]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e032      	b.n	80032ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003270:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4916      	ldr	r1, [pc, #88]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800328e:	4b12      	ldr	r3, [pc, #72]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	490e      	ldr	r1, [pc, #56]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032a2:	f000 f821 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	490a      	ldr	r1, [pc, #40]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	5ccb      	ldrb	r3, [r1, r3]
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	4a09      	ldr	r2, [pc, #36]	@ (80032e0 <HAL_RCC_ClockConfig+0x1cc>)
 80032bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032be:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_RCC_ClockConfig+0x1d0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fb0a 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	08007fd8 	.word	0x08007fd8
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000004 	.word	0x20000004

080032e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003302:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <HAL_RCC_GetSysClockFreq+0x94>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b04      	cmp	r3, #4
 8003310:	d002      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x30>
 8003312:	2b08      	cmp	r3, #8
 8003314:	d003      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x36>
 8003316:	e027      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003318:	4b19      	ldr	r3, [pc, #100]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x98>)
 800331a:	613b      	str	r3, [r7, #16]
      break;
 800331c:	e027      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	0c9b      	lsrs	r3, r3, #18
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	4a17      	ldr	r2, [pc, #92]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003328:	5cd3      	ldrb	r3, [r2, r3]
 800332a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003336:	4b11      	ldr	r3, [pc, #68]	@ (800337c <HAL_RCC_GetSysClockFreq+0x94>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0c5b      	lsrs	r3, r3, #17
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	4a11      	ldr	r2, [pc, #68]	@ (8003388 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003342:	5cd3      	ldrb	r3, [r2, r3]
 8003344:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a0d      	ldr	r2, [pc, #52]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x98>)
 800334a:	fb03 f202 	mul.w	r2, r3, r2
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	e004      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <HAL_RCC_GetSysClockFreq+0xa4>)
 800335c:	fb02 f303 	mul.w	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	613b      	str	r3, [r7, #16]
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x98>)
 800336a:	613b      	str	r3, [r7, #16]
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	693b      	ldr	r3, [r7, #16]
}
 8003370:	4618      	mov	r0, r3
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	007a1200 	.word	0x007a1200
 8003384:	08007ff0 	.word	0x08007ff0
 8003388:	08008000 	.word	0x08008000
 800338c:	003d0900 	.word	0x003d0900

08003390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b02      	ldr	r3, [pc, #8]	@ (80033a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	20000000 	.word	0x20000000

080033a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a8:	f7ff fff2 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4903      	ldr	r1, [pc, #12]	@ (80033c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08007fe8 	.word	0x08007fe8

080033cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d0:	f7ff ffde 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0adb      	lsrs	r3, r3, #11
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4903      	ldr	r1, [pc, #12]	@ (80033f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	08007fe8 	.word	0x08007fe8

080033f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <RCC_Delay+0x34>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <RCC_Delay+0x38>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0a5b      	lsrs	r3, r3, #9
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003410:	bf00      	nop
  }
  while (Delay --);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1e5a      	subs	r2, r3, #1
 8003416:	60fa      	str	r2, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f9      	bne.n	8003410 <RCC_Delay+0x1c>
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	20000000 	.word	0x20000000
 800342c:	10624dd3 	.word	0x10624dd3

08003430 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d07d      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800344c:	2300      	movs	r3, #0
 800344e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003450:	4b4f      	ldr	r3, [pc, #316]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	4b4c      	ldr	r3, [pc, #304]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	4a4b      	ldr	r2, [pc, #300]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003466:	61d3      	str	r3, [r2, #28]
 8003468:	4b49      	ldr	r3, [pc, #292]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003474:	2301      	movs	r3, #1
 8003476:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b46      	ldr	r3, [pc, #280]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d118      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003484:	4b43      	ldr	r3, [pc, #268]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a42      	ldr	r2, [pc, #264]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003490:	f7fe fa66 	bl	8001960 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	e008      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003498:	f7fe fa62 	bl	8001960 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	@ 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e06d      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034b6:	4b36      	ldr	r3, [pc, #216]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d02e      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d027      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034de:	4b2e      	ldr	r3, [pc, #184]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034ea:	4a29      	ldr	r2, [pc, #164]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d014      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe fa31 	bl	8001960 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	e00a      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fe fa2d 	bl	8001960 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e036      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ee      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003524:	4b1a      	ldr	r3, [pc, #104]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4917      	ldr	r1, [pc, #92]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	4313      	orrs	r3, r2
 8003534:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	4a13      	ldr	r2, [pc, #76]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003546:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	490b      	ldr	r1, [pc, #44]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	4313      	orrs	r3, r2
 8003564:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003572:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4904      	ldr	r1, [pc, #16]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	40007000 	.word	0x40007000
 8003598:	42420440 	.word	0x42420440

0800359c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	f200 808a 	bhi.w	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d045      	beq.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d075      	beq.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80035d2:	e082      	b.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80035d4:	4b46      	ldr	r3, [pc, #280]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035da:	4b45      	ldr	r3, [pc, #276]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d07b      	beq.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	0c9b      	lsrs	r3, r3, #18
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	4a41      	ldr	r2, [pc, #260]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80035f0:	5cd3      	ldrb	r3, [r2, r3]
 80035f2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d015      	beq.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035fe:	4b3c      	ldr	r3, [pc, #240]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0c5b      	lsrs	r3, r3, #17
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	4a3b      	ldr	r2, [pc, #236]	@ (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003618:	4a38      	ldr	r2, [pc, #224]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	e004      	b.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4a34      	ldr	r2, [pc, #208]	@ (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003634:	4b2e      	ldr	r3, [pc, #184]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003640:	d102      	bne.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	61bb      	str	r3, [r7, #24]
      break;
 8003646:	e04a      	b.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
      break;
 8003656:	e042      	b.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003658:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003668:	d108      	bne.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	e01f      	b.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003686:	d109      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003688:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003694:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e00f      	b.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036a6:	d11c      	bne.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036a8:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d016      	beq.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80036b4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80036b8:	61bb      	str	r3, [r7, #24]
      break;
 80036ba:	e012      	b.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036bc:	e011      	b.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036be:	f7ff fe85 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b0a      	ldr	r3, [pc, #40]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	0b9b      	lsrs	r3, r3, #14
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	3301      	adds	r3, #1
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	61bb      	str	r3, [r7, #24]
      break;
 80036d8:	e004      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036e2:	bf00      	nop
    }
  }
  return (frequency);
 80036e4:	69bb      	ldr	r3, [r7, #24]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	08008004 	.word	0x08008004
 80036f8:	08008014 	.word	0x08008014
 80036fc:	007a1200 	.word	0x007a1200
 8003700:	003d0900 	.word	0x003d0900
 8003704:	aaaaaaab 	.word	0xaaaaaaab

08003708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd ff20 	bl	8001574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 fc32 	bl	8003fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e041      	b.n	800383c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f839 	bl	8003844 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 fbe3 	bl	8003fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
	...

08003858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d109      	bne.n	800387c <HAL_TIM_PWM_Start+0x24>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e022      	b.n	80038c2 <HAL_TIM_PWM_Start+0x6a>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d109      	bne.n	8003896 <HAL_TIM_PWM_Start+0x3e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e015      	b.n	80038c2 <HAL_TIM_PWM_Start+0x6a>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d109      	bne.n	80038b0 <HAL_TIM_PWM_Start+0x58>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e008      	b.n	80038c2 <HAL_TIM_PWM_Start+0x6a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e05e      	b.n	8003988 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0x82>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038d8:	e013      	b.n	8003902 <HAL_TIM_PWM_Start+0xaa>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0x92>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e8:	e00b      	b.n	8003902 <HAL_TIM_PWM_Start+0xaa>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_PWM_Start+0xa2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f8:	e003      	b.n	8003902 <HAL_TIM_PWM_Start+0xaa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	6839      	ldr	r1, [r7, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fddc 	bl	80044c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1e      	ldr	r2, [pc, #120]	@ (8003990 <HAL_TIM_PWM_Start+0x138>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d107      	bne.n	800392a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a18      	ldr	r2, [pc, #96]	@ (8003990 <HAL_TIM_PWM_Start+0x138>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_TIM_PWM_Start+0xfa>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d009      	beq.n	8003952 <HAL_TIM_PWM_Start+0xfa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <HAL_TIM_PWM_Start+0x13c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_TIM_PWM_Start+0xfa>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a12      	ldr	r2, [pc, #72]	@ (8003998 <HAL_TIM_PWM_Start+0x140>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d111      	bne.n	8003976 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b06      	cmp	r3, #6
 8003962:	d010      	beq.n	8003986 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	e007      	b.n	8003986 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800

0800399c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2200      	movs	r2, #0
 80039ac:	6839      	ldr	r1, [r7, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fd8a 	bl	80044c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a29      	ldr	r2, [pc, #164]	@ (8003a60 <HAL_TIM_PWM_Stop+0xc4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d117      	bne.n	80039ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a1a      	ldr	r2, [r3, #32]
 80039c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <HAL_TIM_PWM_Stop+0x52>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	f240 4344 	movw	r3, #1092	@ 0x444
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_PWM_Stop+0x52>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a1a      	ldr	r2, [r3, #32]
 80039f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_TIM_PWM_Stop+0x82>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d107      	bne.n	8003a1e <HAL_TIM_PWM_Stop+0x82>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_PWM_Stop+0x92>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a2c:	e013      	b.n	8003a56 <HAL_TIM_PWM_Stop+0xba>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_PWM_Stop+0xa2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a3c:	e00b      	b.n	8003a56 <HAL_TIM_PWM_Stop+0xba>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_PWM_Stop+0xb2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a4c:	e003      	b.n	8003a56 <HAL_TIM_PWM_Stop+0xba>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40012c00 	.word	0x40012c00

08003a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d020      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0202 	mvn.w	r2, #2
 8003a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa63 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa56 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fa65 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d020      	beq.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01b      	beq.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0204 	mvn.w	r2, #4
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa3d 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa30 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fa3f 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d020      	beq.n	8003b60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01b      	beq.n	8003b60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0208 	mvn.w	r2, #8
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa17 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fa0a 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fa19 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d020      	beq.n	8003bac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0210 	mvn.w	r2, #16
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2208      	movs	r2, #8
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9f1 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f9e4 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f9f3 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0201 	mvn.w	r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f9c3 	bl	8003f56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fd46 	bl	8004680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f9c3 	bl	8003f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00c      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0220 	mvn.w	r2, #32
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fd19 	bl	800466e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e0ae      	b.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b0c      	cmp	r3, #12
 8003c6e:	f200 809f 	bhi.w	8003db0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c72:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003db1 	.word	0x08003db1
 8003c80:	08003db1 	.word	0x08003db1
 8003c84:	08003db1 	.word	0x08003db1
 8003c88:	08003ced 	.word	0x08003ced
 8003c8c:	08003db1 	.word	0x08003db1
 8003c90:	08003db1 	.word	0x08003db1
 8003c94:	08003db1 	.word	0x08003db1
 8003c98:	08003d2f 	.word	0x08003d2f
 8003c9c:	08003db1 	.word	0x08003db1
 8003ca0:	08003db1 	.word	0x08003db1
 8003ca4:	08003db1 	.word	0x08003db1
 8003ca8:	08003d6f 	.word	0x08003d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f9ea 	bl	800408c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0208 	orr.w	r2, r2, #8
 8003cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0204 	bic.w	r2, r2, #4
 8003cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6999      	ldr	r1, [r3, #24]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	619a      	str	r2, [r3, #24]
      break;
 8003cea:	e064      	b.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fa30 	bl	8004158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	021a      	lsls	r2, r3, #8
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	619a      	str	r2, [r3, #24]
      break;
 8003d2c:	e043      	b.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fa79 	bl	800422c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0208 	orr.w	r2, r2, #8
 8003d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0204 	bic.w	r2, r2, #4
 8003d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69d9      	ldr	r1, [r3, #28]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	61da      	str	r2, [r3, #28]
      break;
 8003d6c:	e023      	b.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fac3 	bl	8004300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	021a      	lsls	r2, r3, #8
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	61da      	str	r2, [r3, #28]
      break;
 8003dae:	e002      	b.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	75fb      	strb	r3, [r7, #23]
      break;
 8003db4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_TIM_ConfigClockSource+0x1c>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0b4      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x186>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e1c:	d03e      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0xd4>
 8003e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e22:	f200 8087 	bhi.w	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e2a:	f000 8086 	beq.w	8003f3a <HAL_TIM_ConfigClockSource+0x172>
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e32:	d87f      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b70      	cmp	r3, #112	@ 0x70
 8003e36:	d01a      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xa6>
 8003e38:	2b70      	cmp	r3, #112	@ 0x70
 8003e3a:	d87b      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b60      	cmp	r3, #96	@ 0x60
 8003e3e:	d050      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x11a>
 8003e40:	2b60      	cmp	r3, #96	@ 0x60
 8003e42:	d877      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b50      	cmp	r3, #80	@ 0x50
 8003e46:	d03c      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e48:	2b50      	cmp	r3, #80	@ 0x50
 8003e4a:	d873      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b40      	cmp	r3, #64	@ 0x40
 8003e4e:	d058      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x13a>
 8003e50:	2b40      	cmp	r3, #64	@ 0x40
 8003e52:	d86f      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b30      	cmp	r3, #48	@ 0x30
 8003e56:	d064      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x15a>
 8003e58:	2b30      	cmp	r3, #48	@ 0x30
 8003e5a:	d86b      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d060      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x15a>
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d867      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d05c      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x15a>
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d05a      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x15a>
 8003e6c:	e062      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e7e:	f000 fb04 	bl	800448a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	609a      	str	r2, [r3, #8]
      break;
 8003e9a:	e04f      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eac:	f000 faed 	bl	800448a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ebe:	609a      	str	r2, [r3, #8]
      break;
 8003ec0:	e03c      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f000 fa64 	bl	800439c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2150      	movs	r1, #80	@ 0x50
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fabb 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003ee0:	e02c      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f000 fa82 	bl	80043f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2160      	movs	r1, #96	@ 0x60
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 faab 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003f00:	e01c      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fa44 	bl	800439c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2140      	movs	r1, #64	@ 0x40
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fa9b 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003f20:	e00c      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f000 fa92 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003f32:	e003      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      break;
 8003f38:	e000      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8004080 <TIM_Base_SetConfig+0xd0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004084 <TIM_Base_SetConfig+0xd4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a2b      	ldr	r2, [pc, #172]	@ (8004088 <TIM_Base_SetConfig+0xd8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <TIM_Base_SetConfig+0xd0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00b      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004000:	d007      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1f      	ldr	r2, [pc, #124]	@ (8004084 <TIM_Base_SetConfig+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1e      	ldr	r2, [pc, #120]	@ (8004088 <TIM_Base_SetConfig+0xd8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0d      	ldr	r2, [pc, #52]	@ (8004080 <TIM_Base_SetConfig+0xd0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	611a      	str	r2, [r3, #16]
  }
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800

0800408c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f023 0201 	bic.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0303 	bic.w	r3, r3, #3
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0302 	bic.w	r3, r3, #2
 80040d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004154 <TIM_OC1_SetConfig+0xc8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10c      	bne.n	8004102 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0308 	bic.w	r3, r3, #8
 80040ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0304 	bic.w	r3, r3, #4
 8004100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a13      	ldr	r2, [pc, #76]	@ (8004154 <TIM_OC1_SetConfig+0xc8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d111      	bne.n	800412e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00

08004158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f023 0210 	bic.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800418e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 0320 	bic.w	r3, r3, #32
 80041a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004228 <TIM_OC2_SetConfig+0xd0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10d      	bne.n	80041d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <TIM_OC2_SetConfig+0xd0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d113      	bne.n	8004204 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	40012c00 	.word	0x40012c00

0800422c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1d      	ldr	r2, [pc, #116]	@ (80042fc <TIM_OC3_SetConfig+0xd0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a14      	ldr	r2, [pc, #80]	@ (80042fc <TIM_OC3_SetConfig+0xd0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d113      	bne.n	80042d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00

08004300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800434a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	031b      	lsls	r3, r3, #12
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a0f      	ldr	r2, [pc, #60]	@ (8004398 <TIM_OC4_SetConfig+0x98>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d109      	bne.n	8004374 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	40012c00 	.word	0x40012c00

0800439c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f023 0201 	bic.w	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f023 030a 	bic.w	r3, r3, #10
 80043d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0210 	bic.w	r2, r3, #16
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	031b      	lsls	r3, r3, #12
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004434:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	f043 0307 	orr.w	r3, r3, #7
 8004478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800448a:	b480      	push	{r7}
 800448c:	b087      	sub	sp, #28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	021a      	lsls	r2, r3, #8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	609a      	str	r2, [r3, #8]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2201      	movs	r2, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	401a      	ands	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004524:	2302      	movs	r3, #2
 8004526:	e046      	b.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a16      	ldr	r2, [pc, #88]	@ (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004574:	d009      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a10      	ldr	r2, [pc, #64]	@ (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10c      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4313      	orrs	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800

080045cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e03d      	b.n	8004664 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e042      	b.n	800472a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7fd f83b 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2224      	movs	r2, #36	@ 0x24
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fd62 	bl	80051a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800470a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b08a      	sub	sp, #40	@ 0x28
 8004736:	af02      	add	r7, sp, #8
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b20      	cmp	r3, #32
 8004750:	d175      	bne.n	800483e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_UART_Transmit+0x2c>
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e06e      	b.n	8004840 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2221      	movs	r2, #33	@ 0x21
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004770:	f7fd f8f6 	bl	8001960 <HAL_GetTick>
 8004774:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478a:	d108      	bne.n	800479e <HAL_UART_Transmit+0x6c>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	e003      	b.n	80047a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047a6:	e02e      	b.n	8004806 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	2180      	movs	r1, #128	@ 0x80
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fb00 	bl	8004db8 <UART_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e03a      	b.n	8004840 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3302      	adds	r3, #2
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e007      	b.n	80047f8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3301      	adds	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1cb      	bne.n	80047a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2200      	movs	r2, #0
 8004818:	2140      	movs	r1, #64	@ 0x40
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 facc 	bl	8004db8 <UART_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e006      	b.n	8004840 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b0ba      	sub	sp, #232	@ 0xe8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_UART_IRQHandler+0x66>
 800489a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fbbc 	bl	8005024 <UART_Receive_IT>
      return;
 80048ac:	e25b      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80de 	beq.w	8004a74 <HAL_UART_IRQHandler+0x22c>
 80048b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d106      	bne.n	80048d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80d1 	beq.w	8004a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_UART_IRQHandler+0xae>
 80048de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_UART_IRQHandler+0xd2>
 8004902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f043 0202 	orr.w	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_UART_IRQHandler+0xf6>
 8004926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004936:	f043 0204 	orr.w	r2, r3, #4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <HAL_UART_IRQHandler+0x126>
 800494a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0208 	orr.w	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 81f2 	beq.w	8004d5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_UART_IRQHandler+0x14e>
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb47 	bl	8005024 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <HAL_UART_IRQHandler+0x17a>
 80049ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d04f      	beq.n	8004a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa51 	bl	8004e6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d041      	beq.n	8004a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3314      	adds	r3, #20
 80049dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3314      	adds	r3, #20
 80049fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1d9      	bne.n	80049d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d013      	beq.n	8004a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c28 <HAL_UART_IRQHandler+0x3e0>)
 8004a30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fd febe 	bl	80027b8 <HAL_DMA_Abort_IT>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	e00e      	b.n	8004a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f99c 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	e00a      	b.n	8004a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f998 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	e006      	b.n	8004a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f994 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a6e:	e175      	b.n	8004d5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	bf00      	nop
    return;
 8004a72:	e173      	b.n	8004d5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f040 814f 	bne.w	8004d1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8148 	beq.w	8004d1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8141 	beq.w	8004d1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80b6 	beq.w	8004c2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8145 	beq.w	8004d60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	f080 813e 	bcs.w	8004d60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	f000 8088 	beq.w	8004c08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	330c      	adds	r3, #12
 8004b20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b24:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1d9      	bne.n	8004af8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3314      	adds	r3, #20
 8004b4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e1      	bne.n	8004b44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ba4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004baa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e3      	bne.n	8004b80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bd8:	f023 0310 	bic.w	r3, r3, #16
 8004bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e3      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd fd9d 	bl	8002742 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8bf 	bl	8004da2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c24:	e09c      	b.n	8004d60 <HAL_UART_IRQHandler+0x518>
 8004c26:	bf00      	nop
 8004c28:	08004f2f 	.word	0x08004f2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 808e 	beq.w	8004d64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8089 	beq.w	8004d64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c76:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e3      	bne.n	8004c52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3314      	adds	r3, #20
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	623b      	str	r3, [r7, #32]
   return(result);
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cae:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e3      	bne.n	8004c8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0310 	bic.w	r3, r3, #16
 8004ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cf4:	61fa      	str	r2, [r7, #28]
 8004cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	69b9      	ldr	r1, [r7, #24]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	617b      	str	r3, [r7, #20]
   return(result);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e3      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f844 	bl	8004da2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d1a:	e023      	b.n	8004d64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <HAL_UART_IRQHandler+0x4f4>
 8004d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f90e 	bl	8004f56 <UART_Transmit_IT>
    return;
 8004d3a:	e014      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00e      	beq.n	8004d66 <HAL_UART_IRQHandler+0x51e>
 8004d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f94d 	bl	8004ff4 <UART_EndTransmit_IT>
    return;
 8004d5a:	e004      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d64:	bf00      	nop
  }
}
 8004d66:	37e8      	adds	r7, #232	@ 0xe8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc8:	e03b      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d037      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fc fdc5 	bl	8001960 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e03a      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d023      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b80      	cmp	r3, #128	@ 0x80
 8004dfe:	d020      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d01d      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d116      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f81d 	bl	8004e6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2208      	movs	r2, #8
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e00f      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	bf0c      	ite	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	2300      	movne	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d0b4      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b095      	sub	sp, #84	@ 0x54
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e92:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e5      	bne.n	8004e72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3314      	adds	r3, #20
 8004eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d119      	bne.n	8004f16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f023 0310 	bic.w	r3, r3, #16
 8004ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f02:	61ba      	str	r2, [r7, #24]
 8004f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6979      	ldr	r1, [r7, #20]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e5      	bne.n	8004ee2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f24:	bf00      	nop
 8004f26:	3754      	adds	r7, #84	@ 0x54
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff ff21 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b21      	cmp	r3, #33	@ 0x21
 8004f68:	d13e      	bne.n	8004fe8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f72:	d114      	bne.n	8004f9e <UART_Transmit_IT+0x48>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d110      	bne.n	8004f9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]
 8004f9c:	e008      	b.n	8004fb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6211      	str	r1, [r2, #32]
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fe2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fea9 	bl	8004d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08c      	sub	sp, #48	@ 0x30
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b22      	cmp	r3, #34	@ 0x22
 8005036:	f040 80ae 	bne.w	8005196 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005042:	d117      	bne.n	8005074 <UART_Receive_IT+0x50>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d113      	bne.n	8005074 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005062:	b29a      	uxth	r2, r3
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506c:	1c9a      	adds	r2, r3, #2
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	629a      	str	r2, [r3, #40]	@ 0x28
 8005072:	e026      	b.n	80050c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005086:	d007      	beq.n	8005098 <UART_Receive_IT+0x74>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <UART_Receive_IT+0x82>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e008      	b.n	80050b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4619      	mov	r1, r3
 80050d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d15d      	bne.n	8005192 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0220 	bic.w	r2, r2, #32
 80050e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005118:	2b01      	cmp	r3, #1
 800511a:	d135      	bne.n	8005188 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	613b      	str	r3, [r7, #16]
   return(result);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f023 0310 	bic.w	r3, r3, #16
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005142:	623a      	str	r2, [r7, #32]
 8005144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	69f9      	ldr	r1, [r7, #28]
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b10      	cmp	r3, #16
 8005162:	d10a      	bne.n	800517a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fe0e 	bl	8004da2 <HAL_UARTEx_RxEventCallback>
 8005186:	e002      	b.n	800518e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fdf8 	bl	8004d7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e002      	b.n	8005198 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005196:	2302      	movs	r3, #2
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3730      	adds	r7, #48	@ 0x30
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80051da:	f023 030c 	bic.w	r3, r3, #12
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	430b      	orrs	r3, r1
 80051e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a2c      	ldr	r2, [pc, #176]	@ (80052b4 <UART_SetConfig+0x114>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d103      	bne.n	8005210 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fe f8e0 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	e002      	b.n	8005216 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7fe f8c8 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8005214:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009a      	lsls	r2, r3, #2
 8005220:	441a      	add	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	4a22      	ldr	r2, [pc, #136]	@ (80052b8 <UART_SetConfig+0x118>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	0119      	lsls	r1, r3, #4
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009a      	lsls	r2, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	fbb2 f2f3 	udiv	r2, r2, r3
 800524c:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <UART_SetConfig+0x118>)
 800524e:	fba3 0302 	umull	r0, r3, r3, r2
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2064      	movs	r0, #100	@ 0x64
 8005256:	fb00 f303 	mul.w	r3, r0, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	3332      	adds	r3, #50	@ 0x32
 8005260:	4a15      	ldr	r2, [pc, #84]	@ (80052b8 <UART_SetConfig+0x118>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800526c:	4419      	add	r1, r3
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009a      	lsls	r2, r3, #2
 8005278:	441a      	add	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	fbb2 f2f3 	udiv	r2, r2, r3
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <UART_SetConfig+0x118>)
 8005286:	fba3 0302 	umull	r0, r3, r3, r2
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	2064      	movs	r0, #100	@ 0x64
 800528e:	fb00 f303 	mul.w	r3, r0, r3
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	3332      	adds	r3, #50	@ 0x32
 8005298:	4a07      	ldr	r2, [pc, #28]	@ (80052b8 <UART_SetConfig+0x118>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	f003 020f 	and.w	r2, r3, #15
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	440a      	add	r2, r1
 80052aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40013800 	.word	0x40013800
 80052b8:	51eb851f 	.word	0x51eb851f

080052bc <__cvt>:
 80052bc:	2b00      	cmp	r3, #0
 80052be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c2:	461d      	mov	r5, r3
 80052c4:	bfbb      	ittet	lt
 80052c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80052ca:	461d      	movlt	r5, r3
 80052cc:	2300      	movge	r3, #0
 80052ce:	232d      	movlt	r3, #45	@ 0x2d
 80052d0:	b088      	sub	sp, #32
 80052d2:	4614      	mov	r4, r2
 80052d4:	bfb8      	it	lt
 80052d6:	4614      	movlt	r4, r2
 80052d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80052da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80052dc:	7013      	strb	r3, [r2, #0]
 80052de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80052e4:	f023 0820 	bic.w	r8, r3, #32
 80052e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052ec:	d005      	beq.n	80052fa <__cvt+0x3e>
 80052ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052f2:	d100      	bne.n	80052f6 <__cvt+0x3a>
 80052f4:	3601      	adds	r6, #1
 80052f6:	2302      	movs	r3, #2
 80052f8:	e000      	b.n	80052fc <__cvt+0x40>
 80052fa:	2303      	movs	r3, #3
 80052fc:	aa07      	add	r2, sp, #28
 80052fe:	9204      	str	r2, [sp, #16]
 8005300:	aa06      	add	r2, sp, #24
 8005302:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005306:	e9cd 3600 	strd	r3, r6, [sp]
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	f000 fe8f 	bl	8006030 <_dtoa_r>
 8005312:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005316:	4607      	mov	r7, r0
 8005318:	d119      	bne.n	800534e <__cvt+0x92>
 800531a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800531c:	07db      	lsls	r3, r3, #31
 800531e:	d50e      	bpl.n	800533e <__cvt+0x82>
 8005320:	eb00 0906 	add.w	r9, r0, r6
 8005324:	2200      	movs	r2, #0
 8005326:	2300      	movs	r3, #0
 8005328:	4620      	mov	r0, r4
 800532a:	4629      	mov	r1, r5
 800532c:	f7fb fb3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005330:	b108      	cbz	r0, 8005336 <__cvt+0x7a>
 8005332:	f8cd 901c 	str.w	r9, [sp, #28]
 8005336:	2230      	movs	r2, #48	@ 0x30
 8005338:	9b07      	ldr	r3, [sp, #28]
 800533a:	454b      	cmp	r3, r9
 800533c:	d31e      	bcc.n	800537c <__cvt+0xc0>
 800533e:	4638      	mov	r0, r7
 8005340:	9b07      	ldr	r3, [sp, #28]
 8005342:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005344:	1bdb      	subs	r3, r3, r7
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	b008      	add	sp, #32
 800534a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005352:	eb00 0906 	add.w	r9, r0, r6
 8005356:	d1e5      	bne.n	8005324 <__cvt+0x68>
 8005358:	7803      	ldrb	r3, [r0, #0]
 800535a:	2b30      	cmp	r3, #48	@ 0x30
 800535c:	d10a      	bne.n	8005374 <__cvt+0xb8>
 800535e:	2200      	movs	r2, #0
 8005360:	2300      	movs	r3, #0
 8005362:	4620      	mov	r0, r4
 8005364:	4629      	mov	r1, r5
 8005366:	f7fb fb1f 	bl	80009a8 <__aeabi_dcmpeq>
 800536a:	b918      	cbnz	r0, 8005374 <__cvt+0xb8>
 800536c:	f1c6 0601 	rsb	r6, r6, #1
 8005370:	f8ca 6000 	str.w	r6, [sl]
 8005374:	f8da 3000 	ldr.w	r3, [sl]
 8005378:	4499      	add	r9, r3
 800537a:	e7d3      	b.n	8005324 <__cvt+0x68>
 800537c:	1c59      	adds	r1, r3, #1
 800537e:	9107      	str	r1, [sp, #28]
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e7d9      	b.n	8005338 <__cvt+0x7c>

08005384 <__exponent>:
 8005384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005386:	2900      	cmp	r1, #0
 8005388:	bfb6      	itet	lt
 800538a:	232d      	movlt	r3, #45	@ 0x2d
 800538c:	232b      	movge	r3, #43	@ 0x2b
 800538e:	4249      	neglt	r1, r1
 8005390:	2909      	cmp	r1, #9
 8005392:	7002      	strb	r2, [r0, #0]
 8005394:	7043      	strb	r3, [r0, #1]
 8005396:	dd29      	ble.n	80053ec <__exponent+0x68>
 8005398:	f10d 0307 	add.w	r3, sp, #7
 800539c:	461d      	mov	r5, r3
 800539e:	270a      	movs	r7, #10
 80053a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80053a4:	461a      	mov	r2, r3
 80053a6:	fb07 1416 	mls	r4, r7, r6, r1
 80053aa:	3430      	adds	r4, #48	@ 0x30
 80053ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053b0:	460c      	mov	r4, r1
 80053b2:	2c63      	cmp	r4, #99	@ 0x63
 80053b4:	4631      	mov	r1, r6
 80053b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053ba:	dcf1      	bgt.n	80053a0 <__exponent+0x1c>
 80053bc:	3130      	adds	r1, #48	@ 0x30
 80053be:	1e94      	subs	r4, r2, #2
 80053c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053c4:	4623      	mov	r3, r4
 80053c6:	1c41      	adds	r1, r0, #1
 80053c8:	42ab      	cmp	r3, r5
 80053ca:	d30a      	bcc.n	80053e2 <__exponent+0x5e>
 80053cc:	f10d 0309 	add.w	r3, sp, #9
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	42ac      	cmp	r4, r5
 80053d4:	bf88      	it	hi
 80053d6:	2300      	movhi	r3, #0
 80053d8:	3302      	adds	r3, #2
 80053da:	4403      	add	r3, r0
 80053dc:	1a18      	subs	r0, r3, r0
 80053de:	b003      	add	sp, #12
 80053e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053ea:	e7ed      	b.n	80053c8 <__exponent+0x44>
 80053ec:	2330      	movs	r3, #48	@ 0x30
 80053ee:	3130      	adds	r1, #48	@ 0x30
 80053f0:	7083      	strb	r3, [r0, #2]
 80053f2:	70c1      	strb	r1, [r0, #3]
 80053f4:	1d03      	adds	r3, r0, #4
 80053f6:	e7f1      	b.n	80053dc <__exponent+0x58>

080053f8 <_printf_float>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	b091      	sub	sp, #68	@ 0x44
 80053fe:	460c      	mov	r4, r1
 8005400:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005404:	4616      	mov	r6, r2
 8005406:	461f      	mov	r7, r3
 8005408:	4605      	mov	r5, r0
 800540a:	f000 fd01 	bl	8005e10 <_localeconv_r>
 800540e:	6803      	ldr	r3, [r0, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	9308      	str	r3, [sp, #32]
 8005414:	f7fa fe9c 	bl	8000150 <strlen>
 8005418:	2300      	movs	r3, #0
 800541a:	930e      	str	r3, [sp, #56]	@ 0x38
 800541c:	f8d8 3000 	ldr.w	r3, [r8]
 8005420:	9009      	str	r0, [sp, #36]	@ 0x24
 8005422:	3307      	adds	r3, #7
 8005424:	f023 0307 	bic.w	r3, r3, #7
 8005428:	f103 0208 	add.w	r2, r3, #8
 800542c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005430:	f8d4 b000 	ldr.w	fp, [r4]
 8005434:	f8c8 2000 	str.w	r2, [r8]
 8005438:	e9d3 8900 	ldrd	r8, r9, [r3]
 800543c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005442:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005446:	f04f 32ff 	mov.w	r2, #4294967295
 800544a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800544e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005452:	4b9c      	ldr	r3, [pc, #624]	@ (80056c4 <_printf_float+0x2cc>)
 8005454:	f7fb fada 	bl	8000a0c <__aeabi_dcmpun>
 8005458:	bb70      	cbnz	r0, 80054b8 <_printf_float+0xc0>
 800545a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800545e:	f04f 32ff 	mov.w	r2, #4294967295
 8005462:	4b98      	ldr	r3, [pc, #608]	@ (80056c4 <_printf_float+0x2cc>)
 8005464:	f7fb fab4 	bl	80009d0 <__aeabi_dcmple>
 8005468:	bb30      	cbnz	r0, 80054b8 <_printf_float+0xc0>
 800546a:	2200      	movs	r2, #0
 800546c:	2300      	movs	r3, #0
 800546e:	4640      	mov	r0, r8
 8005470:	4649      	mov	r1, r9
 8005472:	f7fb faa3 	bl	80009bc <__aeabi_dcmplt>
 8005476:	b110      	cbz	r0, 800547e <_printf_float+0x86>
 8005478:	232d      	movs	r3, #45	@ 0x2d
 800547a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800547e:	4a92      	ldr	r2, [pc, #584]	@ (80056c8 <_printf_float+0x2d0>)
 8005480:	4b92      	ldr	r3, [pc, #584]	@ (80056cc <_printf_float+0x2d4>)
 8005482:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005486:	bf8c      	ite	hi
 8005488:	4690      	movhi	r8, r2
 800548a:	4698      	movls	r8, r3
 800548c:	2303      	movs	r3, #3
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	f02b 0304 	bic.w	r3, fp, #4
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	4633      	mov	r3, r6
 800549c:	4621      	mov	r1, r4
 800549e:	4628      	mov	r0, r5
 80054a0:	9700      	str	r7, [sp, #0]
 80054a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80054a4:	f000 f9d4 	bl	8005850 <_printf_common>
 80054a8:	3001      	adds	r0, #1
 80054aa:	f040 8090 	bne.w	80055ce <_printf_float+0x1d6>
 80054ae:	f04f 30ff 	mov.w	r0, #4294967295
 80054b2:	b011      	add	sp, #68	@ 0x44
 80054b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	4649      	mov	r1, r9
 80054c0:	f7fb faa4 	bl	8000a0c <__aeabi_dcmpun>
 80054c4:	b148      	cbz	r0, 80054da <_printf_float+0xe2>
 80054c6:	464b      	mov	r3, r9
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bfb8      	it	lt
 80054cc:	232d      	movlt	r3, #45	@ 0x2d
 80054ce:	4a80      	ldr	r2, [pc, #512]	@ (80056d0 <_printf_float+0x2d8>)
 80054d0:	bfb8      	it	lt
 80054d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054d6:	4b7f      	ldr	r3, [pc, #508]	@ (80056d4 <_printf_float+0x2dc>)
 80054d8:	e7d3      	b.n	8005482 <_printf_float+0x8a>
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	d13f      	bne.n	8005564 <_printf_float+0x16c>
 80054e4:	2306      	movs	r3, #6
 80054e6:	6063      	str	r3, [r4, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	9206      	str	r2, [sp, #24]
 80054f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80054f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80054f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80054fa:	9203      	str	r2, [sp, #12]
 80054fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005500:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	4642      	mov	r2, r8
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	4628      	mov	r0, r5
 800550c:	464b      	mov	r3, r9
 800550e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005510:	f7ff fed4 	bl	80052bc <__cvt>
 8005514:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005516:	4680      	mov	r8, r0
 8005518:	2947      	cmp	r1, #71	@ 0x47
 800551a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800551c:	d128      	bne.n	8005570 <_printf_float+0x178>
 800551e:	1cc8      	adds	r0, r1, #3
 8005520:	db02      	blt.n	8005528 <_printf_float+0x130>
 8005522:	6863      	ldr	r3, [r4, #4]
 8005524:	4299      	cmp	r1, r3
 8005526:	dd40      	ble.n	80055aa <_printf_float+0x1b2>
 8005528:	f1aa 0a02 	sub.w	sl, sl, #2
 800552c:	fa5f fa8a 	uxtb.w	sl, sl
 8005530:	4652      	mov	r2, sl
 8005532:	3901      	subs	r1, #1
 8005534:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005538:	910d      	str	r1, [sp, #52]	@ 0x34
 800553a:	f7ff ff23 	bl	8005384 <__exponent>
 800553e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005540:	4681      	mov	r9, r0
 8005542:	1813      	adds	r3, r2, r0
 8005544:	2a01      	cmp	r2, #1
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	dc02      	bgt.n	8005550 <_printf_float+0x158>
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	07d2      	lsls	r2, r2, #31
 800554e:	d501      	bpl.n	8005554 <_printf_float+0x15c>
 8005550:	3301      	adds	r3, #1
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005558:	2b00      	cmp	r3, #0
 800555a:	d09e      	beq.n	800549a <_printf_float+0xa2>
 800555c:	232d      	movs	r3, #45	@ 0x2d
 800555e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005562:	e79a      	b.n	800549a <_printf_float+0xa2>
 8005564:	2947      	cmp	r1, #71	@ 0x47
 8005566:	d1bf      	bne.n	80054e8 <_printf_float+0xf0>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1bd      	bne.n	80054e8 <_printf_float+0xf0>
 800556c:	2301      	movs	r3, #1
 800556e:	e7ba      	b.n	80054e6 <_printf_float+0xee>
 8005570:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005574:	d9dc      	bls.n	8005530 <_printf_float+0x138>
 8005576:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800557a:	d118      	bne.n	80055ae <_printf_float+0x1b6>
 800557c:	2900      	cmp	r1, #0
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	dd0b      	ble.n	800559a <_printf_float+0x1a2>
 8005582:	6121      	str	r1, [r4, #16]
 8005584:	b913      	cbnz	r3, 800558c <_printf_float+0x194>
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	07d0      	lsls	r0, r2, #31
 800558a:	d502      	bpl.n	8005592 <_printf_float+0x19a>
 800558c:	3301      	adds	r3, #1
 800558e:	440b      	add	r3, r1
 8005590:	6123      	str	r3, [r4, #16]
 8005592:	f04f 0900 	mov.w	r9, #0
 8005596:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005598:	e7dc      	b.n	8005554 <_printf_float+0x15c>
 800559a:	b913      	cbnz	r3, 80055a2 <_printf_float+0x1aa>
 800559c:	6822      	ldr	r2, [r4, #0]
 800559e:	07d2      	lsls	r2, r2, #31
 80055a0:	d501      	bpl.n	80055a6 <_printf_float+0x1ae>
 80055a2:	3302      	adds	r3, #2
 80055a4:	e7f4      	b.n	8005590 <_printf_float+0x198>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e7f2      	b.n	8005590 <_printf_float+0x198>
 80055aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055b0:	4299      	cmp	r1, r3
 80055b2:	db05      	blt.n	80055c0 <_printf_float+0x1c8>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	6121      	str	r1, [r4, #16]
 80055b8:	07d8      	lsls	r0, r3, #31
 80055ba:	d5ea      	bpl.n	8005592 <_printf_float+0x19a>
 80055bc:	1c4b      	adds	r3, r1, #1
 80055be:	e7e7      	b.n	8005590 <_printf_float+0x198>
 80055c0:	2900      	cmp	r1, #0
 80055c2:	bfcc      	ite	gt
 80055c4:	2201      	movgt	r2, #1
 80055c6:	f1c1 0202 	rsble	r2, r1, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	e7e0      	b.n	8005590 <_printf_float+0x198>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	055a      	lsls	r2, r3, #21
 80055d2:	d407      	bmi.n	80055e4 <_printf_float+0x1ec>
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	4642      	mov	r2, r8
 80055d8:	4631      	mov	r1, r6
 80055da:	4628      	mov	r0, r5
 80055dc:	47b8      	blx	r7
 80055de:	3001      	adds	r0, #1
 80055e0:	d12b      	bne.n	800563a <_printf_float+0x242>
 80055e2:	e764      	b.n	80054ae <_printf_float+0xb6>
 80055e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055e8:	f240 80dc 	bls.w	80057a4 <_printf_float+0x3ac>
 80055ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055f0:	2200      	movs	r2, #0
 80055f2:	2300      	movs	r3, #0
 80055f4:	f7fb f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d033      	beq.n	8005664 <_printf_float+0x26c>
 80055fc:	2301      	movs	r3, #1
 80055fe:	4631      	mov	r1, r6
 8005600:	4628      	mov	r0, r5
 8005602:	4a35      	ldr	r2, [pc, #212]	@ (80056d8 <_printf_float+0x2e0>)
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f af51 	beq.w	80054ae <_printf_float+0xb6>
 800560c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005610:	4543      	cmp	r3, r8
 8005612:	db02      	blt.n	800561a <_printf_float+0x222>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07d8      	lsls	r0, r3, #31
 8005618:	d50f      	bpl.n	800563a <_printf_float+0x242>
 800561a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	f43f af42 	beq.w	80054ae <_printf_float+0xb6>
 800562a:	f04f 0900 	mov.w	r9, #0
 800562e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005632:	f104 0a1a 	add.w	sl, r4, #26
 8005636:	45c8      	cmp	r8, r9
 8005638:	dc09      	bgt.n	800564e <_printf_float+0x256>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	079b      	lsls	r3, r3, #30
 800563e:	f100 8102 	bmi.w	8005846 <_printf_float+0x44e>
 8005642:	68e0      	ldr	r0, [r4, #12]
 8005644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005646:	4298      	cmp	r0, r3
 8005648:	bfb8      	it	lt
 800564a:	4618      	movlt	r0, r3
 800564c:	e731      	b.n	80054b2 <_printf_float+0xba>
 800564e:	2301      	movs	r3, #1
 8005650:	4652      	mov	r2, sl
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	f43f af28 	beq.w	80054ae <_printf_float+0xb6>
 800565e:	f109 0901 	add.w	r9, r9, #1
 8005662:	e7e8      	b.n	8005636 <_printf_float+0x23e>
 8005664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005666:	2b00      	cmp	r3, #0
 8005668:	dc38      	bgt.n	80056dc <_printf_float+0x2e4>
 800566a:	2301      	movs	r3, #1
 800566c:	4631      	mov	r1, r6
 800566e:	4628      	mov	r0, r5
 8005670:	4a19      	ldr	r2, [pc, #100]	@ (80056d8 <_printf_float+0x2e0>)
 8005672:	47b8      	blx	r7
 8005674:	3001      	adds	r0, #1
 8005676:	f43f af1a 	beq.w	80054ae <_printf_float+0xb6>
 800567a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800567e:	ea59 0303 	orrs.w	r3, r9, r3
 8005682:	d102      	bne.n	800568a <_printf_float+0x292>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	07d9      	lsls	r1, r3, #31
 8005688:	d5d7      	bpl.n	800563a <_printf_float+0x242>
 800568a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800568e:	4631      	mov	r1, r6
 8005690:	4628      	mov	r0, r5
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f af0a 	beq.w	80054ae <_printf_float+0xb6>
 800569a:	f04f 0a00 	mov.w	sl, #0
 800569e:	f104 0b1a 	add.w	fp, r4, #26
 80056a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056a4:	425b      	negs	r3, r3
 80056a6:	4553      	cmp	r3, sl
 80056a8:	dc01      	bgt.n	80056ae <_printf_float+0x2b6>
 80056aa:	464b      	mov	r3, r9
 80056ac:	e793      	b.n	80055d6 <_printf_float+0x1de>
 80056ae:	2301      	movs	r3, #1
 80056b0:	465a      	mov	r2, fp
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f aef8 	beq.w	80054ae <_printf_float+0xb6>
 80056be:	f10a 0a01 	add.w	sl, sl, #1
 80056c2:	e7ee      	b.n	80056a2 <_printf_float+0x2aa>
 80056c4:	7fefffff 	.word	0x7fefffff
 80056c8:	0800801a 	.word	0x0800801a
 80056cc:	08008016 	.word	0x08008016
 80056d0:	08008022 	.word	0x08008022
 80056d4:	0800801e 	.word	0x0800801e
 80056d8:	08008026 	.word	0x08008026
 80056dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80056e2:	4553      	cmp	r3, sl
 80056e4:	bfa8      	it	ge
 80056e6:	4653      	movge	r3, sl
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	4699      	mov	r9, r3
 80056ec:	dc36      	bgt.n	800575c <_printf_float+0x364>
 80056ee:	f04f 0b00 	mov.w	fp, #0
 80056f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056f6:	f104 021a 	add.w	r2, r4, #26
 80056fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80056fe:	eba3 0309 	sub.w	r3, r3, r9
 8005702:	455b      	cmp	r3, fp
 8005704:	dc31      	bgt.n	800576a <_printf_float+0x372>
 8005706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005708:	459a      	cmp	sl, r3
 800570a:	dc3a      	bgt.n	8005782 <_printf_float+0x38a>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	07da      	lsls	r2, r3, #31
 8005710:	d437      	bmi.n	8005782 <_printf_float+0x38a>
 8005712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005714:	ebaa 0903 	sub.w	r9, sl, r3
 8005718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800571a:	ebaa 0303 	sub.w	r3, sl, r3
 800571e:	4599      	cmp	r9, r3
 8005720:	bfa8      	it	ge
 8005722:	4699      	movge	r9, r3
 8005724:	f1b9 0f00 	cmp.w	r9, #0
 8005728:	dc33      	bgt.n	8005792 <_printf_float+0x39a>
 800572a:	f04f 0800 	mov.w	r8, #0
 800572e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005732:	f104 0b1a 	add.w	fp, r4, #26
 8005736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005738:	ebaa 0303 	sub.w	r3, sl, r3
 800573c:	eba3 0309 	sub.w	r3, r3, r9
 8005740:	4543      	cmp	r3, r8
 8005742:	f77f af7a 	ble.w	800563a <_printf_float+0x242>
 8005746:	2301      	movs	r3, #1
 8005748:	465a      	mov	r2, fp
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	f43f aeac 	beq.w	80054ae <_printf_float+0xb6>
 8005756:	f108 0801 	add.w	r8, r8, #1
 800575a:	e7ec      	b.n	8005736 <_printf_float+0x33e>
 800575c:	4642      	mov	r2, r8
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	d1c2      	bne.n	80056ee <_printf_float+0x2f6>
 8005768:	e6a1      	b.n	80054ae <_printf_float+0xb6>
 800576a:	2301      	movs	r3, #1
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	920a      	str	r2, [sp, #40]	@ 0x28
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	f43f ae9a 	beq.w	80054ae <_printf_float+0xb6>
 800577a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800577c:	f10b 0b01 	add.w	fp, fp, #1
 8005780:	e7bb      	b.n	80056fa <_printf_float+0x302>
 8005782:	4631      	mov	r1, r6
 8005784:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	d1c0      	bne.n	8005712 <_printf_float+0x31a>
 8005790:	e68d      	b.n	80054ae <_printf_float+0xb6>
 8005792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005794:	464b      	mov	r3, r9
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	4442      	add	r2, r8
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	d1c3      	bne.n	800572a <_printf_float+0x332>
 80057a2:	e684      	b.n	80054ae <_printf_float+0xb6>
 80057a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057a8:	f1ba 0f01 	cmp.w	sl, #1
 80057ac:	dc01      	bgt.n	80057b2 <_printf_float+0x3ba>
 80057ae:	07db      	lsls	r3, r3, #31
 80057b0:	d536      	bpl.n	8005820 <_printf_float+0x428>
 80057b2:	2301      	movs	r3, #1
 80057b4:	4642      	mov	r2, r8
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	47b8      	blx	r7
 80057bc:	3001      	adds	r0, #1
 80057be:	f43f ae76 	beq.w	80054ae <_printf_float+0xb6>
 80057c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	f43f ae6e 	beq.w	80054ae <_printf_float+0xb6>
 80057d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057d6:	2200      	movs	r2, #0
 80057d8:	2300      	movs	r3, #0
 80057da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057de:	f7fb f8e3 	bl	80009a8 <__aeabi_dcmpeq>
 80057e2:	b9c0      	cbnz	r0, 8005816 <_printf_float+0x41e>
 80057e4:	4653      	mov	r3, sl
 80057e6:	f108 0201 	add.w	r2, r8, #1
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b8      	blx	r7
 80057f0:	3001      	adds	r0, #1
 80057f2:	d10c      	bne.n	800580e <_printf_float+0x416>
 80057f4:	e65b      	b.n	80054ae <_printf_float+0xb6>
 80057f6:	2301      	movs	r3, #1
 80057f8:	465a      	mov	r2, fp
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	f43f ae54 	beq.w	80054ae <_printf_float+0xb6>
 8005806:	f108 0801 	add.w	r8, r8, #1
 800580a:	45d0      	cmp	r8, sl
 800580c:	dbf3      	blt.n	80057f6 <_printf_float+0x3fe>
 800580e:	464b      	mov	r3, r9
 8005810:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005814:	e6e0      	b.n	80055d8 <_printf_float+0x1e0>
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	f104 0b1a 	add.w	fp, r4, #26
 800581e:	e7f4      	b.n	800580a <_printf_float+0x412>
 8005820:	2301      	movs	r3, #1
 8005822:	4642      	mov	r2, r8
 8005824:	e7e1      	b.n	80057ea <_printf_float+0x3f2>
 8005826:	2301      	movs	r3, #1
 8005828:	464a      	mov	r2, r9
 800582a:	4631      	mov	r1, r6
 800582c:	4628      	mov	r0, r5
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	f43f ae3c 	beq.w	80054ae <_printf_float+0xb6>
 8005836:	f108 0801 	add.w	r8, r8, #1
 800583a:	68e3      	ldr	r3, [r4, #12]
 800583c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800583e:	1a5b      	subs	r3, r3, r1
 8005840:	4543      	cmp	r3, r8
 8005842:	dcf0      	bgt.n	8005826 <_printf_float+0x42e>
 8005844:	e6fd      	b.n	8005642 <_printf_float+0x24a>
 8005846:	f04f 0800 	mov.w	r8, #0
 800584a:	f104 0919 	add.w	r9, r4, #25
 800584e:	e7f4      	b.n	800583a <_printf_float+0x442>

08005850 <_printf_common>:
 8005850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005854:	4616      	mov	r6, r2
 8005856:	4698      	mov	r8, r3
 8005858:	688a      	ldr	r2, [r1, #8]
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	4607      	mov	r7, r0
 800585e:	4293      	cmp	r3, r2
 8005860:	bfb8      	it	lt
 8005862:	4613      	movlt	r3, r2
 8005864:	6033      	str	r3, [r6, #0]
 8005866:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800586a:	460c      	mov	r4, r1
 800586c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005870:	b10a      	cbz	r2, 8005876 <_printf_common+0x26>
 8005872:	3301      	adds	r3, #1
 8005874:	6033      	str	r3, [r6, #0]
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	0699      	lsls	r1, r3, #26
 800587a:	bf42      	ittt	mi
 800587c:	6833      	ldrmi	r3, [r6, #0]
 800587e:	3302      	addmi	r3, #2
 8005880:	6033      	strmi	r3, [r6, #0]
 8005882:	6825      	ldr	r5, [r4, #0]
 8005884:	f015 0506 	ands.w	r5, r5, #6
 8005888:	d106      	bne.n	8005898 <_printf_common+0x48>
 800588a:	f104 0a19 	add.w	sl, r4, #25
 800588e:	68e3      	ldr	r3, [r4, #12]
 8005890:	6832      	ldr	r2, [r6, #0]
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	42ab      	cmp	r3, r5
 8005896:	dc2b      	bgt.n	80058f0 <_printf_common+0xa0>
 8005898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800589c:	6822      	ldr	r2, [r4, #0]
 800589e:	3b00      	subs	r3, #0
 80058a0:	bf18      	it	ne
 80058a2:	2301      	movne	r3, #1
 80058a4:	0692      	lsls	r2, r2, #26
 80058a6:	d430      	bmi.n	800590a <_printf_common+0xba>
 80058a8:	4641      	mov	r1, r8
 80058aa:	4638      	mov	r0, r7
 80058ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058b0:	47c8      	blx	r9
 80058b2:	3001      	adds	r0, #1
 80058b4:	d023      	beq.n	80058fe <_printf_common+0xae>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	6922      	ldr	r2, [r4, #16]
 80058ba:	f003 0306 	and.w	r3, r3, #6
 80058be:	2b04      	cmp	r3, #4
 80058c0:	bf14      	ite	ne
 80058c2:	2500      	movne	r5, #0
 80058c4:	6833      	ldreq	r3, [r6, #0]
 80058c6:	f04f 0600 	mov.w	r6, #0
 80058ca:	bf08      	it	eq
 80058cc:	68e5      	ldreq	r5, [r4, #12]
 80058ce:	f104 041a 	add.w	r4, r4, #26
 80058d2:	bf08      	it	eq
 80058d4:	1aed      	subeq	r5, r5, r3
 80058d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80058da:	bf08      	it	eq
 80058dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e0:	4293      	cmp	r3, r2
 80058e2:	bfc4      	itt	gt
 80058e4:	1a9b      	subgt	r3, r3, r2
 80058e6:	18ed      	addgt	r5, r5, r3
 80058e8:	42b5      	cmp	r5, r6
 80058ea:	d11a      	bne.n	8005922 <_printf_common+0xd2>
 80058ec:	2000      	movs	r0, #0
 80058ee:	e008      	b.n	8005902 <_printf_common+0xb2>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4652      	mov	r2, sl
 80058f4:	4641      	mov	r1, r8
 80058f6:	4638      	mov	r0, r7
 80058f8:	47c8      	blx	r9
 80058fa:	3001      	adds	r0, #1
 80058fc:	d103      	bne.n	8005906 <_printf_common+0xb6>
 80058fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005906:	3501      	adds	r5, #1
 8005908:	e7c1      	b.n	800588e <_printf_common+0x3e>
 800590a:	2030      	movs	r0, #48	@ 0x30
 800590c:	18e1      	adds	r1, r4, r3
 800590e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005918:	4422      	add	r2, r4
 800591a:	3302      	adds	r3, #2
 800591c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005920:	e7c2      	b.n	80058a8 <_printf_common+0x58>
 8005922:	2301      	movs	r3, #1
 8005924:	4622      	mov	r2, r4
 8005926:	4641      	mov	r1, r8
 8005928:	4638      	mov	r0, r7
 800592a:	47c8      	blx	r9
 800592c:	3001      	adds	r0, #1
 800592e:	d0e6      	beq.n	80058fe <_printf_common+0xae>
 8005930:	3601      	adds	r6, #1
 8005932:	e7d9      	b.n	80058e8 <_printf_common+0x98>

08005934 <_printf_i>:
 8005934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	7e0f      	ldrb	r7, [r1, #24]
 800593a:	4691      	mov	r9, r2
 800593c:	2f78      	cmp	r7, #120	@ 0x78
 800593e:	4680      	mov	r8, r0
 8005940:	460c      	mov	r4, r1
 8005942:	469a      	mov	sl, r3
 8005944:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005946:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800594a:	d807      	bhi.n	800595c <_printf_i+0x28>
 800594c:	2f62      	cmp	r7, #98	@ 0x62
 800594e:	d80a      	bhi.n	8005966 <_printf_i+0x32>
 8005950:	2f00      	cmp	r7, #0
 8005952:	f000 80d1 	beq.w	8005af8 <_printf_i+0x1c4>
 8005956:	2f58      	cmp	r7, #88	@ 0x58
 8005958:	f000 80b8 	beq.w	8005acc <_printf_i+0x198>
 800595c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005960:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005964:	e03a      	b.n	80059dc <_printf_i+0xa8>
 8005966:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800596a:	2b15      	cmp	r3, #21
 800596c:	d8f6      	bhi.n	800595c <_printf_i+0x28>
 800596e:	a101      	add	r1, pc, #4	@ (adr r1, 8005974 <_printf_i+0x40>)
 8005970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005974:	080059cd 	.word	0x080059cd
 8005978:	080059e1 	.word	0x080059e1
 800597c:	0800595d 	.word	0x0800595d
 8005980:	0800595d 	.word	0x0800595d
 8005984:	0800595d 	.word	0x0800595d
 8005988:	0800595d 	.word	0x0800595d
 800598c:	080059e1 	.word	0x080059e1
 8005990:	0800595d 	.word	0x0800595d
 8005994:	0800595d 	.word	0x0800595d
 8005998:	0800595d 	.word	0x0800595d
 800599c:	0800595d 	.word	0x0800595d
 80059a0:	08005adf 	.word	0x08005adf
 80059a4:	08005a0b 	.word	0x08005a0b
 80059a8:	08005a99 	.word	0x08005a99
 80059ac:	0800595d 	.word	0x0800595d
 80059b0:	0800595d 	.word	0x0800595d
 80059b4:	08005b01 	.word	0x08005b01
 80059b8:	0800595d 	.word	0x0800595d
 80059bc:	08005a0b 	.word	0x08005a0b
 80059c0:	0800595d 	.word	0x0800595d
 80059c4:	0800595d 	.word	0x0800595d
 80059c8:	08005aa1 	.word	0x08005aa1
 80059cc:	6833      	ldr	r3, [r6, #0]
 80059ce:	1d1a      	adds	r2, r3, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6032      	str	r2, [r6, #0]
 80059d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059dc:	2301      	movs	r3, #1
 80059de:	e09c      	b.n	8005b1a <_printf_i+0x1e6>
 80059e0:	6833      	ldr	r3, [r6, #0]
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	1d19      	adds	r1, r3, #4
 80059e6:	6031      	str	r1, [r6, #0]
 80059e8:	0606      	lsls	r6, r0, #24
 80059ea:	d501      	bpl.n	80059f0 <_printf_i+0xbc>
 80059ec:	681d      	ldr	r5, [r3, #0]
 80059ee:	e003      	b.n	80059f8 <_printf_i+0xc4>
 80059f0:	0645      	lsls	r5, r0, #25
 80059f2:	d5fb      	bpl.n	80059ec <_printf_i+0xb8>
 80059f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059f8:	2d00      	cmp	r5, #0
 80059fa:	da03      	bge.n	8005a04 <_printf_i+0xd0>
 80059fc:	232d      	movs	r3, #45	@ 0x2d
 80059fe:	426d      	negs	r5, r5
 8005a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a04:	230a      	movs	r3, #10
 8005a06:	4858      	ldr	r0, [pc, #352]	@ (8005b68 <_printf_i+0x234>)
 8005a08:	e011      	b.n	8005a2e <_printf_i+0xfa>
 8005a0a:	6821      	ldr	r1, [r4, #0]
 8005a0c:	6833      	ldr	r3, [r6, #0]
 8005a0e:	0608      	lsls	r0, r1, #24
 8005a10:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a14:	d402      	bmi.n	8005a1c <_printf_i+0xe8>
 8005a16:	0649      	lsls	r1, r1, #25
 8005a18:	bf48      	it	mi
 8005a1a:	b2ad      	uxthmi	r5, r5
 8005a1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a1e:	6033      	str	r3, [r6, #0]
 8005a20:	bf14      	ite	ne
 8005a22:	230a      	movne	r3, #10
 8005a24:	2308      	moveq	r3, #8
 8005a26:	4850      	ldr	r0, [pc, #320]	@ (8005b68 <_printf_i+0x234>)
 8005a28:	2100      	movs	r1, #0
 8005a2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a2e:	6866      	ldr	r6, [r4, #4]
 8005a30:	2e00      	cmp	r6, #0
 8005a32:	60a6      	str	r6, [r4, #8]
 8005a34:	db05      	blt.n	8005a42 <_printf_i+0x10e>
 8005a36:	6821      	ldr	r1, [r4, #0]
 8005a38:	432e      	orrs	r6, r5
 8005a3a:	f021 0104 	bic.w	r1, r1, #4
 8005a3e:	6021      	str	r1, [r4, #0]
 8005a40:	d04b      	beq.n	8005ada <_printf_i+0x1a6>
 8005a42:	4616      	mov	r6, r2
 8005a44:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a48:	fb03 5711 	mls	r7, r3, r1, r5
 8005a4c:	5dc7      	ldrb	r7, [r0, r7]
 8005a4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a52:	462f      	mov	r7, r5
 8005a54:	42bb      	cmp	r3, r7
 8005a56:	460d      	mov	r5, r1
 8005a58:	d9f4      	bls.n	8005a44 <_printf_i+0x110>
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d10b      	bne.n	8005a76 <_printf_i+0x142>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	07df      	lsls	r7, r3, #31
 8005a62:	d508      	bpl.n	8005a76 <_printf_i+0x142>
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	6861      	ldr	r1, [r4, #4]
 8005a68:	4299      	cmp	r1, r3
 8005a6a:	bfde      	ittt	le
 8005a6c:	2330      	movle	r3, #48	@ 0x30
 8005a6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a76:	1b92      	subs	r2, r2, r6
 8005a78:	6122      	str	r2, [r4, #16]
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f8cd a000 	str.w	sl, [sp]
 8005a84:	aa03      	add	r2, sp, #12
 8005a86:	f7ff fee3 	bl	8005850 <_printf_common>
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d14a      	bne.n	8005b24 <_printf_i+0x1f0>
 8005a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a92:	b004      	add	sp, #16
 8005a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	f043 0320 	orr.w	r3, r3, #32
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	2778      	movs	r7, #120	@ 0x78
 8005aa2:	4832      	ldr	r0, [pc, #200]	@ (8005b6c <_printf_i+0x238>)
 8005aa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	6831      	ldr	r1, [r6, #0]
 8005aac:	061f      	lsls	r7, r3, #24
 8005aae:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ab2:	d402      	bmi.n	8005aba <_printf_i+0x186>
 8005ab4:	065f      	lsls	r7, r3, #25
 8005ab6:	bf48      	it	mi
 8005ab8:	b2ad      	uxthmi	r5, r5
 8005aba:	6031      	str	r1, [r6, #0]
 8005abc:	07d9      	lsls	r1, r3, #31
 8005abe:	bf44      	itt	mi
 8005ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac4:	6023      	strmi	r3, [r4, #0]
 8005ac6:	b11d      	cbz	r5, 8005ad0 <_printf_i+0x19c>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	e7ad      	b.n	8005a28 <_printf_i+0xf4>
 8005acc:	4826      	ldr	r0, [pc, #152]	@ (8005b68 <_printf_i+0x234>)
 8005ace:	e7e9      	b.n	8005aa4 <_printf_i+0x170>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	f023 0320 	bic.w	r3, r3, #32
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	e7f6      	b.n	8005ac8 <_printf_i+0x194>
 8005ada:	4616      	mov	r6, r2
 8005adc:	e7bd      	b.n	8005a5a <_printf_i+0x126>
 8005ade:	6833      	ldr	r3, [r6, #0]
 8005ae0:	6825      	ldr	r5, [r4, #0]
 8005ae2:	1d18      	adds	r0, r3, #4
 8005ae4:	6961      	ldr	r1, [r4, #20]
 8005ae6:	6030      	str	r0, [r6, #0]
 8005ae8:	062e      	lsls	r6, r5, #24
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	d501      	bpl.n	8005af2 <_printf_i+0x1be>
 8005aee:	6019      	str	r1, [r3, #0]
 8005af0:	e002      	b.n	8005af8 <_printf_i+0x1c4>
 8005af2:	0668      	lsls	r0, r5, #25
 8005af4:	d5fb      	bpl.n	8005aee <_printf_i+0x1ba>
 8005af6:	8019      	strh	r1, [r3, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	4616      	mov	r6, r2
 8005afc:	6123      	str	r3, [r4, #16]
 8005afe:	e7bc      	b.n	8005a7a <_printf_i+0x146>
 8005b00:	6833      	ldr	r3, [r6, #0]
 8005b02:	2100      	movs	r1, #0
 8005b04:	1d1a      	adds	r2, r3, #4
 8005b06:	6032      	str	r2, [r6, #0]
 8005b08:	681e      	ldr	r6, [r3, #0]
 8005b0a:	6862      	ldr	r2, [r4, #4]
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	f000 f9f6 	bl	8005efe <memchr>
 8005b12:	b108      	cbz	r0, 8005b18 <_printf_i+0x1e4>
 8005b14:	1b80      	subs	r0, r0, r6
 8005b16:	6060      	str	r0, [r4, #4]
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b22:	e7aa      	b.n	8005a7a <_printf_i+0x146>
 8005b24:	4632      	mov	r2, r6
 8005b26:	4649      	mov	r1, r9
 8005b28:	4640      	mov	r0, r8
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	47d0      	blx	sl
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d0ad      	beq.n	8005a8e <_printf_i+0x15a>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	079b      	lsls	r3, r3, #30
 8005b36:	d413      	bmi.n	8005b60 <_printf_i+0x22c>
 8005b38:	68e0      	ldr	r0, [r4, #12]
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	4298      	cmp	r0, r3
 8005b3e:	bfb8      	it	lt
 8005b40:	4618      	movlt	r0, r3
 8005b42:	e7a6      	b.n	8005a92 <_printf_i+0x15e>
 8005b44:	2301      	movs	r3, #1
 8005b46:	4632      	mov	r2, r6
 8005b48:	4649      	mov	r1, r9
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	47d0      	blx	sl
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d09d      	beq.n	8005a8e <_printf_i+0x15a>
 8005b52:	3501      	adds	r5, #1
 8005b54:	68e3      	ldr	r3, [r4, #12]
 8005b56:	9903      	ldr	r1, [sp, #12]
 8005b58:	1a5b      	subs	r3, r3, r1
 8005b5a:	42ab      	cmp	r3, r5
 8005b5c:	dcf2      	bgt.n	8005b44 <_printf_i+0x210>
 8005b5e:	e7eb      	b.n	8005b38 <_printf_i+0x204>
 8005b60:	2500      	movs	r5, #0
 8005b62:	f104 0619 	add.w	r6, r4, #25
 8005b66:	e7f5      	b.n	8005b54 <_printf_i+0x220>
 8005b68:	08008028 	.word	0x08008028
 8005b6c:	08008039 	.word	0x08008039

08005b70 <std>:
 8005b70:	2300      	movs	r3, #0
 8005b72:	b510      	push	{r4, lr}
 8005b74:	4604      	mov	r4, r0
 8005b76:	e9c0 3300 	strd	r3, r3, [r0]
 8005b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b7e:	6083      	str	r3, [r0, #8]
 8005b80:	8181      	strh	r1, [r0, #12]
 8005b82:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b84:	81c2      	strh	r2, [r0, #14]
 8005b86:	6183      	str	r3, [r0, #24]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	305c      	adds	r0, #92	@ 0x5c
 8005b8e:	f000 f92a 	bl	8005de6 <memset>
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <std+0x58>)
 8005b94:	6224      	str	r4, [r4, #32]
 8005b96:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b98:	4b0c      	ldr	r3, [pc, #48]	@ (8005bcc <std+0x5c>)
 8005b9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <std+0x60>)
 8005b9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <std+0x64>)
 8005ba2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <std+0x68>)
 8005ba6:	429c      	cmp	r4, r3
 8005ba8:	d006      	beq.n	8005bb8 <std+0x48>
 8005baa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bae:	4294      	cmp	r4, r2
 8005bb0:	d002      	beq.n	8005bb8 <std+0x48>
 8005bb2:	33d0      	adds	r3, #208	@ 0xd0
 8005bb4:	429c      	cmp	r4, r3
 8005bb6:	d105      	bne.n	8005bc4 <std+0x54>
 8005bb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc0:	f000 b99a 	b.w	8005ef8 <__retarget_lock_init_recursive>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08005d61 	.word	0x08005d61
 8005bcc:	08005d83 	.word	0x08005d83
 8005bd0:	08005dbb 	.word	0x08005dbb
 8005bd4:	08005ddf 	.word	0x08005ddf
 8005bd8:	20000394 	.word	0x20000394

08005bdc <stdio_exit_handler>:
 8005bdc:	4a02      	ldr	r2, [pc, #8]	@ (8005be8 <stdio_exit_handler+0xc>)
 8005bde:	4903      	ldr	r1, [pc, #12]	@ (8005bec <stdio_exit_handler+0x10>)
 8005be0:	4803      	ldr	r0, [pc, #12]	@ (8005bf0 <stdio_exit_handler+0x14>)
 8005be2:	f000 b869 	b.w	8005cb8 <_fwalk_sglue>
 8005be6:	bf00      	nop
 8005be8:	2000000c 	.word	0x2000000c
 8005bec:	08007879 	.word	0x08007879
 8005bf0:	2000001c 	.word	0x2000001c

08005bf4 <cleanup_stdio>:
 8005bf4:	6841      	ldr	r1, [r0, #4]
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8005c28 <cleanup_stdio+0x34>)
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	d001      	beq.n	8005c04 <cleanup_stdio+0x10>
 8005c00:	f001 fe3a 	bl	8007878 <_fflush_r>
 8005c04:	68a1      	ldr	r1, [r4, #8]
 8005c06:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <cleanup_stdio+0x38>)
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	d002      	beq.n	8005c12 <cleanup_stdio+0x1e>
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f001 fe33 	bl	8007878 <_fflush_r>
 8005c12:	68e1      	ldr	r1, [r4, #12]
 8005c14:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <cleanup_stdio+0x3c>)
 8005c16:	4299      	cmp	r1, r3
 8005c18:	d004      	beq.n	8005c24 <cleanup_stdio+0x30>
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f001 be2a 	b.w	8007878 <_fflush_r>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	20000394 	.word	0x20000394
 8005c2c:	200003fc 	.word	0x200003fc
 8005c30:	20000464 	.word	0x20000464

08005c34 <global_stdio_init.part.0>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <global_stdio_init.part.0+0x30>)
 8005c38:	4c0b      	ldr	r4, [pc, #44]	@ (8005c68 <global_stdio_init.part.0+0x34>)
 8005c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c6c <global_stdio_init.part.0+0x38>)
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	2104      	movs	r1, #4
 8005c42:	2200      	movs	r2, #0
 8005c44:	f7ff ff94 	bl	8005b70 <std>
 8005c48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	2109      	movs	r1, #9
 8005c50:	f7ff ff8e 	bl	8005b70 <std>
 8005c54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c58:	2202      	movs	r2, #2
 8005c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c5e:	2112      	movs	r1, #18
 8005c60:	f7ff bf86 	b.w	8005b70 <std>
 8005c64:	200004cc 	.word	0x200004cc
 8005c68:	20000394 	.word	0x20000394
 8005c6c:	08005bdd 	.word	0x08005bdd

08005c70 <__sfp_lock_acquire>:
 8005c70:	4801      	ldr	r0, [pc, #4]	@ (8005c78 <__sfp_lock_acquire+0x8>)
 8005c72:	f000 b942 	b.w	8005efa <__retarget_lock_acquire_recursive>
 8005c76:	bf00      	nop
 8005c78:	200004d5 	.word	0x200004d5

08005c7c <__sfp_lock_release>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	@ (8005c84 <__sfp_lock_release+0x8>)
 8005c7e:	f000 b93d 	b.w	8005efc <__retarget_lock_release_recursive>
 8005c82:	bf00      	nop
 8005c84:	200004d5 	.word	0x200004d5

08005c88 <__sinit>:
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	f7ff fff0 	bl	8005c70 <__sfp_lock_acquire>
 8005c90:	6a23      	ldr	r3, [r4, #32]
 8005c92:	b11b      	cbz	r3, 8005c9c <__sinit+0x14>
 8005c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c98:	f7ff bff0 	b.w	8005c7c <__sfp_lock_release>
 8005c9c:	4b04      	ldr	r3, [pc, #16]	@ (8005cb0 <__sinit+0x28>)
 8005c9e:	6223      	str	r3, [r4, #32]
 8005ca0:	4b04      	ldr	r3, [pc, #16]	@ (8005cb4 <__sinit+0x2c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1f5      	bne.n	8005c94 <__sinit+0xc>
 8005ca8:	f7ff ffc4 	bl	8005c34 <global_stdio_init.part.0>
 8005cac:	e7f2      	b.n	8005c94 <__sinit+0xc>
 8005cae:	bf00      	nop
 8005cb0:	08005bf5 	.word	0x08005bf5
 8005cb4:	200004cc 	.word	0x200004cc

08005cb8 <_fwalk_sglue>:
 8005cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	4688      	mov	r8, r1
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cc8:	f1b9 0901 	subs.w	r9, r9, #1
 8005ccc:	d505      	bpl.n	8005cda <_fwalk_sglue+0x22>
 8005cce:	6824      	ldr	r4, [r4, #0]
 8005cd0:	2c00      	cmp	r4, #0
 8005cd2:	d1f7      	bne.n	8005cc4 <_fwalk_sglue+0xc>
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cda:	89ab      	ldrh	r3, [r5, #12]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d907      	bls.n	8005cf0 <_fwalk_sglue+0x38>
 8005ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	d003      	beq.n	8005cf0 <_fwalk_sglue+0x38>
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4638      	mov	r0, r7
 8005cec:	47c0      	blx	r8
 8005cee:	4306      	orrs	r6, r0
 8005cf0:	3568      	adds	r5, #104	@ 0x68
 8005cf2:	e7e9      	b.n	8005cc8 <_fwalk_sglue+0x10>

08005cf4 <sniprintf>:
 8005cf4:	b40c      	push	{r2, r3}
 8005cf6:	b530      	push	{r4, r5, lr}
 8005cf8:	4b18      	ldr	r3, [pc, #96]	@ (8005d5c <sniprintf+0x68>)
 8005cfa:	1e0c      	subs	r4, r1, #0
 8005cfc:	681d      	ldr	r5, [r3, #0]
 8005cfe:	b09d      	sub	sp, #116	@ 0x74
 8005d00:	da08      	bge.n	8005d14 <sniprintf+0x20>
 8005d02:	238b      	movs	r3, #139	@ 0x8b
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	b01d      	add	sp, #116	@ 0x74
 8005d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d10:	b002      	add	sp, #8
 8005d12:	4770      	bx	lr
 8005d14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005d22:	bf0c      	ite	eq
 8005d24:	4623      	moveq	r3, r4
 8005d26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	9307      	str	r3, [sp, #28]
 8005d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d32:	9002      	str	r0, [sp, #8]
 8005d34:	9006      	str	r0, [sp, #24]
 8005d36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	ab21      	add	r3, sp, #132	@ 0x84
 8005d3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d40:	a902      	add	r1, sp, #8
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	f001 fc1c 	bl	8007580 <_svfiprintf_r>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	bfbc      	itt	lt
 8005d4c:	238b      	movlt	r3, #139	@ 0x8b
 8005d4e:	602b      	strlt	r3, [r5, #0]
 8005d50:	2c00      	cmp	r4, #0
 8005d52:	d0da      	beq.n	8005d0a <sniprintf+0x16>
 8005d54:	2200      	movs	r2, #0
 8005d56:	9b02      	ldr	r3, [sp, #8]
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	e7d6      	b.n	8005d0a <sniprintf+0x16>
 8005d5c:	20000018 	.word	0x20000018

08005d60 <__sread>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	460c      	mov	r4, r1
 8005d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d68:	f000 f878 	bl	8005e5c <_read_r>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	bfab      	itete	ge
 8005d70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d72:	89a3      	ldrhlt	r3, [r4, #12]
 8005d74:	181b      	addge	r3, r3, r0
 8005d76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d7a:	bfac      	ite	ge
 8005d7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d7e:	81a3      	strhlt	r3, [r4, #12]
 8005d80:	bd10      	pop	{r4, pc}

08005d82 <__swrite>:
 8005d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d86:	461f      	mov	r7, r3
 8005d88:	898b      	ldrh	r3, [r1, #12]
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	05db      	lsls	r3, r3, #23
 8005d8e:	460c      	mov	r4, r1
 8005d90:	4616      	mov	r6, r2
 8005d92:	d505      	bpl.n	8005da0 <__swrite+0x1e>
 8005d94:	2302      	movs	r3, #2
 8005d96:	2200      	movs	r2, #0
 8005d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9c:	f000 f84c 	bl	8005e38 <_lseek_r>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	4632      	mov	r2, r6
 8005da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	4628      	mov	r0, r5
 8005dac:	463b      	mov	r3, r7
 8005dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005db6:	f000 b863 	b.w	8005e80 <_write_r>

08005dba <__sseek>:
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc2:	f000 f839 	bl	8005e38 <_lseek_r>
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	bf15      	itete	ne
 8005dcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dd6:	81a3      	strheq	r3, [r4, #12]
 8005dd8:	bf18      	it	ne
 8005dda:	81a3      	strhne	r3, [r4, #12]
 8005ddc:	bd10      	pop	{r4, pc}

08005dde <__sclose>:
 8005dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de2:	f000 b819 	b.w	8005e18 <_close_r>

08005de6 <memset>:
 8005de6:	4603      	mov	r3, r0
 8005de8:	4402      	add	r2, r0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d100      	bne.n	8005df0 <memset+0xa>
 8005dee:	4770      	bx	lr
 8005df0:	f803 1b01 	strb.w	r1, [r3], #1
 8005df4:	e7f9      	b.n	8005dea <memset+0x4>

08005df6 <strnlen>:
 8005df6:	4602      	mov	r2, r0
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4401      	add	r1, r0
 8005dfc:	428a      	cmp	r2, r1
 8005dfe:	4613      	mov	r3, r2
 8005e00:	d003      	beq.n	8005e0a <strnlen+0x14>
 8005e02:	781c      	ldrb	r4, [r3, #0]
 8005e04:	3201      	adds	r2, #1
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	d1f8      	bne.n	8005dfc <strnlen+0x6>
 8005e0a:	1a18      	subs	r0, r3, r0
 8005e0c:	bd10      	pop	{r4, pc}
	...

08005e10 <_localeconv_r>:
 8005e10:	4800      	ldr	r0, [pc, #0]	@ (8005e14 <_localeconv_r+0x4>)
 8005e12:	4770      	bx	lr
 8005e14:	20000158 	.word	0x20000158

08005e18 <_close_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4d05      	ldr	r5, [pc, #20]	@ (8005e34 <_close_r+0x1c>)
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	f7fb fa43 	bl	80012ae <_close>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_close_r+0x1a>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_close_r+0x1a>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	200004d0 	.word	0x200004d0

08005e38 <_lseek_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	2200      	movs	r2, #0
 8005e42:	4d05      	ldr	r5, [pc, #20]	@ (8005e58 <_lseek_r+0x20>)
 8005e44:	602a      	str	r2, [r5, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f7fb fa55 	bl	80012f6 <_lseek>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_lseek_r+0x1e>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_lseek_r+0x1e>
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	200004d0 	.word	0x200004d0

08005e5c <_read_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4608      	mov	r0, r1
 8005e62:	4611      	mov	r1, r2
 8005e64:	2200      	movs	r2, #0
 8005e66:	4d05      	ldr	r5, [pc, #20]	@ (8005e7c <_read_r+0x20>)
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7fb f9e6 	bl	800123c <_read>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_read_r+0x1e>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_read_r+0x1e>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	200004d0 	.word	0x200004d0

08005e80 <_write_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4604      	mov	r4, r0
 8005e84:	4608      	mov	r0, r1
 8005e86:	4611      	mov	r1, r2
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4d05      	ldr	r5, [pc, #20]	@ (8005ea0 <_write_r+0x20>)
 8005e8c:	602a      	str	r2, [r5, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f7fb f9f1 	bl	8001276 <_write>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_write_r+0x1e>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_write_r+0x1e>
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	200004d0 	.word	0x200004d0

08005ea4 <__errno>:
 8005ea4:	4b01      	ldr	r3, [pc, #4]	@ (8005eac <__errno+0x8>)
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000018 	.word	0x20000018

08005eb0 <__libc_init_array>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	4d0c      	ldr	r5, [pc, #48]	@ (8005ee8 <__libc_init_array+0x38>)
 8005eb6:	4c0d      	ldr	r4, [pc, #52]	@ (8005eec <__libc_init_array+0x3c>)
 8005eb8:	1b64      	subs	r4, r4, r5
 8005eba:	10a4      	asrs	r4, r4, #2
 8005ebc:	42a6      	cmp	r6, r4
 8005ebe:	d109      	bne.n	8005ed4 <__libc_init_array+0x24>
 8005ec0:	f002 f876 	bl	8007fb0 <_init>
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	4d0a      	ldr	r5, [pc, #40]	@ (8005ef0 <__libc_init_array+0x40>)
 8005ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8005ef4 <__libc_init_array+0x44>)
 8005eca:	1b64      	subs	r4, r4, r5
 8005ecc:	10a4      	asrs	r4, r4, #2
 8005ece:	42a6      	cmp	r6, r4
 8005ed0:	d105      	bne.n	8005ede <__libc_init_array+0x2e>
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed8:	4798      	blx	r3
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7ee      	b.n	8005ebc <__libc_init_array+0xc>
 8005ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee2:	4798      	blx	r3
 8005ee4:	3601      	adds	r6, #1
 8005ee6:	e7f2      	b.n	8005ece <__libc_init_array+0x1e>
 8005ee8:	08008394 	.word	0x08008394
 8005eec:	08008394 	.word	0x08008394
 8005ef0:	08008394 	.word	0x08008394
 8005ef4:	08008398 	.word	0x08008398

08005ef8 <__retarget_lock_init_recursive>:
 8005ef8:	4770      	bx	lr

08005efa <__retarget_lock_acquire_recursive>:
 8005efa:	4770      	bx	lr

08005efc <__retarget_lock_release_recursive>:
 8005efc:	4770      	bx	lr

08005efe <memchr>:
 8005efe:	4603      	mov	r3, r0
 8005f00:	b510      	push	{r4, lr}
 8005f02:	b2c9      	uxtb	r1, r1
 8005f04:	4402      	add	r2, r0
 8005f06:	4293      	cmp	r3, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	d101      	bne.n	8005f10 <memchr+0x12>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	e003      	b.n	8005f18 <memchr+0x1a>
 8005f10:	7804      	ldrb	r4, [r0, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	428c      	cmp	r4, r1
 8005f16:	d1f6      	bne.n	8005f06 <memchr+0x8>
 8005f18:	bd10      	pop	{r4, pc}

08005f1a <quorem>:
 8005f1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1e:	6903      	ldr	r3, [r0, #16]
 8005f20:	690c      	ldr	r4, [r1, #16]
 8005f22:	4607      	mov	r7, r0
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	db7e      	blt.n	8006026 <quorem+0x10c>
 8005f28:	3c01      	subs	r4, #1
 8005f2a:	00a3      	lsls	r3, r4, #2
 8005f2c:	f100 0514 	add.w	r5, r0, #20
 8005f30:	f101 0814 	add.w	r8, r1, #20
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f44:	3301      	adds	r3, #1
 8005f46:	429a      	cmp	r2, r3
 8005f48:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f50:	d32e      	bcc.n	8005fb0 <quorem+0x96>
 8005f52:	f04f 0a00 	mov.w	sl, #0
 8005f56:	46c4      	mov	ip, r8
 8005f58:	46ae      	mov	lr, r5
 8005f5a:	46d3      	mov	fp, sl
 8005f5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f60:	b298      	uxth	r0, r3
 8005f62:	fb06 a000 	mla	r0, r6, r0, sl
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	0c02      	lsrs	r2, r0, #16
 8005f6a:	fb06 2303 	mla	r3, r6, r3, r2
 8005f6e:	f8de 2000 	ldr.w	r2, [lr]
 8005f72:	b280      	uxth	r0, r0
 8005f74:	b292      	uxth	r2, r2
 8005f76:	1a12      	subs	r2, r2, r0
 8005f78:	445a      	add	r2, fp
 8005f7a:	f8de 0000 	ldr.w	r0, [lr]
 8005f7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f8c:	b292      	uxth	r2, r2
 8005f8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f92:	45e1      	cmp	r9, ip
 8005f94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f98:	f84e 2b04 	str.w	r2, [lr], #4
 8005f9c:	d2de      	bcs.n	8005f5c <quorem+0x42>
 8005f9e:	9b00      	ldr	r3, [sp, #0]
 8005fa0:	58eb      	ldr	r3, [r5, r3]
 8005fa2:	b92b      	cbnz	r3, 8005fb0 <quorem+0x96>
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	3b04      	subs	r3, #4
 8005fa8:	429d      	cmp	r5, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	d32f      	bcc.n	800600e <quorem+0xf4>
 8005fae:	613c      	str	r4, [r7, #16]
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	f001 f981 	bl	80072b8 <__mcmp>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	db25      	blt.n	8006006 <quorem+0xec>
 8005fba:	4629      	mov	r1, r5
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fc2:	f8d1 c000 	ldr.w	ip, [r1]
 8005fc6:	fa1f fe82 	uxth.w	lr, r2
 8005fca:	fa1f f38c 	uxth.w	r3, ip
 8005fce:	eba3 030e 	sub.w	r3, r3, lr
 8005fd2:	4403      	add	r3, r0
 8005fd4:	0c12      	lsrs	r2, r2, #16
 8005fd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005fda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe4:	45c1      	cmp	r9, r8
 8005fe6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fea:	f841 3b04 	str.w	r3, [r1], #4
 8005fee:	d2e6      	bcs.n	8005fbe <quorem+0xa4>
 8005ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ff4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ff8:	b922      	cbnz	r2, 8006004 <quorem+0xea>
 8005ffa:	3b04      	subs	r3, #4
 8005ffc:	429d      	cmp	r5, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	d30b      	bcc.n	800601a <quorem+0x100>
 8006002:	613c      	str	r4, [r7, #16]
 8006004:	3601      	adds	r6, #1
 8006006:	4630      	mov	r0, r6
 8006008:	b003      	add	sp, #12
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	3b04      	subs	r3, #4
 8006012:	2a00      	cmp	r2, #0
 8006014:	d1cb      	bne.n	8005fae <quorem+0x94>
 8006016:	3c01      	subs	r4, #1
 8006018:	e7c6      	b.n	8005fa8 <quorem+0x8e>
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	3b04      	subs	r3, #4
 800601e:	2a00      	cmp	r2, #0
 8006020:	d1ef      	bne.n	8006002 <quorem+0xe8>
 8006022:	3c01      	subs	r4, #1
 8006024:	e7ea      	b.n	8005ffc <quorem+0xe2>
 8006026:	2000      	movs	r0, #0
 8006028:	e7ee      	b.n	8006008 <quorem+0xee>
 800602a:	0000      	movs	r0, r0
 800602c:	0000      	movs	r0, r0
	...

08006030 <_dtoa_r>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	4614      	mov	r4, r2
 8006036:	461d      	mov	r5, r3
 8006038:	69c7      	ldr	r7, [r0, #28]
 800603a:	b097      	sub	sp, #92	@ 0x5c
 800603c:	4681      	mov	r9, r0
 800603e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006042:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006044:	b97f      	cbnz	r7, 8006066 <_dtoa_r+0x36>
 8006046:	2010      	movs	r0, #16
 8006048:	f000 fe0e 	bl	8006c68 <malloc>
 800604c:	4602      	mov	r2, r0
 800604e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006052:	b920      	cbnz	r0, 800605e <_dtoa_r+0x2e>
 8006054:	21ef      	movs	r1, #239	@ 0xef
 8006056:	4bac      	ldr	r3, [pc, #688]	@ (8006308 <_dtoa_r+0x2d8>)
 8006058:	48ac      	ldr	r0, [pc, #688]	@ (800630c <_dtoa_r+0x2dc>)
 800605a:	f001 fc6d 	bl	8007938 <__assert_func>
 800605e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006062:	6007      	str	r7, [r0, #0]
 8006064:	60c7      	str	r7, [r0, #12]
 8006066:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	b159      	cbz	r1, 8006086 <_dtoa_r+0x56>
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	2301      	movs	r3, #1
 8006072:	4093      	lsls	r3, r2
 8006074:	604a      	str	r2, [r1, #4]
 8006076:	608b      	str	r3, [r1, #8]
 8006078:	4648      	mov	r0, r9
 800607a:	f000 feeb 	bl	8006e54 <_Bfree>
 800607e:	2200      	movs	r2, #0
 8006080:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	1e2b      	subs	r3, r5, #0
 8006088:	bfaf      	iteee	ge
 800608a:	2300      	movge	r3, #0
 800608c:	2201      	movlt	r2, #1
 800608e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006092:	9307      	strlt	r3, [sp, #28]
 8006094:	bfa8      	it	ge
 8006096:	6033      	strge	r3, [r6, #0]
 8006098:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800609c:	4b9c      	ldr	r3, [pc, #624]	@ (8006310 <_dtoa_r+0x2e0>)
 800609e:	bfb8      	it	lt
 80060a0:	6032      	strlt	r2, [r6, #0]
 80060a2:	ea33 0308 	bics.w	r3, r3, r8
 80060a6:	d112      	bne.n	80060ce <_dtoa_r+0x9e>
 80060a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80060ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80060b4:	4323      	orrs	r3, r4
 80060b6:	f000 855e 	beq.w	8006b76 <_dtoa_r+0xb46>
 80060ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006314 <_dtoa_r+0x2e4>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8560 	beq.w	8006b86 <_dtoa_r+0xb56>
 80060c6:	f10a 0303 	add.w	r3, sl, #3
 80060ca:	f000 bd5a 	b.w	8006b82 <_dtoa_r+0xb52>
 80060ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80060d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060da:	2200      	movs	r2, #0
 80060dc:	2300      	movs	r3, #0
 80060de:	f7fa fc63 	bl	80009a8 <__aeabi_dcmpeq>
 80060e2:	4607      	mov	r7, r0
 80060e4:	b158      	cbz	r0, 80060fe <_dtoa_r+0xce>
 80060e6:	2301      	movs	r3, #1
 80060e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060ee:	b113      	cbz	r3, 80060f6 <_dtoa_r+0xc6>
 80060f0:	4b89      	ldr	r3, [pc, #548]	@ (8006318 <_dtoa_r+0x2e8>)
 80060f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800631c <_dtoa_r+0x2ec>
 80060fa:	f000 bd44 	b.w	8006b86 <_dtoa_r+0xb56>
 80060fe:	ab14      	add	r3, sp, #80	@ 0x50
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	ab15      	add	r3, sp, #84	@ 0x54
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	4648      	mov	r0, r9
 8006108:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800610c:	f001 f984 	bl	8007418 <__d2b>
 8006110:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006114:	9003      	str	r0, [sp, #12]
 8006116:	2e00      	cmp	r6, #0
 8006118:	d078      	beq.n	800620c <_dtoa_r+0x1dc>
 800611a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800611e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006120:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006128:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800612c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006130:	9712      	str	r7, [sp, #72]	@ 0x48
 8006132:	4619      	mov	r1, r3
 8006134:	2200      	movs	r2, #0
 8006136:	4b7a      	ldr	r3, [pc, #488]	@ (8006320 <_dtoa_r+0x2f0>)
 8006138:	f7fa f816 	bl	8000168 <__aeabi_dsub>
 800613c:	a36c      	add	r3, pc, #432	@ (adr r3, 80062f0 <_dtoa_r+0x2c0>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f7fa f9c9 	bl	80004d8 <__aeabi_dmul>
 8006146:	a36c      	add	r3, pc, #432	@ (adr r3, 80062f8 <_dtoa_r+0x2c8>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7fa f80e 	bl	800016c <__adddf3>
 8006150:	4604      	mov	r4, r0
 8006152:	4630      	mov	r0, r6
 8006154:	460d      	mov	r5, r1
 8006156:	f7fa f955 	bl	8000404 <__aeabi_i2d>
 800615a:	a369      	add	r3, pc, #420	@ (adr r3, 8006300 <_dtoa_r+0x2d0>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f7fa f9ba 	bl	80004d8 <__aeabi_dmul>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4620      	mov	r0, r4
 800616a:	4629      	mov	r1, r5
 800616c:	f7f9 fffe 	bl	800016c <__adddf3>
 8006170:	4604      	mov	r4, r0
 8006172:	460d      	mov	r5, r1
 8006174:	f7fa fc60 	bl	8000a38 <__aeabi_d2iz>
 8006178:	2200      	movs	r2, #0
 800617a:	4607      	mov	r7, r0
 800617c:	2300      	movs	r3, #0
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	f7fa fc1b 	bl	80009bc <__aeabi_dcmplt>
 8006186:	b140      	cbz	r0, 800619a <_dtoa_r+0x16a>
 8006188:	4638      	mov	r0, r7
 800618a:	f7fa f93b 	bl	8000404 <__aeabi_i2d>
 800618e:	4622      	mov	r2, r4
 8006190:	462b      	mov	r3, r5
 8006192:	f7fa fc09 	bl	80009a8 <__aeabi_dcmpeq>
 8006196:	b900      	cbnz	r0, 800619a <_dtoa_r+0x16a>
 8006198:	3f01      	subs	r7, #1
 800619a:	2f16      	cmp	r7, #22
 800619c:	d854      	bhi.n	8006248 <_dtoa_r+0x218>
 800619e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061a2:	4b60      	ldr	r3, [pc, #384]	@ (8006324 <_dtoa_r+0x2f4>)
 80061a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7fa fc06 	bl	80009bc <__aeabi_dcmplt>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d04b      	beq.n	800624c <_dtoa_r+0x21c>
 80061b4:	2300      	movs	r3, #0
 80061b6:	3f01      	subs	r7, #1
 80061b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061bc:	1b9b      	subs	r3, r3, r6
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	bf49      	itett	mi
 80061c2:	f1c3 0301 	rsbmi	r3, r3, #1
 80061c6:	2300      	movpl	r3, #0
 80061c8:	9304      	strmi	r3, [sp, #16]
 80061ca:	2300      	movmi	r3, #0
 80061cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80061ce:	bf54      	ite	pl
 80061d0:	9304      	strpl	r3, [sp, #16]
 80061d2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	db3b      	blt.n	8006250 <_dtoa_r+0x220>
 80061d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061da:	970e      	str	r7, [sp, #56]	@ 0x38
 80061dc:	443b      	add	r3, r7
 80061de:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e0:	2300      	movs	r3, #0
 80061e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80061e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	d865      	bhi.n	80062b6 <_dtoa_r+0x286>
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	bfc4      	itt	gt
 80061ee:	3b04      	subgt	r3, #4
 80061f0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80061f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061f4:	bfc8      	it	gt
 80061f6:	2400      	movgt	r4, #0
 80061f8:	f1a3 0302 	sub.w	r3, r3, #2
 80061fc:	bfd8      	it	le
 80061fe:	2401      	movle	r4, #1
 8006200:	2b03      	cmp	r3, #3
 8006202:	d864      	bhi.n	80062ce <_dtoa_r+0x29e>
 8006204:	e8df f003 	tbb	[pc, r3]
 8006208:	2c385553 	.word	0x2c385553
 800620c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006210:	441e      	add	r6, r3
 8006212:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006216:	2b20      	cmp	r3, #32
 8006218:	bfc1      	itttt	gt
 800621a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800621e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006222:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006226:	fa24 f303 	lsrgt.w	r3, r4, r3
 800622a:	bfd6      	itet	le
 800622c:	f1c3 0320 	rsble	r3, r3, #32
 8006230:	ea48 0003 	orrgt.w	r0, r8, r3
 8006234:	fa04 f003 	lslle.w	r0, r4, r3
 8006238:	f7fa f8d4 	bl	80003e4 <__aeabi_ui2d>
 800623c:	2201      	movs	r2, #1
 800623e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006242:	3e01      	subs	r6, #1
 8006244:	9212      	str	r2, [sp, #72]	@ 0x48
 8006246:	e774      	b.n	8006132 <_dtoa_r+0x102>
 8006248:	2301      	movs	r3, #1
 800624a:	e7b5      	b.n	80061b8 <_dtoa_r+0x188>
 800624c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800624e:	e7b4      	b.n	80061ba <_dtoa_r+0x18a>
 8006250:	9b04      	ldr	r3, [sp, #16]
 8006252:	1bdb      	subs	r3, r3, r7
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	427b      	negs	r3, r7
 8006258:	930a      	str	r3, [sp, #40]	@ 0x28
 800625a:	2300      	movs	r3, #0
 800625c:	930e      	str	r3, [sp, #56]	@ 0x38
 800625e:	e7c1      	b.n	80061e4 <_dtoa_r+0x1b4>
 8006260:	2301      	movs	r3, #1
 8006262:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006264:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006266:	eb07 0b03 	add.w	fp, r7, r3
 800626a:	f10b 0301 	add.w	r3, fp, #1
 800626e:	2b01      	cmp	r3, #1
 8006270:	9308      	str	r3, [sp, #32]
 8006272:	bfb8      	it	lt
 8006274:	2301      	movlt	r3, #1
 8006276:	e006      	b.n	8006286 <_dtoa_r+0x256>
 8006278:	2301      	movs	r3, #1
 800627a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800627c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800627e:	2b00      	cmp	r3, #0
 8006280:	dd28      	ble.n	80062d4 <_dtoa_r+0x2a4>
 8006282:	469b      	mov	fp, r3
 8006284:	9308      	str	r3, [sp, #32]
 8006286:	2100      	movs	r1, #0
 8006288:	2204      	movs	r2, #4
 800628a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800628e:	f102 0514 	add.w	r5, r2, #20
 8006292:	429d      	cmp	r5, r3
 8006294:	d926      	bls.n	80062e4 <_dtoa_r+0x2b4>
 8006296:	6041      	str	r1, [r0, #4]
 8006298:	4648      	mov	r0, r9
 800629a:	f000 fd9b 	bl	8006dd4 <_Balloc>
 800629e:	4682      	mov	sl, r0
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d143      	bne.n	800632c <_dtoa_r+0x2fc>
 80062a4:	4602      	mov	r2, r0
 80062a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80062aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006328 <_dtoa_r+0x2f8>)
 80062ac:	e6d4      	b.n	8006058 <_dtoa_r+0x28>
 80062ae:	2300      	movs	r3, #0
 80062b0:	e7e3      	b.n	800627a <_dtoa_r+0x24a>
 80062b2:	2300      	movs	r3, #0
 80062b4:	e7d5      	b.n	8006262 <_dtoa_r+0x232>
 80062b6:	2401      	movs	r4, #1
 80062b8:	2300      	movs	r3, #0
 80062ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80062bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80062be:	f04f 3bff 	mov.w	fp, #4294967295
 80062c2:	2200      	movs	r2, #0
 80062c4:	2312      	movs	r3, #18
 80062c6:	f8cd b020 	str.w	fp, [sp, #32]
 80062ca:	9221      	str	r2, [sp, #132]	@ 0x84
 80062cc:	e7db      	b.n	8006286 <_dtoa_r+0x256>
 80062ce:	2301      	movs	r3, #1
 80062d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062d2:	e7f4      	b.n	80062be <_dtoa_r+0x28e>
 80062d4:	f04f 0b01 	mov.w	fp, #1
 80062d8:	465b      	mov	r3, fp
 80062da:	f8cd b020 	str.w	fp, [sp, #32]
 80062de:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80062e2:	e7d0      	b.n	8006286 <_dtoa_r+0x256>
 80062e4:	3101      	adds	r1, #1
 80062e6:	0052      	lsls	r2, r2, #1
 80062e8:	e7d1      	b.n	800628e <_dtoa_r+0x25e>
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w
 80062f0:	636f4361 	.word	0x636f4361
 80062f4:	3fd287a7 	.word	0x3fd287a7
 80062f8:	8b60c8b3 	.word	0x8b60c8b3
 80062fc:	3fc68a28 	.word	0x3fc68a28
 8006300:	509f79fb 	.word	0x509f79fb
 8006304:	3fd34413 	.word	0x3fd34413
 8006308:	08008057 	.word	0x08008057
 800630c:	0800806e 	.word	0x0800806e
 8006310:	7ff00000 	.word	0x7ff00000
 8006314:	08008053 	.word	0x08008053
 8006318:	08008027 	.word	0x08008027
 800631c:	08008026 	.word	0x08008026
 8006320:	3ff80000 	.word	0x3ff80000
 8006324:	080081c0 	.word	0x080081c0
 8006328:	080080c6 	.word	0x080080c6
 800632c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006330:	6018      	str	r0, [r3, #0]
 8006332:	9b08      	ldr	r3, [sp, #32]
 8006334:	2b0e      	cmp	r3, #14
 8006336:	f200 80a1 	bhi.w	800647c <_dtoa_r+0x44c>
 800633a:	2c00      	cmp	r4, #0
 800633c:	f000 809e 	beq.w	800647c <_dtoa_r+0x44c>
 8006340:	2f00      	cmp	r7, #0
 8006342:	dd33      	ble.n	80063ac <_dtoa_r+0x37c>
 8006344:	4b9c      	ldr	r3, [pc, #624]	@ (80065b8 <_dtoa_r+0x588>)
 8006346:	f007 020f 	and.w	r2, r7, #15
 800634a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800634e:	05f8      	lsls	r0, r7, #23
 8006350:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006354:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006358:	ea4f 1427 	mov.w	r4, r7, asr #4
 800635c:	d516      	bpl.n	800638c <_dtoa_r+0x35c>
 800635e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006362:	4b96      	ldr	r3, [pc, #600]	@ (80065bc <_dtoa_r+0x58c>)
 8006364:	2603      	movs	r6, #3
 8006366:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800636a:	f7fa f9df 	bl	800072c <__aeabi_ddiv>
 800636e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006372:	f004 040f 	and.w	r4, r4, #15
 8006376:	4d91      	ldr	r5, [pc, #580]	@ (80065bc <_dtoa_r+0x58c>)
 8006378:	b954      	cbnz	r4, 8006390 <_dtoa_r+0x360>
 800637a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800637e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006382:	f7fa f9d3 	bl	800072c <__aeabi_ddiv>
 8006386:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800638a:	e028      	b.n	80063de <_dtoa_r+0x3ae>
 800638c:	2602      	movs	r6, #2
 800638e:	e7f2      	b.n	8006376 <_dtoa_r+0x346>
 8006390:	07e1      	lsls	r1, r4, #31
 8006392:	d508      	bpl.n	80063a6 <_dtoa_r+0x376>
 8006394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800639c:	f7fa f89c 	bl	80004d8 <__aeabi_dmul>
 80063a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063a4:	3601      	adds	r6, #1
 80063a6:	1064      	asrs	r4, r4, #1
 80063a8:	3508      	adds	r5, #8
 80063aa:	e7e5      	b.n	8006378 <_dtoa_r+0x348>
 80063ac:	f000 80af 	beq.w	800650e <_dtoa_r+0x4de>
 80063b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063b4:	427c      	negs	r4, r7
 80063b6:	4b80      	ldr	r3, [pc, #512]	@ (80065b8 <_dtoa_r+0x588>)
 80063b8:	f004 020f 	and.w	r2, r4, #15
 80063bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7fa f888 	bl	80004d8 <__aeabi_dmul>
 80063c8:	2602      	movs	r6, #2
 80063ca:	2300      	movs	r3, #0
 80063cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063d0:	4d7a      	ldr	r5, [pc, #488]	@ (80065bc <_dtoa_r+0x58c>)
 80063d2:	1124      	asrs	r4, r4, #4
 80063d4:	2c00      	cmp	r4, #0
 80063d6:	f040 808f 	bne.w	80064f8 <_dtoa_r+0x4c8>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1d3      	bne.n	8006386 <_dtoa_r+0x356>
 80063de:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80063e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8094 	beq.w	8006512 <_dtoa_r+0x4e2>
 80063ea:	2200      	movs	r2, #0
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	4b73      	ldr	r3, [pc, #460]	@ (80065c0 <_dtoa_r+0x590>)
 80063f2:	f7fa fae3 	bl	80009bc <__aeabi_dcmplt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f000 808b 	beq.w	8006512 <_dtoa_r+0x4e2>
 80063fc:	9b08      	ldr	r3, [sp, #32]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8087 	beq.w	8006512 <_dtoa_r+0x4e2>
 8006404:	f1bb 0f00 	cmp.w	fp, #0
 8006408:	dd34      	ble.n	8006474 <_dtoa_r+0x444>
 800640a:	4620      	mov	r0, r4
 800640c:	2200      	movs	r2, #0
 800640e:	4629      	mov	r1, r5
 8006410:	4b6c      	ldr	r3, [pc, #432]	@ (80065c4 <_dtoa_r+0x594>)
 8006412:	f7fa f861 	bl	80004d8 <__aeabi_dmul>
 8006416:	465c      	mov	r4, fp
 8006418:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800641c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006420:	3601      	adds	r6, #1
 8006422:	4630      	mov	r0, r6
 8006424:	f7f9 ffee 	bl	8000404 <__aeabi_i2d>
 8006428:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800642c:	f7fa f854 	bl	80004d8 <__aeabi_dmul>
 8006430:	2200      	movs	r2, #0
 8006432:	4b65      	ldr	r3, [pc, #404]	@ (80065c8 <_dtoa_r+0x598>)
 8006434:	f7f9 fe9a 	bl	800016c <__adddf3>
 8006438:	4605      	mov	r5, r0
 800643a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800643e:	2c00      	cmp	r4, #0
 8006440:	d16a      	bne.n	8006518 <_dtoa_r+0x4e8>
 8006442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006446:	2200      	movs	r2, #0
 8006448:	4b60      	ldr	r3, [pc, #384]	@ (80065cc <_dtoa_r+0x59c>)
 800644a:	f7f9 fe8d 	bl	8000168 <__aeabi_dsub>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006456:	462a      	mov	r2, r5
 8006458:	4633      	mov	r3, r6
 800645a:	f7fa facd 	bl	80009f8 <__aeabi_dcmpgt>
 800645e:	2800      	cmp	r0, #0
 8006460:	f040 8298 	bne.w	8006994 <_dtoa_r+0x964>
 8006464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006468:	462a      	mov	r2, r5
 800646a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800646e:	f7fa faa5 	bl	80009bc <__aeabi_dcmplt>
 8006472:	bb38      	cbnz	r0, 80064c4 <_dtoa_r+0x494>
 8006474:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006478:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800647c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800647e:	2b00      	cmp	r3, #0
 8006480:	f2c0 8157 	blt.w	8006732 <_dtoa_r+0x702>
 8006484:	2f0e      	cmp	r7, #14
 8006486:	f300 8154 	bgt.w	8006732 <_dtoa_r+0x702>
 800648a:	4b4b      	ldr	r3, [pc, #300]	@ (80065b8 <_dtoa_r+0x588>)
 800648c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006490:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006494:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006498:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800649a:	2b00      	cmp	r3, #0
 800649c:	f280 80e5 	bge.w	800666a <_dtoa_r+0x63a>
 80064a0:	9b08      	ldr	r3, [sp, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f300 80e1 	bgt.w	800666a <_dtoa_r+0x63a>
 80064a8:	d10c      	bne.n	80064c4 <_dtoa_r+0x494>
 80064aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ae:	2200      	movs	r2, #0
 80064b0:	4b46      	ldr	r3, [pc, #280]	@ (80065cc <_dtoa_r+0x59c>)
 80064b2:	f7fa f811 	bl	80004d8 <__aeabi_dmul>
 80064b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064ba:	f7fa fa93 	bl	80009e4 <__aeabi_dcmpge>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f000 8266 	beq.w	8006990 <_dtoa_r+0x960>
 80064c4:	2400      	movs	r4, #0
 80064c6:	4625      	mov	r5, r4
 80064c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064ca:	4656      	mov	r6, sl
 80064cc:	ea6f 0803 	mvn.w	r8, r3
 80064d0:	2700      	movs	r7, #0
 80064d2:	4621      	mov	r1, r4
 80064d4:	4648      	mov	r0, r9
 80064d6:	f000 fcbd 	bl	8006e54 <_Bfree>
 80064da:	2d00      	cmp	r5, #0
 80064dc:	f000 80bd 	beq.w	800665a <_dtoa_r+0x62a>
 80064e0:	b12f      	cbz	r7, 80064ee <_dtoa_r+0x4be>
 80064e2:	42af      	cmp	r7, r5
 80064e4:	d003      	beq.n	80064ee <_dtoa_r+0x4be>
 80064e6:	4639      	mov	r1, r7
 80064e8:	4648      	mov	r0, r9
 80064ea:	f000 fcb3 	bl	8006e54 <_Bfree>
 80064ee:	4629      	mov	r1, r5
 80064f0:	4648      	mov	r0, r9
 80064f2:	f000 fcaf 	bl	8006e54 <_Bfree>
 80064f6:	e0b0      	b.n	800665a <_dtoa_r+0x62a>
 80064f8:	07e2      	lsls	r2, r4, #31
 80064fa:	d505      	bpl.n	8006508 <_dtoa_r+0x4d8>
 80064fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006500:	f7f9 ffea 	bl	80004d8 <__aeabi_dmul>
 8006504:	2301      	movs	r3, #1
 8006506:	3601      	adds	r6, #1
 8006508:	1064      	asrs	r4, r4, #1
 800650a:	3508      	adds	r5, #8
 800650c:	e762      	b.n	80063d4 <_dtoa_r+0x3a4>
 800650e:	2602      	movs	r6, #2
 8006510:	e765      	b.n	80063de <_dtoa_r+0x3ae>
 8006512:	46b8      	mov	r8, r7
 8006514:	9c08      	ldr	r4, [sp, #32]
 8006516:	e784      	b.n	8006422 <_dtoa_r+0x3f2>
 8006518:	4b27      	ldr	r3, [pc, #156]	@ (80065b8 <_dtoa_r+0x588>)
 800651a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800651c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006520:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006524:	4454      	add	r4, sl
 8006526:	2900      	cmp	r1, #0
 8006528:	d054      	beq.n	80065d4 <_dtoa_r+0x5a4>
 800652a:	2000      	movs	r0, #0
 800652c:	4928      	ldr	r1, [pc, #160]	@ (80065d0 <_dtoa_r+0x5a0>)
 800652e:	f7fa f8fd 	bl	800072c <__aeabi_ddiv>
 8006532:	4633      	mov	r3, r6
 8006534:	462a      	mov	r2, r5
 8006536:	f7f9 fe17 	bl	8000168 <__aeabi_dsub>
 800653a:	4656      	mov	r6, sl
 800653c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006544:	f7fa fa78 	bl	8000a38 <__aeabi_d2iz>
 8006548:	4605      	mov	r5, r0
 800654a:	f7f9 ff5b 	bl	8000404 <__aeabi_i2d>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006556:	f7f9 fe07 	bl	8000168 <__aeabi_dsub>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	3530      	adds	r5, #48	@ 0x30
 8006560:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006568:	f806 5b01 	strb.w	r5, [r6], #1
 800656c:	f7fa fa26 	bl	80009bc <__aeabi_dcmplt>
 8006570:	2800      	cmp	r0, #0
 8006572:	d172      	bne.n	800665a <_dtoa_r+0x62a>
 8006574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006578:	2000      	movs	r0, #0
 800657a:	4911      	ldr	r1, [pc, #68]	@ (80065c0 <_dtoa_r+0x590>)
 800657c:	f7f9 fdf4 	bl	8000168 <__aeabi_dsub>
 8006580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006584:	f7fa fa1a 	bl	80009bc <__aeabi_dcmplt>
 8006588:	2800      	cmp	r0, #0
 800658a:	f040 80b4 	bne.w	80066f6 <_dtoa_r+0x6c6>
 800658e:	42a6      	cmp	r6, r4
 8006590:	f43f af70 	beq.w	8006474 <_dtoa_r+0x444>
 8006594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006598:	2200      	movs	r2, #0
 800659a:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <_dtoa_r+0x594>)
 800659c:	f7f9 ff9c 	bl	80004d8 <__aeabi_dmul>
 80065a0:	2200      	movs	r2, #0
 80065a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065aa:	4b06      	ldr	r3, [pc, #24]	@ (80065c4 <_dtoa_r+0x594>)
 80065ac:	f7f9 ff94 	bl	80004d8 <__aeabi_dmul>
 80065b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065b4:	e7c4      	b.n	8006540 <_dtoa_r+0x510>
 80065b6:	bf00      	nop
 80065b8:	080081c0 	.word	0x080081c0
 80065bc:	08008198 	.word	0x08008198
 80065c0:	3ff00000 	.word	0x3ff00000
 80065c4:	40240000 	.word	0x40240000
 80065c8:	401c0000 	.word	0x401c0000
 80065cc:	40140000 	.word	0x40140000
 80065d0:	3fe00000 	.word	0x3fe00000
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7f9 ff7e 	bl	80004d8 <__aeabi_dmul>
 80065dc:	4656      	mov	r6, sl
 80065de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80065e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065e8:	f7fa fa26 	bl	8000a38 <__aeabi_d2iz>
 80065ec:	4605      	mov	r5, r0
 80065ee:	f7f9 ff09 	bl	8000404 <__aeabi_i2d>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065fa:	f7f9 fdb5 	bl	8000168 <__aeabi_dsub>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	3530      	adds	r5, #48	@ 0x30
 8006604:	f806 5b01 	strb.w	r5, [r6], #1
 8006608:	42a6      	cmp	r6, r4
 800660a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	d124      	bne.n	800665e <_dtoa_r+0x62e>
 8006614:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006618:	4bae      	ldr	r3, [pc, #696]	@ (80068d4 <_dtoa_r+0x8a4>)
 800661a:	f7f9 fda7 	bl	800016c <__adddf3>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006626:	f7fa f9e7 	bl	80009f8 <__aeabi_dcmpgt>
 800662a:	2800      	cmp	r0, #0
 800662c:	d163      	bne.n	80066f6 <_dtoa_r+0x6c6>
 800662e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006632:	2000      	movs	r0, #0
 8006634:	49a7      	ldr	r1, [pc, #668]	@ (80068d4 <_dtoa_r+0x8a4>)
 8006636:	f7f9 fd97 	bl	8000168 <__aeabi_dsub>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006642:	f7fa f9bb 	bl	80009bc <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	f43f af14 	beq.w	8006474 <_dtoa_r+0x444>
 800664c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800664e:	1e73      	subs	r3, r6, #1
 8006650:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006652:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006656:	2b30      	cmp	r3, #48	@ 0x30
 8006658:	d0f8      	beq.n	800664c <_dtoa_r+0x61c>
 800665a:	4647      	mov	r7, r8
 800665c:	e03b      	b.n	80066d6 <_dtoa_r+0x6a6>
 800665e:	4b9e      	ldr	r3, [pc, #632]	@ (80068d8 <_dtoa_r+0x8a8>)
 8006660:	f7f9 ff3a 	bl	80004d8 <__aeabi_dmul>
 8006664:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006668:	e7bc      	b.n	80065e4 <_dtoa_r+0x5b4>
 800666a:	4656      	mov	r6, sl
 800666c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006674:	4620      	mov	r0, r4
 8006676:	4629      	mov	r1, r5
 8006678:	f7fa f858 	bl	800072c <__aeabi_ddiv>
 800667c:	f7fa f9dc 	bl	8000a38 <__aeabi_d2iz>
 8006680:	4680      	mov	r8, r0
 8006682:	f7f9 febf 	bl	8000404 <__aeabi_i2d>
 8006686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800668a:	f7f9 ff25 	bl	80004d8 <__aeabi_dmul>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4620      	mov	r0, r4
 8006694:	4629      	mov	r1, r5
 8006696:	f7f9 fd67 	bl	8000168 <__aeabi_dsub>
 800669a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800669e:	9d08      	ldr	r5, [sp, #32]
 80066a0:	f806 4b01 	strb.w	r4, [r6], #1
 80066a4:	eba6 040a 	sub.w	r4, r6, sl
 80066a8:	42a5      	cmp	r5, r4
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	d133      	bne.n	8006718 <_dtoa_r+0x6e8>
 80066b0:	f7f9 fd5c 	bl	800016c <__adddf3>
 80066b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b8:	4604      	mov	r4, r0
 80066ba:	460d      	mov	r5, r1
 80066bc:	f7fa f99c 	bl	80009f8 <__aeabi_dcmpgt>
 80066c0:	b9c0      	cbnz	r0, 80066f4 <_dtoa_r+0x6c4>
 80066c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066c6:	4620      	mov	r0, r4
 80066c8:	4629      	mov	r1, r5
 80066ca:	f7fa f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80066ce:	b110      	cbz	r0, 80066d6 <_dtoa_r+0x6a6>
 80066d0:	f018 0f01 	tst.w	r8, #1
 80066d4:	d10e      	bne.n	80066f4 <_dtoa_r+0x6c4>
 80066d6:	4648      	mov	r0, r9
 80066d8:	9903      	ldr	r1, [sp, #12]
 80066da:	f000 fbbb 	bl	8006e54 <_Bfree>
 80066de:	2300      	movs	r3, #0
 80066e0:	7033      	strb	r3, [r6, #0]
 80066e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066e4:	3701      	adds	r7, #1
 80066e6:	601f      	str	r7, [r3, #0]
 80066e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 824b 	beq.w	8006b86 <_dtoa_r+0xb56>
 80066f0:	601e      	str	r6, [r3, #0]
 80066f2:	e248      	b.n	8006b86 <_dtoa_r+0xb56>
 80066f4:	46b8      	mov	r8, r7
 80066f6:	4633      	mov	r3, r6
 80066f8:	461e      	mov	r6, r3
 80066fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066fe:	2a39      	cmp	r2, #57	@ 0x39
 8006700:	d106      	bne.n	8006710 <_dtoa_r+0x6e0>
 8006702:	459a      	cmp	sl, r3
 8006704:	d1f8      	bne.n	80066f8 <_dtoa_r+0x6c8>
 8006706:	2230      	movs	r2, #48	@ 0x30
 8006708:	f108 0801 	add.w	r8, r8, #1
 800670c:	f88a 2000 	strb.w	r2, [sl]
 8006710:	781a      	ldrb	r2, [r3, #0]
 8006712:	3201      	adds	r2, #1
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	e7a0      	b.n	800665a <_dtoa_r+0x62a>
 8006718:	2200      	movs	r2, #0
 800671a:	4b6f      	ldr	r3, [pc, #444]	@ (80068d8 <_dtoa_r+0x8a8>)
 800671c:	f7f9 fedc 	bl	80004d8 <__aeabi_dmul>
 8006720:	2200      	movs	r2, #0
 8006722:	2300      	movs	r3, #0
 8006724:	4604      	mov	r4, r0
 8006726:	460d      	mov	r5, r1
 8006728:	f7fa f93e 	bl	80009a8 <__aeabi_dcmpeq>
 800672c:	2800      	cmp	r0, #0
 800672e:	d09f      	beq.n	8006670 <_dtoa_r+0x640>
 8006730:	e7d1      	b.n	80066d6 <_dtoa_r+0x6a6>
 8006732:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006734:	2a00      	cmp	r2, #0
 8006736:	f000 80ea 	beq.w	800690e <_dtoa_r+0x8de>
 800673a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800673c:	2a01      	cmp	r2, #1
 800673e:	f300 80cd 	bgt.w	80068dc <_dtoa_r+0x8ac>
 8006742:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006744:	2a00      	cmp	r2, #0
 8006746:	f000 80c1 	beq.w	80068cc <_dtoa_r+0x89c>
 800674a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800674e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006750:	9e04      	ldr	r6, [sp, #16]
 8006752:	9a04      	ldr	r2, [sp, #16]
 8006754:	2101      	movs	r1, #1
 8006756:	441a      	add	r2, r3
 8006758:	9204      	str	r2, [sp, #16]
 800675a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800675c:	4648      	mov	r0, r9
 800675e:	441a      	add	r2, r3
 8006760:	9209      	str	r2, [sp, #36]	@ 0x24
 8006762:	f000 fc2b 	bl	8006fbc <__i2b>
 8006766:	4605      	mov	r5, r0
 8006768:	b166      	cbz	r6, 8006784 <_dtoa_r+0x754>
 800676a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	dd09      	ble.n	8006784 <_dtoa_r+0x754>
 8006770:	42b3      	cmp	r3, r6
 8006772:	bfa8      	it	ge
 8006774:	4633      	movge	r3, r6
 8006776:	9a04      	ldr	r2, [sp, #16]
 8006778:	1af6      	subs	r6, r6, r3
 800677a:	1ad2      	subs	r2, r2, r3
 800677c:	9204      	str	r2, [sp, #16]
 800677e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	9309      	str	r3, [sp, #36]	@ 0x24
 8006784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006786:	b30b      	cbz	r3, 80067cc <_dtoa_r+0x79c>
 8006788:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 80c6 	beq.w	800691c <_dtoa_r+0x8ec>
 8006790:	2c00      	cmp	r4, #0
 8006792:	f000 80c0 	beq.w	8006916 <_dtoa_r+0x8e6>
 8006796:	4629      	mov	r1, r5
 8006798:	4622      	mov	r2, r4
 800679a:	4648      	mov	r0, r9
 800679c:	f000 fcc6 	bl	800712c <__pow5mult>
 80067a0:	9a03      	ldr	r2, [sp, #12]
 80067a2:	4601      	mov	r1, r0
 80067a4:	4605      	mov	r5, r0
 80067a6:	4648      	mov	r0, r9
 80067a8:	f000 fc1e 	bl	8006fe8 <__multiply>
 80067ac:	9903      	ldr	r1, [sp, #12]
 80067ae:	4680      	mov	r8, r0
 80067b0:	4648      	mov	r0, r9
 80067b2:	f000 fb4f 	bl	8006e54 <_Bfree>
 80067b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067b8:	1b1b      	subs	r3, r3, r4
 80067ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80067bc:	f000 80b1 	beq.w	8006922 <_dtoa_r+0x8f2>
 80067c0:	4641      	mov	r1, r8
 80067c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067c4:	4648      	mov	r0, r9
 80067c6:	f000 fcb1 	bl	800712c <__pow5mult>
 80067ca:	9003      	str	r0, [sp, #12]
 80067cc:	2101      	movs	r1, #1
 80067ce:	4648      	mov	r0, r9
 80067d0:	f000 fbf4 	bl	8006fbc <__i2b>
 80067d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067d6:	4604      	mov	r4, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 81d8 	beq.w	8006b8e <_dtoa_r+0xb5e>
 80067de:	461a      	mov	r2, r3
 80067e0:	4601      	mov	r1, r0
 80067e2:	4648      	mov	r0, r9
 80067e4:	f000 fca2 	bl	800712c <__pow5mult>
 80067e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067ea:	4604      	mov	r4, r0
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	f300 809f 	bgt.w	8006930 <_dtoa_r+0x900>
 80067f2:	9b06      	ldr	r3, [sp, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 8097 	bne.w	8006928 <_dtoa_r+0x8f8>
 80067fa:	9b07      	ldr	r3, [sp, #28]
 80067fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006800:	2b00      	cmp	r3, #0
 8006802:	f040 8093 	bne.w	800692c <_dtoa_r+0x8fc>
 8006806:	9b07      	ldr	r3, [sp, #28]
 8006808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800680c:	0d1b      	lsrs	r3, r3, #20
 800680e:	051b      	lsls	r3, r3, #20
 8006810:	b133      	cbz	r3, 8006820 <_dtoa_r+0x7f0>
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	3301      	adds	r3, #1
 8006816:	9304      	str	r3, [sp, #16]
 8006818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681a:	3301      	adds	r3, #1
 800681c:	9309      	str	r3, [sp, #36]	@ 0x24
 800681e:	2301      	movs	r3, #1
 8006820:	930a      	str	r3, [sp, #40]	@ 0x28
 8006822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 81b8 	beq.w	8006b9a <_dtoa_r+0xb6a>
 800682a:	6923      	ldr	r3, [r4, #16]
 800682c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006830:	6918      	ldr	r0, [r3, #16]
 8006832:	f000 fb77 	bl	8006f24 <__hi0bits>
 8006836:	f1c0 0020 	rsb	r0, r0, #32
 800683a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800683c:	4418      	add	r0, r3
 800683e:	f010 001f 	ands.w	r0, r0, #31
 8006842:	f000 8082 	beq.w	800694a <_dtoa_r+0x91a>
 8006846:	f1c0 0320 	rsb	r3, r0, #32
 800684a:	2b04      	cmp	r3, #4
 800684c:	dd73      	ble.n	8006936 <_dtoa_r+0x906>
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	f1c0 001c 	rsb	r0, r0, #28
 8006854:	4403      	add	r3, r0
 8006856:	9304      	str	r3, [sp, #16]
 8006858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685a:	4406      	add	r6, r0
 800685c:	4403      	add	r3, r0
 800685e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006860:	9b04      	ldr	r3, [sp, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd05      	ble.n	8006872 <_dtoa_r+0x842>
 8006866:	461a      	mov	r2, r3
 8006868:	4648      	mov	r0, r9
 800686a:	9903      	ldr	r1, [sp, #12]
 800686c:	f000 fcb8 	bl	80071e0 <__lshift>
 8006870:	9003      	str	r0, [sp, #12]
 8006872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	dd05      	ble.n	8006884 <_dtoa_r+0x854>
 8006878:	4621      	mov	r1, r4
 800687a:	461a      	mov	r2, r3
 800687c:	4648      	mov	r0, r9
 800687e:	f000 fcaf 	bl	80071e0 <__lshift>
 8006882:	4604      	mov	r4, r0
 8006884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d061      	beq.n	800694e <_dtoa_r+0x91e>
 800688a:	4621      	mov	r1, r4
 800688c:	9803      	ldr	r0, [sp, #12]
 800688e:	f000 fd13 	bl	80072b8 <__mcmp>
 8006892:	2800      	cmp	r0, #0
 8006894:	da5b      	bge.n	800694e <_dtoa_r+0x91e>
 8006896:	2300      	movs	r3, #0
 8006898:	220a      	movs	r2, #10
 800689a:	4648      	mov	r0, r9
 800689c:	9903      	ldr	r1, [sp, #12]
 800689e:	f000 fafb 	bl	8006e98 <__multadd>
 80068a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068a4:	f107 38ff 	add.w	r8, r7, #4294967295
 80068a8:	9003      	str	r0, [sp, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8177 	beq.w	8006b9e <_dtoa_r+0xb6e>
 80068b0:	4629      	mov	r1, r5
 80068b2:	2300      	movs	r3, #0
 80068b4:	220a      	movs	r2, #10
 80068b6:	4648      	mov	r0, r9
 80068b8:	f000 faee 	bl	8006e98 <__multadd>
 80068bc:	f1bb 0f00 	cmp.w	fp, #0
 80068c0:	4605      	mov	r5, r0
 80068c2:	dc6f      	bgt.n	80069a4 <_dtoa_r+0x974>
 80068c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	dc49      	bgt.n	800695e <_dtoa_r+0x92e>
 80068ca:	e06b      	b.n	80069a4 <_dtoa_r+0x974>
 80068cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80068d2:	e73c      	b.n	800674e <_dtoa_r+0x71e>
 80068d4:	3fe00000 	.word	0x3fe00000
 80068d8:	40240000 	.word	0x40240000
 80068dc:	9b08      	ldr	r3, [sp, #32]
 80068de:	1e5c      	subs	r4, r3, #1
 80068e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	db09      	blt.n	80068fa <_dtoa_r+0x8ca>
 80068e6:	1b1c      	subs	r4, r3, r4
 80068e8:	9b08      	ldr	r3, [sp, #32]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f6bf af30 	bge.w	8006750 <_dtoa_r+0x720>
 80068f0:	9b04      	ldr	r3, [sp, #16]
 80068f2:	9a08      	ldr	r2, [sp, #32]
 80068f4:	1a9e      	subs	r6, r3, r2
 80068f6:	2300      	movs	r3, #0
 80068f8:	e72b      	b.n	8006752 <_dtoa_r+0x722>
 80068fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068fe:	1ae3      	subs	r3, r4, r3
 8006900:	441a      	add	r2, r3
 8006902:	940a      	str	r4, [sp, #40]	@ 0x28
 8006904:	9e04      	ldr	r6, [sp, #16]
 8006906:	2400      	movs	r4, #0
 8006908:	9b08      	ldr	r3, [sp, #32]
 800690a:	920e      	str	r2, [sp, #56]	@ 0x38
 800690c:	e721      	b.n	8006752 <_dtoa_r+0x722>
 800690e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006910:	9e04      	ldr	r6, [sp, #16]
 8006912:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006914:	e728      	b.n	8006768 <_dtoa_r+0x738>
 8006916:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800691a:	e751      	b.n	80067c0 <_dtoa_r+0x790>
 800691c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800691e:	9903      	ldr	r1, [sp, #12]
 8006920:	e750      	b.n	80067c4 <_dtoa_r+0x794>
 8006922:	f8cd 800c 	str.w	r8, [sp, #12]
 8006926:	e751      	b.n	80067cc <_dtoa_r+0x79c>
 8006928:	2300      	movs	r3, #0
 800692a:	e779      	b.n	8006820 <_dtoa_r+0x7f0>
 800692c:	9b06      	ldr	r3, [sp, #24]
 800692e:	e777      	b.n	8006820 <_dtoa_r+0x7f0>
 8006930:	2300      	movs	r3, #0
 8006932:	930a      	str	r3, [sp, #40]	@ 0x28
 8006934:	e779      	b.n	800682a <_dtoa_r+0x7fa>
 8006936:	d093      	beq.n	8006860 <_dtoa_r+0x830>
 8006938:	9a04      	ldr	r2, [sp, #16]
 800693a:	331c      	adds	r3, #28
 800693c:	441a      	add	r2, r3
 800693e:	9204      	str	r2, [sp, #16]
 8006940:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006942:	441e      	add	r6, r3
 8006944:	441a      	add	r2, r3
 8006946:	9209      	str	r2, [sp, #36]	@ 0x24
 8006948:	e78a      	b.n	8006860 <_dtoa_r+0x830>
 800694a:	4603      	mov	r3, r0
 800694c:	e7f4      	b.n	8006938 <_dtoa_r+0x908>
 800694e:	9b08      	ldr	r3, [sp, #32]
 8006950:	46b8      	mov	r8, r7
 8006952:	2b00      	cmp	r3, #0
 8006954:	dc20      	bgt.n	8006998 <_dtoa_r+0x968>
 8006956:	469b      	mov	fp, r3
 8006958:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800695a:	2b02      	cmp	r3, #2
 800695c:	dd1e      	ble.n	800699c <_dtoa_r+0x96c>
 800695e:	f1bb 0f00 	cmp.w	fp, #0
 8006962:	f47f adb1 	bne.w	80064c8 <_dtoa_r+0x498>
 8006966:	4621      	mov	r1, r4
 8006968:	465b      	mov	r3, fp
 800696a:	2205      	movs	r2, #5
 800696c:	4648      	mov	r0, r9
 800696e:	f000 fa93 	bl	8006e98 <__multadd>
 8006972:	4601      	mov	r1, r0
 8006974:	4604      	mov	r4, r0
 8006976:	9803      	ldr	r0, [sp, #12]
 8006978:	f000 fc9e 	bl	80072b8 <__mcmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	f77f ada3 	ble.w	80064c8 <_dtoa_r+0x498>
 8006982:	4656      	mov	r6, sl
 8006984:	2331      	movs	r3, #49	@ 0x31
 8006986:	f108 0801 	add.w	r8, r8, #1
 800698a:	f806 3b01 	strb.w	r3, [r6], #1
 800698e:	e59f      	b.n	80064d0 <_dtoa_r+0x4a0>
 8006990:	46b8      	mov	r8, r7
 8006992:	9c08      	ldr	r4, [sp, #32]
 8006994:	4625      	mov	r5, r4
 8006996:	e7f4      	b.n	8006982 <_dtoa_r+0x952>
 8006998:	f8dd b020 	ldr.w	fp, [sp, #32]
 800699c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8101 	beq.w	8006ba6 <_dtoa_r+0xb76>
 80069a4:	2e00      	cmp	r6, #0
 80069a6:	dd05      	ble.n	80069b4 <_dtoa_r+0x984>
 80069a8:	4629      	mov	r1, r5
 80069aa:	4632      	mov	r2, r6
 80069ac:	4648      	mov	r0, r9
 80069ae:	f000 fc17 	bl	80071e0 <__lshift>
 80069b2:	4605      	mov	r5, r0
 80069b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d05c      	beq.n	8006a74 <_dtoa_r+0xa44>
 80069ba:	4648      	mov	r0, r9
 80069bc:	6869      	ldr	r1, [r5, #4]
 80069be:	f000 fa09 	bl	8006dd4 <_Balloc>
 80069c2:	4606      	mov	r6, r0
 80069c4:	b928      	cbnz	r0, 80069d2 <_dtoa_r+0x9a2>
 80069c6:	4602      	mov	r2, r0
 80069c8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80069cc:	4b80      	ldr	r3, [pc, #512]	@ (8006bd0 <_dtoa_r+0xba0>)
 80069ce:	f7ff bb43 	b.w	8006058 <_dtoa_r+0x28>
 80069d2:	692a      	ldr	r2, [r5, #16]
 80069d4:	f105 010c 	add.w	r1, r5, #12
 80069d8:	3202      	adds	r2, #2
 80069da:	0092      	lsls	r2, r2, #2
 80069dc:	300c      	adds	r0, #12
 80069de:	f000 ff9d 	bl	800791c <memcpy>
 80069e2:	2201      	movs	r2, #1
 80069e4:	4631      	mov	r1, r6
 80069e6:	4648      	mov	r0, r9
 80069e8:	f000 fbfa 	bl	80071e0 <__lshift>
 80069ec:	462f      	mov	r7, r5
 80069ee:	4605      	mov	r5, r0
 80069f0:	f10a 0301 	add.w	r3, sl, #1
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	eb0a 030b 	add.w	r3, sl, fp
 80069fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80069fc:	9b06      	ldr	r3, [sp, #24]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	4621      	mov	r1, r4
 8006a08:	9803      	ldr	r0, [sp, #12]
 8006a0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a0e:	f7ff fa84 	bl	8005f1a <quorem>
 8006a12:	4603      	mov	r3, r0
 8006a14:	4639      	mov	r1, r7
 8006a16:	3330      	adds	r3, #48	@ 0x30
 8006a18:	9006      	str	r0, [sp, #24]
 8006a1a:	9803      	ldr	r0, [sp, #12]
 8006a1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a1e:	f000 fc4b 	bl	80072b8 <__mcmp>
 8006a22:	462a      	mov	r2, r5
 8006a24:	9008      	str	r0, [sp, #32]
 8006a26:	4621      	mov	r1, r4
 8006a28:	4648      	mov	r0, r9
 8006a2a:	f000 fc61 	bl	80072f0 <__mdiff>
 8006a2e:	68c2      	ldr	r2, [r0, #12]
 8006a30:	4606      	mov	r6, r0
 8006a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a34:	bb02      	cbnz	r2, 8006a78 <_dtoa_r+0xa48>
 8006a36:	4601      	mov	r1, r0
 8006a38:	9803      	ldr	r0, [sp, #12]
 8006a3a:	f000 fc3d 	bl	80072b8 <__mcmp>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a42:	4631      	mov	r1, r6
 8006a44:	4648      	mov	r0, r9
 8006a46:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006a4a:	f000 fa03 	bl	8006e54 <_Bfree>
 8006a4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006a52:	9e04      	ldr	r6, [sp, #16]
 8006a54:	ea42 0103 	orr.w	r1, r2, r3
 8006a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5a:	4319      	orrs	r1, r3
 8006a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a5e:	d10d      	bne.n	8006a7c <_dtoa_r+0xa4c>
 8006a60:	2b39      	cmp	r3, #57	@ 0x39
 8006a62:	d027      	beq.n	8006ab4 <_dtoa_r+0xa84>
 8006a64:	9a08      	ldr	r2, [sp, #32]
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	dd01      	ble.n	8006a6e <_dtoa_r+0xa3e>
 8006a6a:	9b06      	ldr	r3, [sp, #24]
 8006a6c:	3331      	adds	r3, #49	@ 0x31
 8006a6e:	f88b 3000 	strb.w	r3, [fp]
 8006a72:	e52e      	b.n	80064d2 <_dtoa_r+0x4a2>
 8006a74:	4628      	mov	r0, r5
 8006a76:	e7b9      	b.n	80069ec <_dtoa_r+0x9bc>
 8006a78:	2201      	movs	r2, #1
 8006a7a:	e7e2      	b.n	8006a42 <_dtoa_r+0xa12>
 8006a7c:	9908      	ldr	r1, [sp, #32]
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	db04      	blt.n	8006a8c <_dtoa_r+0xa5c>
 8006a82:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006a84:	4301      	orrs	r1, r0
 8006a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a88:	4301      	orrs	r1, r0
 8006a8a:	d120      	bne.n	8006ace <_dtoa_r+0xa9e>
 8006a8c:	2a00      	cmp	r2, #0
 8006a8e:	ddee      	ble.n	8006a6e <_dtoa_r+0xa3e>
 8006a90:	2201      	movs	r2, #1
 8006a92:	9903      	ldr	r1, [sp, #12]
 8006a94:	4648      	mov	r0, r9
 8006a96:	9304      	str	r3, [sp, #16]
 8006a98:	f000 fba2 	bl	80071e0 <__lshift>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	9003      	str	r0, [sp, #12]
 8006aa0:	f000 fc0a 	bl	80072b8 <__mcmp>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	9b04      	ldr	r3, [sp, #16]
 8006aa8:	dc02      	bgt.n	8006ab0 <_dtoa_r+0xa80>
 8006aaa:	d1e0      	bne.n	8006a6e <_dtoa_r+0xa3e>
 8006aac:	07da      	lsls	r2, r3, #31
 8006aae:	d5de      	bpl.n	8006a6e <_dtoa_r+0xa3e>
 8006ab0:	2b39      	cmp	r3, #57	@ 0x39
 8006ab2:	d1da      	bne.n	8006a6a <_dtoa_r+0xa3a>
 8006ab4:	2339      	movs	r3, #57	@ 0x39
 8006ab6:	f88b 3000 	strb.w	r3, [fp]
 8006aba:	4633      	mov	r3, r6
 8006abc:	461e      	mov	r6, r3
 8006abe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	2a39      	cmp	r2, #57	@ 0x39
 8006ac6:	d04e      	beq.n	8006b66 <_dtoa_r+0xb36>
 8006ac8:	3201      	adds	r2, #1
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e501      	b.n	80064d2 <_dtoa_r+0x4a2>
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	dd03      	ble.n	8006ada <_dtoa_r+0xaaa>
 8006ad2:	2b39      	cmp	r3, #57	@ 0x39
 8006ad4:	d0ee      	beq.n	8006ab4 <_dtoa_r+0xa84>
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	e7c9      	b.n	8006a6e <_dtoa_r+0xa3e>
 8006ada:	9a04      	ldr	r2, [sp, #16]
 8006adc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ade:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ae2:	428a      	cmp	r2, r1
 8006ae4:	d028      	beq.n	8006b38 <_dtoa_r+0xb08>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	220a      	movs	r2, #10
 8006aea:	9903      	ldr	r1, [sp, #12]
 8006aec:	4648      	mov	r0, r9
 8006aee:	f000 f9d3 	bl	8006e98 <__multadd>
 8006af2:	42af      	cmp	r7, r5
 8006af4:	9003      	str	r0, [sp, #12]
 8006af6:	f04f 0300 	mov.w	r3, #0
 8006afa:	f04f 020a 	mov.w	r2, #10
 8006afe:	4639      	mov	r1, r7
 8006b00:	4648      	mov	r0, r9
 8006b02:	d107      	bne.n	8006b14 <_dtoa_r+0xae4>
 8006b04:	f000 f9c8 	bl	8006e98 <__multadd>
 8006b08:	4607      	mov	r7, r0
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	9b04      	ldr	r3, [sp, #16]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	9304      	str	r3, [sp, #16]
 8006b12:	e777      	b.n	8006a04 <_dtoa_r+0x9d4>
 8006b14:	f000 f9c0 	bl	8006e98 <__multadd>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4607      	mov	r7, r0
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	220a      	movs	r2, #10
 8006b20:	4648      	mov	r0, r9
 8006b22:	f000 f9b9 	bl	8006e98 <__multadd>
 8006b26:	4605      	mov	r5, r0
 8006b28:	e7f0      	b.n	8006b0c <_dtoa_r+0xadc>
 8006b2a:	f1bb 0f00 	cmp.w	fp, #0
 8006b2e:	bfcc      	ite	gt
 8006b30:	465e      	movgt	r6, fp
 8006b32:	2601      	movle	r6, #1
 8006b34:	2700      	movs	r7, #0
 8006b36:	4456      	add	r6, sl
 8006b38:	2201      	movs	r2, #1
 8006b3a:	9903      	ldr	r1, [sp, #12]
 8006b3c:	4648      	mov	r0, r9
 8006b3e:	9304      	str	r3, [sp, #16]
 8006b40:	f000 fb4e 	bl	80071e0 <__lshift>
 8006b44:	4621      	mov	r1, r4
 8006b46:	9003      	str	r0, [sp, #12]
 8006b48:	f000 fbb6 	bl	80072b8 <__mcmp>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	dcb4      	bgt.n	8006aba <_dtoa_r+0xa8a>
 8006b50:	d102      	bne.n	8006b58 <_dtoa_r+0xb28>
 8006b52:	9b04      	ldr	r3, [sp, #16]
 8006b54:	07db      	lsls	r3, r3, #31
 8006b56:	d4b0      	bmi.n	8006aba <_dtoa_r+0xa8a>
 8006b58:	4633      	mov	r3, r6
 8006b5a:	461e      	mov	r6, r3
 8006b5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b60:	2a30      	cmp	r2, #48	@ 0x30
 8006b62:	d0fa      	beq.n	8006b5a <_dtoa_r+0xb2a>
 8006b64:	e4b5      	b.n	80064d2 <_dtoa_r+0x4a2>
 8006b66:	459a      	cmp	sl, r3
 8006b68:	d1a8      	bne.n	8006abc <_dtoa_r+0xa8c>
 8006b6a:	2331      	movs	r3, #49	@ 0x31
 8006b6c:	f108 0801 	add.w	r8, r8, #1
 8006b70:	f88a 3000 	strb.w	r3, [sl]
 8006b74:	e4ad      	b.n	80064d2 <_dtoa_r+0x4a2>
 8006b76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006bd4 <_dtoa_r+0xba4>
 8006b7c:	b11b      	cbz	r3, 8006b86 <_dtoa_r+0xb56>
 8006b7e:	f10a 0308 	add.w	r3, sl, #8
 8006b82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	4650      	mov	r0, sl
 8006b88:	b017      	add	sp, #92	@ 0x5c
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	f77f ae2e 	ble.w	80067f2 <_dtoa_r+0x7c2>
 8006b96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	e64d      	b.n	800683a <_dtoa_r+0x80a>
 8006b9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ba2:	f77f aed9 	ble.w	8006958 <_dtoa_r+0x928>
 8006ba6:	4656      	mov	r6, sl
 8006ba8:	4621      	mov	r1, r4
 8006baa:	9803      	ldr	r0, [sp, #12]
 8006bac:	f7ff f9b5 	bl	8005f1a <quorem>
 8006bb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006bb4:	f806 3b01 	strb.w	r3, [r6], #1
 8006bb8:	eba6 020a 	sub.w	r2, r6, sl
 8006bbc:	4593      	cmp	fp, r2
 8006bbe:	ddb4      	ble.n	8006b2a <_dtoa_r+0xafa>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	9903      	ldr	r1, [sp, #12]
 8006bc8:	f000 f966 	bl	8006e98 <__multadd>
 8006bcc:	9003      	str	r0, [sp, #12]
 8006bce:	e7eb      	b.n	8006ba8 <_dtoa_r+0xb78>
 8006bd0:	080080c6 	.word	0x080080c6
 8006bd4:	0800804a 	.word	0x0800804a

08006bd8 <_free_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4605      	mov	r5, r0
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d040      	beq.n	8006c62 <_free_r+0x8a>
 8006be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be4:	1f0c      	subs	r4, r1, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfb8      	it	lt
 8006bea:	18e4      	addlt	r4, r4, r3
 8006bec:	f000 f8e6 	bl	8006dbc <__malloc_lock>
 8006bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c64 <_free_r+0x8c>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	b933      	cbnz	r3, 8006c04 <_free_r+0x2c>
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	6014      	str	r4, [r2, #0]
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c00:	f000 b8e2 	b.w	8006dc8 <__malloc_unlock>
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	d908      	bls.n	8006c1a <_free_r+0x42>
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	1821      	adds	r1, r4, r0
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	bf01      	itttt	eq
 8006c10:	6819      	ldreq	r1, [r3, #0]
 8006c12:	685b      	ldreq	r3, [r3, #4]
 8006c14:	1809      	addeq	r1, r1, r0
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	e7ed      	b.n	8006bf6 <_free_r+0x1e>
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	b10b      	cbz	r3, 8006c24 <_free_r+0x4c>
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	d9fa      	bls.n	8006c1a <_free_r+0x42>
 8006c24:	6811      	ldr	r1, [r2, #0]
 8006c26:	1850      	adds	r0, r2, r1
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d10b      	bne.n	8006c44 <_free_r+0x6c>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	4401      	add	r1, r0
 8006c30:	1850      	adds	r0, r2, r1
 8006c32:	4283      	cmp	r3, r0
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	d1e0      	bne.n	8006bfa <_free_r+0x22>
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	4408      	add	r0, r1
 8006c3e:	6010      	str	r0, [r2, #0]
 8006c40:	6053      	str	r3, [r2, #4]
 8006c42:	e7da      	b.n	8006bfa <_free_r+0x22>
 8006c44:	d902      	bls.n	8006c4c <_free_r+0x74>
 8006c46:	230c      	movs	r3, #12
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	e7d6      	b.n	8006bfa <_free_r+0x22>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	1821      	adds	r1, r4, r0
 8006c50:	428b      	cmp	r3, r1
 8006c52:	bf01      	itttt	eq
 8006c54:	6819      	ldreq	r1, [r3, #0]
 8006c56:	685b      	ldreq	r3, [r3, #4]
 8006c58:	1809      	addeq	r1, r1, r0
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	6063      	str	r3, [r4, #4]
 8006c5e:	6054      	str	r4, [r2, #4]
 8006c60:	e7cb      	b.n	8006bfa <_free_r+0x22>
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	200004dc 	.word	0x200004dc

08006c68 <malloc>:
 8006c68:	4b02      	ldr	r3, [pc, #8]	@ (8006c74 <malloc+0xc>)
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	f000 b825 	b.w	8006cbc <_malloc_r>
 8006c72:	bf00      	nop
 8006c74:	20000018 	.word	0x20000018

08006c78 <sbrk_aligned>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8006cb8 <sbrk_aligned+0x40>)
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	6831      	ldr	r1, [r6, #0]
 8006c80:	4605      	mov	r5, r0
 8006c82:	b911      	cbnz	r1, 8006c8a <sbrk_aligned+0x12>
 8006c84:	f000 fe3a 	bl	80078fc <_sbrk_r>
 8006c88:	6030      	str	r0, [r6, #0]
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 fe35 	bl	80078fc <_sbrk_r>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d103      	bne.n	8006c9e <sbrk_aligned+0x26>
 8006c96:	f04f 34ff 	mov.w	r4, #4294967295
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
 8006c9e:	1cc4      	adds	r4, r0, #3
 8006ca0:	f024 0403 	bic.w	r4, r4, #3
 8006ca4:	42a0      	cmp	r0, r4
 8006ca6:	d0f8      	beq.n	8006c9a <sbrk_aligned+0x22>
 8006ca8:	1a21      	subs	r1, r4, r0
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 fe26 	bl	80078fc <_sbrk_r>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d1f2      	bne.n	8006c9a <sbrk_aligned+0x22>
 8006cb4:	e7ef      	b.n	8006c96 <sbrk_aligned+0x1e>
 8006cb6:	bf00      	nop
 8006cb8:	200004d8 	.word	0x200004d8

08006cbc <_malloc_r>:
 8006cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc0:	1ccd      	adds	r5, r1, #3
 8006cc2:	f025 0503 	bic.w	r5, r5, #3
 8006cc6:	3508      	adds	r5, #8
 8006cc8:	2d0c      	cmp	r5, #12
 8006cca:	bf38      	it	cc
 8006ccc:	250c      	movcc	r5, #12
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	db01      	blt.n	8006cd8 <_malloc_r+0x1c>
 8006cd4:	42a9      	cmp	r1, r5
 8006cd6:	d904      	bls.n	8006ce2 <_malloc_r+0x26>
 8006cd8:	230c      	movs	r3, #12
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006db8 <_malloc_r+0xfc>
 8006ce6:	f000 f869 	bl	8006dbc <__malloc_lock>
 8006cea:	f8d8 3000 	ldr.w	r3, [r8]
 8006cee:	461c      	mov	r4, r3
 8006cf0:	bb44      	cbnz	r4, 8006d44 <_malloc_r+0x88>
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff ffbf 	bl	8006c78 <sbrk_aligned>
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	d158      	bne.n	8006db2 <_malloc_r+0xf6>
 8006d00:	f8d8 4000 	ldr.w	r4, [r8]
 8006d04:	4627      	mov	r7, r4
 8006d06:	2f00      	cmp	r7, #0
 8006d08:	d143      	bne.n	8006d92 <_malloc_r+0xd6>
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	d04b      	beq.n	8006da6 <_malloc_r+0xea>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	4639      	mov	r1, r7
 8006d12:	4630      	mov	r0, r6
 8006d14:	eb04 0903 	add.w	r9, r4, r3
 8006d18:	f000 fdf0 	bl	80078fc <_sbrk_r>
 8006d1c:	4581      	cmp	r9, r0
 8006d1e:	d142      	bne.n	8006da6 <_malloc_r+0xea>
 8006d20:	6821      	ldr	r1, [r4, #0]
 8006d22:	4630      	mov	r0, r6
 8006d24:	1a6d      	subs	r5, r5, r1
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7ff ffa6 	bl	8006c78 <sbrk_aligned>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d03a      	beq.n	8006da6 <_malloc_r+0xea>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	442b      	add	r3, r5
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	f8d8 3000 	ldr.w	r3, [r8]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	bb62      	cbnz	r2, 8006d98 <_malloc_r+0xdc>
 8006d3e:	f8c8 7000 	str.w	r7, [r8]
 8006d42:	e00f      	b.n	8006d64 <_malloc_r+0xa8>
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	1b52      	subs	r2, r2, r5
 8006d48:	d420      	bmi.n	8006d8c <_malloc_r+0xd0>
 8006d4a:	2a0b      	cmp	r2, #11
 8006d4c:	d917      	bls.n	8006d7e <_malloc_r+0xc2>
 8006d4e:	1961      	adds	r1, r4, r5
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	6025      	str	r5, [r4, #0]
 8006d54:	bf18      	it	ne
 8006d56:	6059      	strne	r1, [r3, #4]
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	bf08      	it	eq
 8006d5c:	f8c8 1000 	streq.w	r1, [r8]
 8006d60:	5162      	str	r2, [r4, r5]
 8006d62:	604b      	str	r3, [r1, #4]
 8006d64:	4630      	mov	r0, r6
 8006d66:	f000 f82f 	bl	8006dc8 <__malloc_unlock>
 8006d6a:	f104 000b 	add.w	r0, r4, #11
 8006d6e:	1d23      	adds	r3, r4, #4
 8006d70:	f020 0007 	bic.w	r0, r0, #7
 8006d74:	1ac2      	subs	r2, r0, r3
 8006d76:	bf1c      	itt	ne
 8006d78:	1a1b      	subne	r3, r3, r0
 8006d7a:	50a3      	strne	r3, [r4, r2]
 8006d7c:	e7af      	b.n	8006cde <_malloc_r+0x22>
 8006d7e:	6862      	ldr	r2, [r4, #4]
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	bf0c      	ite	eq
 8006d84:	f8c8 2000 	streq.w	r2, [r8]
 8006d88:	605a      	strne	r2, [r3, #4]
 8006d8a:	e7eb      	b.n	8006d64 <_malloc_r+0xa8>
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	6864      	ldr	r4, [r4, #4]
 8006d90:	e7ae      	b.n	8006cf0 <_malloc_r+0x34>
 8006d92:	463c      	mov	r4, r7
 8006d94:	687f      	ldr	r7, [r7, #4]
 8006d96:	e7b6      	b.n	8006d06 <_malloc_r+0x4a>
 8006d98:	461a      	mov	r2, r3
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d1fb      	bne.n	8006d98 <_malloc_r+0xdc>
 8006da0:	2300      	movs	r3, #0
 8006da2:	6053      	str	r3, [r2, #4]
 8006da4:	e7de      	b.n	8006d64 <_malloc_r+0xa8>
 8006da6:	230c      	movs	r3, #12
 8006da8:	4630      	mov	r0, r6
 8006daa:	6033      	str	r3, [r6, #0]
 8006dac:	f000 f80c 	bl	8006dc8 <__malloc_unlock>
 8006db0:	e794      	b.n	8006cdc <_malloc_r+0x20>
 8006db2:	6005      	str	r5, [r0, #0]
 8006db4:	e7d6      	b.n	8006d64 <_malloc_r+0xa8>
 8006db6:	bf00      	nop
 8006db8:	200004dc 	.word	0x200004dc

08006dbc <__malloc_lock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	@ (8006dc4 <__malloc_lock+0x8>)
 8006dbe:	f7ff b89c 	b.w	8005efa <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	200004d4 	.word	0x200004d4

08006dc8 <__malloc_unlock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	@ (8006dd0 <__malloc_unlock+0x8>)
 8006dca:	f7ff b897 	b.w	8005efc <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	200004d4 	.word	0x200004d4

08006dd4 <_Balloc>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	69c6      	ldr	r6, [r0, #28]
 8006dd8:	4604      	mov	r4, r0
 8006dda:	460d      	mov	r5, r1
 8006ddc:	b976      	cbnz	r6, 8006dfc <_Balloc+0x28>
 8006dde:	2010      	movs	r0, #16
 8006de0:	f7ff ff42 	bl	8006c68 <malloc>
 8006de4:	4602      	mov	r2, r0
 8006de6:	61e0      	str	r0, [r4, #28]
 8006de8:	b920      	cbnz	r0, 8006df4 <_Balloc+0x20>
 8006dea:	216b      	movs	r1, #107	@ 0x6b
 8006dec:	4b17      	ldr	r3, [pc, #92]	@ (8006e4c <_Balloc+0x78>)
 8006dee:	4818      	ldr	r0, [pc, #96]	@ (8006e50 <_Balloc+0x7c>)
 8006df0:	f000 fda2 	bl	8007938 <__assert_func>
 8006df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006df8:	6006      	str	r6, [r0, #0]
 8006dfa:	60c6      	str	r6, [r0, #12]
 8006dfc:	69e6      	ldr	r6, [r4, #28]
 8006dfe:	68f3      	ldr	r3, [r6, #12]
 8006e00:	b183      	cbz	r3, 8006e24 <_Balloc+0x50>
 8006e02:	69e3      	ldr	r3, [r4, #28]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e0a:	b9b8      	cbnz	r0, 8006e3c <_Balloc+0x68>
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e12:	1d72      	adds	r2, r6, #5
 8006e14:	4620      	mov	r0, r4
 8006e16:	0092      	lsls	r2, r2, #2
 8006e18:	f000 fdac 	bl	8007974 <_calloc_r>
 8006e1c:	b160      	cbz	r0, 8006e38 <_Balloc+0x64>
 8006e1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e22:	e00e      	b.n	8006e42 <_Balloc+0x6e>
 8006e24:	2221      	movs	r2, #33	@ 0x21
 8006e26:	2104      	movs	r1, #4
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 fda3 	bl	8007974 <_calloc_r>
 8006e2e:	69e3      	ldr	r3, [r4, #28]
 8006e30:	60f0      	str	r0, [r6, #12]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e4      	bne.n	8006e02 <_Balloc+0x2e>
 8006e38:	2000      	movs	r0, #0
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	6802      	ldr	r2, [r0, #0]
 8006e3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e42:	2300      	movs	r3, #0
 8006e44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e48:	e7f7      	b.n	8006e3a <_Balloc+0x66>
 8006e4a:	bf00      	nop
 8006e4c:	08008057 	.word	0x08008057
 8006e50:	080080d7 	.word	0x080080d7

08006e54 <_Bfree>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	69c6      	ldr	r6, [r0, #28]
 8006e58:	4605      	mov	r5, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	b976      	cbnz	r6, 8006e7c <_Bfree+0x28>
 8006e5e:	2010      	movs	r0, #16
 8006e60:	f7ff ff02 	bl	8006c68 <malloc>
 8006e64:	4602      	mov	r2, r0
 8006e66:	61e8      	str	r0, [r5, #28]
 8006e68:	b920      	cbnz	r0, 8006e74 <_Bfree+0x20>
 8006e6a:	218f      	movs	r1, #143	@ 0x8f
 8006e6c:	4b08      	ldr	r3, [pc, #32]	@ (8006e90 <_Bfree+0x3c>)
 8006e6e:	4809      	ldr	r0, [pc, #36]	@ (8006e94 <_Bfree+0x40>)
 8006e70:	f000 fd62 	bl	8007938 <__assert_func>
 8006e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e78:	6006      	str	r6, [r0, #0]
 8006e7a:	60c6      	str	r6, [r0, #12]
 8006e7c:	b13c      	cbz	r4, 8006e8e <_Bfree+0x3a>
 8006e7e:	69eb      	ldr	r3, [r5, #28]
 8006e80:	6862      	ldr	r2, [r4, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e88:	6021      	str	r1, [r4, #0]
 8006e8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	08008057 	.word	0x08008057
 8006e94:	080080d7 	.word	0x080080d7

08006e98 <__multadd>:
 8006e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	461e      	mov	r6, r3
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	690d      	ldr	r5, [r1, #16]
 8006ea6:	f101 0c14 	add.w	ip, r1, #20
 8006eaa:	f8dc 3000 	ldr.w	r3, [ip]
 8006eae:	3001      	adds	r0, #1
 8006eb0:	b299      	uxth	r1, r3
 8006eb2:	fb02 6101 	mla	r1, r2, r1, r6
 8006eb6:	0c1e      	lsrs	r6, r3, #16
 8006eb8:	0c0b      	lsrs	r3, r1, #16
 8006eba:	fb02 3306 	mla	r3, r2, r6, r3
 8006ebe:	b289      	uxth	r1, r1
 8006ec0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ec4:	4285      	cmp	r5, r0
 8006ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006eca:	f84c 1b04 	str.w	r1, [ip], #4
 8006ece:	dcec      	bgt.n	8006eaa <__multadd+0x12>
 8006ed0:	b30e      	cbz	r6, 8006f16 <__multadd+0x7e>
 8006ed2:	68a3      	ldr	r3, [r4, #8]
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	dc19      	bgt.n	8006f0c <__multadd+0x74>
 8006ed8:	6861      	ldr	r1, [r4, #4]
 8006eda:	4638      	mov	r0, r7
 8006edc:	3101      	adds	r1, #1
 8006ede:	f7ff ff79 	bl	8006dd4 <_Balloc>
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	b928      	cbnz	r0, 8006ef2 <__multadd+0x5a>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	21ba      	movs	r1, #186	@ 0xba
 8006eea:	4b0c      	ldr	r3, [pc, #48]	@ (8006f1c <__multadd+0x84>)
 8006eec:	480c      	ldr	r0, [pc, #48]	@ (8006f20 <__multadd+0x88>)
 8006eee:	f000 fd23 	bl	8007938 <__assert_func>
 8006ef2:	6922      	ldr	r2, [r4, #16]
 8006ef4:	f104 010c 	add.w	r1, r4, #12
 8006ef8:	3202      	adds	r2, #2
 8006efa:	0092      	lsls	r2, r2, #2
 8006efc:	300c      	adds	r0, #12
 8006efe:	f000 fd0d 	bl	800791c <memcpy>
 8006f02:	4621      	mov	r1, r4
 8006f04:	4638      	mov	r0, r7
 8006f06:	f7ff ffa5 	bl	8006e54 <_Bfree>
 8006f0a:	4644      	mov	r4, r8
 8006f0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f10:	3501      	adds	r5, #1
 8006f12:	615e      	str	r6, [r3, #20]
 8006f14:	6125      	str	r5, [r4, #16]
 8006f16:	4620      	mov	r0, r4
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	080080c6 	.word	0x080080c6
 8006f20:	080080d7 	.word	0x080080d7

08006f24 <__hi0bits>:
 8006f24:	4603      	mov	r3, r0
 8006f26:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f2a:	bf3a      	itte	cc
 8006f2c:	0403      	lslcc	r3, r0, #16
 8006f2e:	2010      	movcc	r0, #16
 8006f30:	2000      	movcs	r0, #0
 8006f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f36:	bf3c      	itt	cc
 8006f38:	021b      	lslcc	r3, r3, #8
 8006f3a:	3008      	addcc	r0, #8
 8006f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f40:	bf3c      	itt	cc
 8006f42:	011b      	lslcc	r3, r3, #4
 8006f44:	3004      	addcc	r0, #4
 8006f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4a:	bf3c      	itt	cc
 8006f4c:	009b      	lslcc	r3, r3, #2
 8006f4e:	3002      	addcc	r0, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	db05      	blt.n	8006f60 <__hi0bits+0x3c>
 8006f54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f58:	f100 0001 	add.w	r0, r0, #1
 8006f5c:	bf08      	it	eq
 8006f5e:	2020      	moveq	r0, #32
 8006f60:	4770      	bx	lr

08006f62 <__lo0bits>:
 8006f62:	6803      	ldr	r3, [r0, #0]
 8006f64:	4602      	mov	r2, r0
 8006f66:	f013 0007 	ands.w	r0, r3, #7
 8006f6a:	d00b      	beq.n	8006f84 <__lo0bits+0x22>
 8006f6c:	07d9      	lsls	r1, r3, #31
 8006f6e:	d421      	bmi.n	8006fb4 <__lo0bits+0x52>
 8006f70:	0798      	lsls	r0, r3, #30
 8006f72:	bf49      	itett	mi
 8006f74:	085b      	lsrmi	r3, r3, #1
 8006f76:	089b      	lsrpl	r3, r3, #2
 8006f78:	2001      	movmi	r0, #1
 8006f7a:	6013      	strmi	r3, [r2, #0]
 8006f7c:	bf5c      	itt	pl
 8006f7e:	2002      	movpl	r0, #2
 8006f80:	6013      	strpl	r3, [r2, #0]
 8006f82:	4770      	bx	lr
 8006f84:	b299      	uxth	r1, r3
 8006f86:	b909      	cbnz	r1, 8006f8c <__lo0bits+0x2a>
 8006f88:	2010      	movs	r0, #16
 8006f8a:	0c1b      	lsrs	r3, r3, #16
 8006f8c:	b2d9      	uxtb	r1, r3
 8006f8e:	b909      	cbnz	r1, 8006f94 <__lo0bits+0x32>
 8006f90:	3008      	adds	r0, #8
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	0719      	lsls	r1, r3, #28
 8006f96:	bf04      	itt	eq
 8006f98:	091b      	lsreq	r3, r3, #4
 8006f9a:	3004      	addeq	r0, #4
 8006f9c:	0799      	lsls	r1, r3, #30
 8006f9e:	bf04      	itt	eq
 8006fa0:	089b      	lsreq	r3, r3, #2
 8006fa2:	3002      	addeq	r0, #2
 8006fa4:	07d9      	lsls	r1, r3, #31
 8006fa6:	d403      	bmi.n	8006fb0 <__lo0bits+0x4e>
 8006fa8:	085b      	lsrs	r3, r3, #1
 8006faa:	f100 0001 	add.w	r0, r0, #1
 8006fae:	d003      	beq.n	8006fb8 <__lo0bits+0x56>
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	4770      	bx	lr
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4770      	bx	lr
 8006fb8:	2020      	movs	r0, #32
 8006fba:	4770      	bx	lr

08006fbc <__i2b>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	f7ff ff07 	bl	8006dd4 <_Balloc>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	b928      	cbnz	r0, 8006fd6 <__i2b+0x1a>
 8006fca:	f240 1145 	movw	r1, #325	@ 0x145
 8006fce:	4b04      	ldr	r3, [pc, #16]	@ (8006fe0 <__i2b+0x24>)
 8006fd0:	4804      	ldr	r0, [pc, #16]	@ (8006fe4 <__i2b+0x28>)
 8006fd2:	f000 fcb1 	bl	8007938 <__assert_func>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	6144      	str	r4, [r0, #20]
 8006fda:	6103      	str	r3, [r0, #16]
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	bf00      	nop
 8006fe0:	080080c6 	.word	0x080080c6
 8006fe4:	080080d7 	.word	0x080080d7

08006fe8 <__multiply>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4617      	mov	r7, r2
 8006fee:	690a      	ldr	r2, [r1, #16]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4689      	mov	r9, r1
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	bfa2      	ittt	ge
 8006ff8:	463b      	movge	r3, r7
 8006ffa:	460f      	movge	r7, r1
 8006ffc:	4699      	movge	r9, r3
 8006ffe:	693d      	ldr	r5, [r7, #16]
 8007000:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	eb05 060a 	add.w	r6, r5, sl
 800700c:	42b3      	cmp	r3, r6
 800700e:	b085      	sub	sp, #20
 8007010:	bfb8      	it	lt
 8007012:	3101      	addlt	r1, #1
 8007014:	f7ff fede 	bl	8006dd4 <_Balloc>
 8007018:	b930      	cbnz	r0, 8007028 <__multiply+0x40>
 800701a:	4602      	mov	r2, r0
 800701c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007020:	4b40      	ldr	r3, [pc, #256]	@ (8007124 <__multiply+0x13c>)
 8007022:	4841      	ldr	r0, [pc, #260]	@ (8007128 <__multiply+0x140>)
 8007024:	f000 fc88 	bl	8007938 <__assert_func>
 8007028:	f100 0414 	add.w	r4, r0, #20
 800702c:	4623      	mov	r3, r4
 800702e:	2200      	movs	r2, #0
 8007030:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007034:	4573      	cmp	r3, lr
 8007036:	d320      	bcc.n	800707a <__multiply+0x92>
 8007038:	f107 0814 	add.w	r8, r7, #20
 800703c:	f109 0114 	add.w	r1, r9, #20
 8007040:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007044:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	1beb      	subs	r3, r5, r7
 800704c:	3b15      	subs	r3, #21
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	3304      	adds	r3, #4
 8007054:	3715      	adds	r7, #21
 8007056:	42bd      	cmp	r5, r7
 8007058:	bf38      	it	cc
 800705a:	2304      	movcc	r3, #4
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	9b02      	ldr	r3, [sp, #8]
 8007060:	9103      	str	r1, [sp, #12]
 8007062:	428b      	cmp	r3, r1
 8007064:	d80c      	bhi.n	8007080 <__multiply+0x98>
 8007066:	2e00      	cmp	r6, #0
 8007068:	dd03      	ble.n	8007072 <__multiply+0x8a>
 800706a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800706e:	2b00      	cmp	r3, #0
 8007070:	d055      	beq.n	800711e <__multiply+0x136>
 8007072:	6106      	str	r6, [r0, #16]
 8007074:	b005      	add	sp, #20
 8007076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707a:	f843 2b04 	str.w	r2, [r3], #4
 800707e:	e7d9      	b.n	8007034 <__multiply+0x4c>
 8007080:	f8b1 a000 	ldrh.w	sl, [r1]
 8007084:	f1ba 0f00 	cmp.w	sl, #0
 8007088:	d01f      	beq.n	80070ca <__multiply+0xe2>
 800708a:	46c4      	mov	ip, r8
 800708c:	46a1      	mov	r9, r4
 800708e:	2700      	movs	r7, #0
 8007090:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007094:	f8d9 3000 	ldr.w	r3, [r9]
 8007098:	fa1f fb82 	uxth.w	fp, r2
 800709c:	b29b      	uxth	r3, r3
 800709e:	fb0a 330b 	mla	r3, sl, fp, r3
 80070a2:	443b      	add	r3, r7
 80070a4:	f8d9 7000 	ldr.w	r7, [r9]
 80070a8:	0c12      	lsrs	r2, r2, #16
 80070aa:	0c3f      	lsrs	r7, r7, #16
 80070ac:	fb0a 7202 	mla	r2, sl, r2, r7
 80070b0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ba:	4565      	cmp	r5, ip
 80070bc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80070c0:	f849 3b04 	str.w	r3, [r9], #4
 80070c4:	d8e4      	bhi.n	8007090 <__multiply+0xa8>
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	50e7      	str	r7, [r4, r3]
 80070ca:	9b03      	ldr	r3, [sp, #12]
 80070cc:	3104      	adds	r1, #4
 80070ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80070d2:	f1b9 0f00 	cmp.w	r9, #0
 80070d6:	d020      	beq.n	800711a <__multiply+0x132>
 80070d8:	4647      	mov	r7, r8
 80070da:	46a4      	mov	ip, r4
 80070dc:	f04f 0a00 	mov.w	sl, #0
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	f8b7 b000 	ldrh.w	fp, [r7]
 80070e6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	fb09 220b 	mla	r2, r9, fp, r2
 80070f0:	4452      	add	r2, sl
 80070f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070f6:	f84c 3b04 	str.w	r3, [ip], #4
 80070fa:	f857 3b04 	ldr.w	r3, [r7], #4
 80070fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007102:	f8bc 3000 	ldrh.w	r3, [ip]
 8007106:	42bd      	cmp	r5, r7
 8007108:	fb09 330a 	mla	r3, r9, sl, r3
 800710c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007110:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007114:	d8e5      	bhi.n	80070e2 <__multiply+0xfa>
 8007116:	9a01      	ldr	r2, [sp, #4]
 8007118:	50a3      	str	r3, [r4, r2]
 800711a:	3404      	adds	r4, #4
 800711c:	e79f      	b.n	800705e <__multiply+0x76>
 800711e:	3e01      	subs	r6, #1
 8007120:	e7a1      	b.n	8007066 <__multiply+0x7e>
 8007122:	bf00      	nop
 8007124:	080080c6 	.word	0x080080c6
 8007128:	080080d7 	.word	0x080080d7

0800712c <__pow5mult>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4615      	mov	r5, r2
 8007132:	f012 0203 	ands.w	r2, r2, #3
 8007136:	4607      	mov	r7, r0
 8007138:	460e      	mov	r6, r1
 800713a:	d007      	beq.n	800714c <__pow5mult+0x20>
 800713c:	4c25      	ldr	r4, [pc, #148]	@ (80071d4 <__pow5mult+0xa8>)
 800713e:	3a01      	subs	r2, #1
 8007140:	2300      	movs	r3, #0
 8007142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007146:	f7ff fea7 	bl	8006e98 <__multadd>
 800714a:	4606      	mov	r6, r0
 800714c:	10ad      	asrs	r5, r5, #2
 800714e:	d03d      	beq.n	80071cc <__pow5mult+0xa0>
 8007150:	69fc      	ldr	r4, [r7, #28]
 8007152:	b97c      	cbnz	r4, 8007174 <__pow5mult+0x48>
 8007154:	2010      	movs	r0, #16
 8007156:	f7ff fd87 	bl	8006c68 <malloc>
 800715a:	4602      	mov	r2, r0
 800715c:	61f8      	str	r0, [r7, #28]
 800715e:	b928      	cbnz	r0, 800716c <__pow5mult+0x40>
 8007160:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007164:	4b1c      	ldr	r3, [pc, #112]	@ (80071d8 <__pow5mult+0xac>)
 8007166:	481d      	ldr	r0, [pc, #116]	@ (80071dc <__pow5mult+0xb0>)
 8007168:	f000 fbe6 	bl	8007938 <__assert_func>
 800716c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007170:	6004      	str	r4, [r0, #0]
 8007172:	60c4      	str	r4, [r0, #12]
 8007174:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800717c:	b94c      	cbnz	r4, 8007192 <__pow5mult+0x66>
 800717e:	f240 2171 	movw	r1, #625	@ 0x271
 8007182:	4638      	mov	r0, r7
 8007184:	f7ff ff1a 	bl	8006fbc <__i2b>
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	f04f 0900 	mov.w	r9, #0
 8007196:	07eb      	lsls	r3, r5, #31
 8007198:	d50a      	bpl.n	80071b0 <__pow5mult+0x84>
 800719a:	4631      	mov	r1, r6
 800719c:	4622      	mov	r2, r4
 800719e:	4638      	mov	r0, r7
 80071a0:	f7ff ff22 	bl	8006fe8 <__multiply>
 80071a4:	4680      	mov	r8, r0
 80071a6:	4631      	mov	r1, r6
 80071a8:	4638      	mov	r0, r7
 80071aa:	f7ff fe53 	bl	8006e54 <_Bfree>
 80071ae:	4646      	mov	r6, r8
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	d00b      	beq.n	80071cc <__pow5mult+0xa0>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	b938      	cbnz	r0, 80071c8 <__pow5mult+0x9c>
 80071b8:	4622      	mov	r2, r4
 80071ba:	4621      	mov	r1, r4
 80071bc:	4638      	mov	r0, r7
 80071be:	f7ff ff13 	bl	8006fe8 <__multiply>
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	f8c0 9000 	str.w	r9, [r0]
 80071c8:	4604      	mov	r4, r0
 80071ca:	e7e4      	b.n	8007196 <__pow5mult+0x6a>
 80071cc:	4630      	mov	r0, r6
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	bf00      	nop
 80071d4:	08008188 	.word	0x08008188
 80071d8:	08008057 	.word	0x08008057
 80071dc:	080080d7 	.word	0x080080d7

080071e0 <__lshift>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	460c      	mov	r4, r1
 80071e6:	4607      	mov	r7, r0
 80071e8:	4691      	mov	r9, r2
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	6849      	ldr	r1, [r1, #4]
 80071ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071f8:	f108 0601 	add.w	r6, r8, #1
 80071fc:	42b3      	cmp	r3, r6
 80071fe:	db0b      	blt.n	8007218 <__lshift+0x38>
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff fde7 	bl	8006dd4 <_Balloc>
 8007206:	4605      	mov	r5, r0
 8007208:	b948      	cbnz	r0, 800721e <__lshift+0x3e>
 800720a:	4602      	mov	r2, r0
 800720c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007210:	4b27      	ldr	r3, [pc, #156]	@ (80072b0 <__lshift+0xd0>)
 8007212:	4828      	ldr	r0, [pc, #160]	@ (80072b4 <__lshift+0xd4>)
 8007214:	f000 fb90 	bl	8007938 <__assert_func>
 8007218:	3101      	adds	r1, #1
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	e7ee      	b.n	80071fc <__lshift+0x1c>
 800721e:	2300      	movs	r3, #0
 8007220:	f100 0114 	add.w	r1, r0, #20
 8007224:	f100 0210 	add.w	r2, r0, #16
 8007228:	4618      	mov	r0, r3
 800722a:	4553      	cmp	r3, sl
 800722c:	db33      	blt.n	8007296 <__lshift+0xb6>
 800722e:	6920      	ldr	r0, [r4, #16]
 8007230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007234:	f104 0314 	add.w	r3, r4, #20
 8007238:	f019 091f 	ands.w	r9, r9, #31
 800723c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007244:	d02b      	beq.n	800729e <__lshift+0xbe>
 8007246:	468a      	mov	sl, r1
 8007248:	2200      	movs	r2, #0
 800724a:	f1c9 0e20 	rsb	lr, r9, #32
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	fa00 f009 	lsl.w	r0, r0, r9
 8007254:	4310      	orrs	r0, r2
 8007256:	f84a 0b04 	str.w	r0, [sl], #4
 800725a:	f853 2b04 	ldr.w	r2, [r3], #4
 800725e:	459c      	cmp	ip, r3
 8007260:	fa22 f20e 	lsr.w	r2, r2, lr
 8007264:	d8f3      	bhi.n	800724e <__lshift+0x6e>
 8007266:	ebac 0304 	sub.w	r3, ip, r4
 800726a:	3b15      	subs	r3, #21
 800726c:	f023 0303 	bic.w	r3, r3, #3
 8007270:	3304      	adds	r3, #4
 8007272:	f104 0015 	add.w	r0, r4, #21
 8007276:	4560      	cmp	r0, ip
 8007278:	bf88      	it	hi
 800727a:	2304      	movhi	r3, #4
 800727c:	50ca      	str	r2, [r1, r3]
 800727e:	b10a      	cbz	r2, 8007284 <__lshift+0xa4>
 8007280:	f108 0602 	add.w	r6, r8, #2
 8007284:	3e01      	subs	r6, #1
 8007286:	4638      	mov	r0, r7
 8007288:	4621      	mov	r1, r4
 800728a:	612e      	str	r6, [r5, #16]
 800728c:	f7ff fde2 	bl	8006e54 <_Bfree>
 8007290:	4628      	mov	r0, r5
 8007292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007296:	f842 0f04 	str.w	r0, [r2, #4]!
 800729a:	3301      	adds	r3, #1
 800729c:	e7c5      	b.n	800722a <__lshift+0x4a>
 800729e:	3904      	subs	r1, #4
 80072a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a4:	459c      	cmp	ip, r3
 80072a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80072aa:	d8f9      	bhi.n	80072a0 <__lshift+0xc0>
 80072ac:	e7ea      	b.n	8007284 <__lshift+0xa4>
 80072ae:	bf00      	nop
 80072b0:	080080c6 	.word	0x080080c6
 80072b4:	080080d7 	.word	0x080080d7

080072b8 <__mcmp>:
 80072b8:	4603      	mov	r3, r0
 80072ba:	690a      	ldr	r2, [r1, #16]
 80072bc:	6900      	ldr	r0, [r0, #16]
 80072be:	b530      	push	{r4, r5, lr}
 80072c0:	1a80      	subs	r0, r0, r2
 80072c2:	d10e      	bne.n	80072e2 <__mcmp+0x2a>
 80072c4:	3314      	adds	r3, #20
 80072c6:	3114      	adds	r1, #20
 80072c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072d8:	4295      	cmp	r5, r2
 80072da:	d003      	beq.n	80072e4 <__mcmp+0x2c>
 80072dc:	d205      	bcs.n	80072ea <__mcmp+0x32>
 80072de:	f04f 30ff 	mov.w	r0, #4294967295
 80072e2:	bd30      	pop	{r4, r5, pc}
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d3f3      	bcc.n	80072d0 <__mcmp+0x18>
 80072e8:	e7fb      	b.n	80072e2 <__mcmp+0x2a>
 80072ea:	2001      	movs	r0, #1
 80072ec:	e7f9      	b.n	80072e2 <__mcmp+0x2a>
	...

080072f0 <__mdiff>:
 80072f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	4689      	mov	r9, r1
 80072f6:	4606      	mov	r6, r0
 80072f8:	4611      	mov	r1, r2
 80072fa:	4648      	mov	r0, r9
 80072fc:	4614      	mov	r4, r2
 80072fe:	f7ff ffdb 	bl	80072b8 <__mcmp>
 8007302:	1e05      	subs	r5, r0, #0
 8007304:	d112      	bne.n	800732c <__mdiff+0x3c>
 8007306:	4629      	mov	r1, r5
 8007308:	4630      	mov	r0, r6
 800730a:	f7ff fd63 	bl	8006dd4 <_Balloc>
 800730e:	4602      	mov	r2, r0
 8007310:	b928      	cbnz	r0, 800731e <__mdiff+0x2e>
 8007312:	f240 2137 	movw	r1, #567	@ 0x237
 8007316:	4b3e      	ldr	r3, [pc, #248]	@ (8007410 <__mdiff+0x120>)
 8007318:	483e      	ldr	r0, [pc, #248]	@ (8007414 <__mdiff+0x124>)
 800731a:	f000 fb0d 	bl	8007938 <__assert_func>
 800731e:	2301      	movs	r3, #1
 8007320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007324:	4610      	mov	r0, r2
 8007326:	b003      	add	sp, #12
 8007328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732c:	bfbc      	itt	lt
 800732e:	464b      	movlt	r3, r9
 8007330:	46a1      	movlt	r9, r4
 8007332:	4630      	mov	r0, r6
 8007334:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007338:	bfba      	itte	lt
 800733a:	461c      	movlt	r4, r3
 800733c:	2501      	movlt	r5, #1
 800733e:	2500      	movge	r5, #0
 8007340:	f7ff fd48 	bl	8006dd4 <_Balloc>
 8007344:	4602      	mov	r2, r0
 8007346:	b918      	cbnz	r0, 8007350 <__mdiff+0x60>
 8007348:	f240 2145 	movw	r1, #581	@ 0x245
 800734c:	4b30      	ldr	r3, [pc, #192]	@ (8007410 <__mdiff+0x120>)
 800734e:	e7e3      	b.n	8007318 <__mdiff+0x28>
 8007350:	f100 0b14 	add.w	fp, r0, #20
 8007354:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007358:	f109 0310 	add.w	r3, r9, #16
 800735c:	60c5      	str	r5, [r0, #12]
 800735e:	f04f 0c00 	mov.w	ip, #0
 8007362:	f109 0514 	add.w	r5, r9, #20
 8007366:	46d9      	mov	r9, fp
 8007368:	6926      	ldr	r6, [r4, #16]
 800736a:	f104 0e14 	add.w	lr, r4, #20
 800736e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007372:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	9b01      	ldr	r3, [sp, #4]
 800737a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800737e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007382:	b281      	uxth	r1, r0
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	fa1f f38a 	uxth.w	r3, sl
 800738a:	1a5b      	subs	r3, r3, r1
 800738c:	0c00      	lsrs	r0, r0, #16
 800738e:	4463      	add	r3, ip
 8007390:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007394:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007398:	b29b      	uxth	r3, r3
 800739a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800739e:	4576      	cmp	r6, lr
 80073a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073a4:	f849 3b04 	str.w	r3, [r9], #4
 80073a8:	d8e6      	bhi.n	8007378 <__mdiff+0x88>
 80073aa:	1b33      	subs	r3, r6, r4
 80073ac:	3b15      	subs	r3, #21
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	3415      	adds	r4, #21
 80073b4:	3304      	adds	r3, #4
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	bf38      	it	cc
 80073ba:	2304      	movcc	r3, #4
 80073bc:	441d      	add	r5, r3
 80073be:	445b      	add	r3, fp
 80073c0:	461e      	mov	r6, r3
 80073c2:	462c      	mov	r4, r5
 80073c4:	4544      	cmp	r4, r8
 80073c6:	d30e      	bcc.n	80073e6 <__mdiff+0xf6>
 80073c8:	f108 0103 	add.w	r1, r8, #3
 80073cc:	1b49      	subs	r1, r1, r5
 80073ce:	f021 0103 	bic.w	r1, r1, #3
 80073d2:	3d03      	subs	r5, #3
 80073d4:	45a8      	cmp	r8, r5
 80073d6:	bf38      	it	cc
 80073d8:	2100      	movcc	r1, #0
 80073da:	440b      	add	r3, r1
 80073dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073e0:	b199      	cbz	r1, 800740a <__mdiff+0x11a>
 80073e2:	6117      	str	r7, [r2, #16]
 80073e4:	e79e      	b.n	8007324 <__mdiff+0x34>
 80073e6:	46e6      	mov	lr, ip
 80073e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80073ec:	fa1f fc81 	uxth.w	ip, r1
 80073f0:	44f4      	add	ip, lr
 80073f2:	0c08      	lsrs	r0, r1, #16
 80073f4:	4471      	add	r1, lr
 80073f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073fa:	b289      	uxth	r1, r1
 80073fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007400:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007404:	f846 1b04 	str.w	r1, [r6], #4
 8007408:	e7dc      	b.n	80073c4 <__mdiff+0xd4>
 800740a:	3f01      	subs	r7, #1
 800740c:	e7e6      	b.n	80073dc <__mdiff+0xec>
 800740e:	bf00      	nop
 8007410:	080080c6 	.word	0x080080c6
 8007414:	080080d7 	.word	0x080080d7

08007418 <__d2b>:
 8007418:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800741c:	2101      	movs	r1, #1
 800741e:	4690      	mov	r8, r2
 8007420:	4699      	mov	r9, r3
 8007422:	9e08      	ldr	r6, [sp, #32]
 8007424:	f7ff fcd6 	bl	8006dd4 <_Balloc>
 8007428:	4604      	mov	r4, r0
 800742a:	b930      	cbnz	r0, 800743a <__d2b+0x22>
 800742c:	4602      	mov	r2, r0
 800742e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007432:	4b23      	ldr	r3, [pc, #140]	@ (80074c0 <__d2b+0xa8>)
 8007434:	4823      	ldr	r0, [pc, #140]	@ (80074c4 <__d2b+0xac>)
 8007436:	f000 fa7f 	bl	8007938 <__assert_func>
 800743a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800743e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007442:	b10d      	cbz	r5, 8007448 <__d2b+0x30>
 8007444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	f1b8 0300 	subs.w	r3, r8, #0
 800744e:	d024      	beq.n	800749a <__d2b+0x82>
 8007450:	4668      	mov	r0, sp
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	f7ff fd85 	bl	8006f62 <__lo0bits>
 8007458:	e9dd 1200 	ldrd	r1, r2, [sp]
 800745c:	b1d8      	cbz	r0, 8007496 <__d2b+0x7e>
 800745e:	f1c0 0320 	rsb	r3, r0, #32
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	430b      	orrs	r3, r1
 8007468:	40c2      	lsrs	r2, r0
 800746a:	6163      	str	r3, [r4, #20]
 800746c:	9201      	str	r2, [sp, #4]
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	bf0c      	ite	eq
 8007474:	2201      	moveq	r2, #1
 8007476:	2202      	movne	r2, #2
 8007478:	61a3      	str	r3, [r4, #24]
 800747a:	6122      	str	r2, [r4, #16]
 800747c:	b1ad      	cbz	r5, 80074aa <__d2b+0x92>
 800747e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007482:	4405      	add	r5, r0
 8007484:	6035      	str	r5, [r6, #0]
 8007486:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800748a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748c:	6018      	str	r0, [r3, #0]
 800748e:	4620      	mov	r0, r4
 8007490:	b002      	add	sp, #8
 8007492:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007496:	6161      	str	r1, [r4, #20]
 8007498:	e7e9      	b.n	800746e <__d2b+0x56>
 800749a:	a801      	add	r0, sp, #4
 800749c:	f7ff fd61 	bl	8006f62 <__lo0bits>
 80074a0:	9b01      	ldr	r3, [sp, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	6163      	str	r3, [r4, #20]
 80074a6:	3020      	adds	r0, #32
 80074a8:	e7e7      	b.n	800747a <__d2b+0x62>
 80074aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80074ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074b2:	6030      	str	r0, [r6, #0]
 80074b4:	6918      	ldr	r0, [r3, #16]
 80074b6:	f7ff fd35 	bl	8006f24 <__hi0bits>
 80074ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074be:	e7e4      	b.n	800748a <__d2b+0x72>
 80074c0:	080080c6 	.word	0x080080c6
 80074c4:	080080d7 	.word	0x080080d7

080074c8 <__ssputs_r>:
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	461f      	mov	r7, r3
 80074ce:	688e      	ldr	r6, [r1, #8]
 80074d0:	4682      	mov	sl, r0
 80074d2:	42be      	cmp	r6, r7
 80074d4:	460c      	mov	r4, r1
 80074d6:	4690      	mov	r8, r2
 80074d8:	680b      	ldr	r3, [r1, #0]
 80074da:	d82d      	bhi.n	8007538 <__ssputs_r+0x70>
 80074dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074e4:	d026      	beq.n	8007534 <__ssputs_r+0x6c>
 80074e6:	6965      	ldr	r5, [r4, #20]
 80074e8:	6909      	ldr	r1, [r1, #16]
 80074ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074ee:	eba3 0901 	sub.w	r9, r3, r1
 80074f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074f6:	1c7b      	adds	r3, r7, #1
 80074f8:	444b      	add	r3, r9
 80074fa:	106d      	asrs	r5, r5, #1
 80074fc:	429d      	cmp	r5, r3
 80074fe:	bf38      	it	cc
 8007500:	461d      	movcc	r5, r3
 8007502:	0553      	lsls	r3, r2, #21
 8007504:	d527      	bpl.n	8007556 <__ssputs_r+0x8e>
 8007506:	4629      	mov	r1, r5
 8007508:	f7ff fbd8 	bl	8006cbc <_malloc_r>
 800750c:	4606      	mov	r6, r0
 800750e:	b360      	cbz	r0, 800756a <__ssputs_r+0xa2>
 8007510:	464a      	mov	r2, r9
 8007512:	6921      	ldr	r1, [r4, #16]
 8007514:	f000 fa02 	bl	800791c <memcpy>
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800751e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	6126      	str	r6, [r4, #16]
 8007526:	444e      	add	r6, r9
 8007528:	6026      	str	r6, [r4, #0]
 800752a:	463e      	mov	r6, r7
 800752c:	6165      	str	r5, [r4, #20]
 800752e:	eba5 0509 	sub.w	r5, r5, r9
 8007532:	60a5      	str	r5, [r4, #8]
 8007534:	42be      	cmp	r6, r7
 8007536:	d900      	bls.n	800753a <__ssputs_r+0x72>
 8007538:	463e      	mov	r6, r7
 800753a:	4632      	mov	r2, r6
 800753c:	4641      	mov	r1, r8
 800753e:	6820      	ldr	r0, [r4, #0]
 8007540:	f000 f9c2 	bl	80078c8 <memmove>
 8007544:	2000      	movs	r0, #0
 8007546:	68a3      	ldr	r3, [r4, #8]
 8007548:	1b9b      	subs	r3, r3, r6
 800754a:	60a3      	str	r3, [r4, #8]
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	4433      	add	r3, r6
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007556:	462a      	mov	r2, r5
 8007558:	f000 fa32 	bl	80079c0 <_realloc_r>
 800755c:	4606      	mov	r6, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	d1e0      	bne.n	8007524 <__ssputs_r+0x5c>
 8007562:	4650      	mov	r0, sl
 8007564:	6921      	ldr	r1, [r4, #16]
 8007566:	f7ff fb37 	bl	8006bd8 <_free_r>
 800756a:	230c      	movs	r3, #12
 800756c:	f8ca 3000 	str.w	r3, [sl]
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	f04f 30ff 	mov.w	r0, #4294967295
 8007576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	e7e9      	b.n	8007552 <__ssputs_r+0x8a>
	...

08007580 <_svfiprintf_r>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	4698      	mov	r8, r3
 8007586:	898b      	ldrh	r3, [r1, #12]
 8007588:	4607      	mov	r7, r0
 800758a:	061b      	lsls	r3, r3, #24
 800758c:	460d      	mov	r5, r1
 800758e:	4614      	mov	r4, r2
 8007590:	b09d      	sub	sp, #116	@ 0x74
 8007592:	d510      	bpl.n	80075b6 <_svfiprintf_r+0x36>
 8007594:	690b      	ldr	r3, [r1, #16]
 8007596:	b973      	cbnz	r3, 80075b6 <_svfiprintf_r+0x36>
 8007598:	2140      	movs	r1, #64	@ 0x40
 800759a:	f7ff fb8f 	bl	8006cbc <_malloc_r>
 800759e:	6028      	str	r0, [r5, #0]
 80075a0:	6128      	str	r0, [r5, #16]
 80075a2:	b930      	cbnz	r0, 80075b2 <_svfiprintf_r+0x32>
 80075a4:	230c      	movs	r3, #12
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	b01d      	add	sp, #116	@ 0x74
 80075ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b2:	2340      	movs	r3, #64	@ 0x40
 80075b4:	616b      	str	r3, [r5, #20]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ba:	2320      	movs	r3, #32
 80075bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075c0:	2330      	movs	r3, #48	@ 0x30
 80075c2:	f04f 0901 	mov.w	r9, #1
 80075c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007764 <_svfiprintf_r+0x1e4>
 80075ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075d2:	4623      	mov	r3, r4
 80075d4:	469a      	mov	sl, r3
 80075d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075da:	b10a      	cbz	r2, 80075e0 <_svfiprintf_r+0x60>
 80075dc:	2a25      	cmp	r2, #37	@ 0x25
 80075de:	d1f9      	bne.n	80075d4 <_svfiprintf_r+0x54>
 80075e0:	ebba 0b04 	subs.w	fp, sl, r4
 80075e4:	d00b      	beq.n	80075fe <_svfiprintf_r+0x7e>
 80075e6:	465b      	mov	r3, fp
 80075e8:	4622      	mov	r2, r4
 80075ea:	4629      	mov	r1, r5
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ff6b 	bl	80074c8 <__ssputs_r>
 80075f2:	3001      	adds	r0, #1
 80075f4:	f000 80a7 	beq.w	8007746 <_svfiprintf_r+0x1c6>
 80075f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075fa:	445a      	add	r2, fp
 80075fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80075fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 809f 	beq.w	8007746 <_svfiprintf_r+0x1c6>
 8007608:	2300      	movs	r3, #0
 800760a:	f04f 32ff 	mov.w	r2, #4294967295
 800760e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007612:	f10a 0a01 	add.w	sl, sl, #1
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	9307      	str	r3, [sp, #28]
 800761a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800761e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007620:	4654      	mov	r4, sl
 8007622:	2205      	movs	r2, #5
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	484e      	ldr	r0, [pc, #312]	@ (8007764 <_svfiprintf_r+0x1e4>)
 800762a:	f7fe fc68 	bl	8005efe <memchr>
 800762e:	9a04      	ldr	r2, [sp, #16]
 8007630:	b9d8      	cbnz	r0, 800766a <_svfiprintf_r+0xea>
 8007632:	06d0      	lsls	r0, r2, #27
 8007634:	bf44      	itt	mi
 8007636:	2320      	movmi	r3, #32
 8007638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800763c:	0711      	lsls	r1, r2, #28
 800763e:	bf44      	itt	mi
 8007640:	232b      	movmi	r3, #43	@ 0x2b
 8007642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007646:	f89a 3000 	ldrb.w	r3, [sl]
 800764a:	2b2a      	cmp	r3, #42	@ 0x2a
 800764c:	d015      	beq.n	800767a <_svfiprintf_r+0xfa>
 800764e:	4654      	mov	r4, sl
 8007650:	2000      	movs	r0, #0
 8007652:	f04f 0c0a 	mov.w	ip, #10
 8007656:	9a07      	ldr	r2, [sp, #28]
 8007658:	4621      	mov	r1, r4
 800765a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765e:	3b30      	subs	r3, #48	@ 0x30
 8007660:	2b09      	cmp	r3, #9
 8007662:	d94b      	bls.n	80076fc <_svfiprintf_r+0x17c>
 8007664:	b1b0      	cbz	r0, 8007694 <_svfiprintf_r+0x114>
 8007666:	9207      	str	r2, [sp, #28]
 8007668:	e014      	b.n	8007694 <_svfiprintf_r+0x114>
 800766a:	eba0 0308 	sub.w	r3, r0, r8
 800766e:	fa09 f303 	lsl.w	r3, r9, r3
 8007672:	4313      	orrs	r3, r2
 8007674:	46a2      	mov	sl, r4
 8007676:	9304      	str	r3, [sp, #16]
 8007678:	e7d2      	b.n	8007620 <_svfiprintf_r+0xa0>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	1d19      	adds	r1, r3, #4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	9103      	str	r1, [sp, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	bfbb      	ittet	lt
 8007686:	425b      	neglt	r3, r3
 8007688:	f042 0202 	orrlt.w	r2, r2, #2
 800768c:	9307      	strge	r3, [sp, #28]
 800768e:	9307      	strlt	r3, [sp, #28]
 8007690:	bfb8      	it	lt
 8007692:	9204      	strlt	r2, [sp, #16]
 8007694:	7823      	ldrb	r3, [r4, #0]
 8007696:	2b2e      	cmp	r3, #46	@ 0x2e
 8007698:	d10a      	bne.n	80076b0 <_svfiprintf_r+0x130>
 800769a:	7863      	ldrb	r3, [r4, #1]
 800769c:	2b2a      	cmp	r3, #42	@ 0x2a
 800769e:	d132      	bne.n	8007706 <_svfiprintf_r+0x186>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	3402      	adds	r4, #2
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	9203      	str	r2, [sp, #12]
 80076aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076ae:	9305      	str	r3, [sp, #20]
 80076b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007768 <_svfiprintf_r+0x1e8>
 80076b4:	2203      	movs	r2, #3
 80076b6:	4650      	mov	r0, sl
 80076b8:	7821      	ldrb	r1, [r4, #0]
 80076ba:	f7fe fc20 	bl	8005efe <memchr>
 80076be:	b138      	cbz	r0, 80076d0 <_svfiprintf_r+0x150>
 80076c0:	2240      	movs	r2, #64	@ 0x40
 80076c2:	9b04      	ldr	r3, [sp, #16]
 80076c4:	eba0 000a 	sub.w	r0, r0, sl
 80076c8:	4082      	lsls	r2, r0
 80076ca:	4313      	orrs	r3, r2
 80076cc:	3401      	adds	r4, #1
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d4:	2206      	movs	r2, #6
 80076d6:	4825      	ldr	r0, [pc, #148]	@ (800776c <_svfiprintf_r+0x1ec>)
 80076d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076dc:	f7fe fc0f 	bl	8005efe <memchr>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d036      	beq.n	8007752 <_svfiprintf_r+0x1d2>
 80076e4:	4b22      	ldr	r3, [pc, #136]	@ (8007770 <_svfiprintf_r+0x1f0>)
 80076e6:	bb1b      	cbnz	r3, 8007730 <_svfiprintf_r+0x1b0>
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	3307      	adds	r3, #7
 80076ec:	f023 0307 	bic.w	r3, r3, #7
 80076f0:	3308      	adds	r3, #8
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f6:	4433      	add	r3, r6
 80076f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076fa:	e76a      	b.n	80075d2 <_svfiprintf_r+0x52>
 80076fc:	460c      	mov	r4, r1
 80076fe:	2001      	movs	r0, #1
 8007700:	fb0c 3202 	mla	r2, ip, r2, r3
 8007704:	e7a8      	b.n	8007658 <_svfiprintf_r+0xd8>
 8007706:	2300      	movs	r3, #0
 8007708:	f04f 0c0a 	mov.w	ip, #10
 800770c:	4619      	mov	r1, r3
 800770e:	3401      	adds	r4, #1
 8007710:	9305      	str	r3, [sp, #20]
 8007712:	4620      	mov	r0, r4
 8007714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007718:	3a30      	subs	r2, #48	@ 0x30
 800771a:	2a09      	cmp	r2, #9
 800771c:	d903      	bls.n	8007726 <_svfiprintf_r+0x1a6>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0c6      	beq.n	80076b0 <_svfiprintf_r+0x130>
 8007722:	9105      	str	r1, [sp, #20]
 8007724:	e7c4      	b.n	80076b0 <_svfiprintf_r+0x130>
 8007726:	4604      	mov	r4, r0
 8007728:	2301      	movs	r3, #1
 800772a:	fb0c 2101 	mla	r1, ip, r1, r2
 800772e:	e7f0      	b.n	8007712 <_svfiprintf_r+0x192>
 8007730:	ab03      	add	r3, sp, #12
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	462a      	mov	r2, r5
 8007736:	4638      	mov	r0, r7
 8007738:	4b0e      	ldr	r3, [pc, #56]	@ (8007774 <_svfiprintf_r+0x1f4>)
 800773a:	a904      	add	r1, sp, #16
 800773c:	f7fd fe5c 	bl	80053f8 <_printf_float>
 8007740:	1c42      	adds	r2, r0, #1
 8007742:	4606      	mov	r6, r0
 8007744:	d1d6      	bne.n	80076f4 <_svfiprintf_r+0x174>
 8007746:	89ab      	ldrh	r3, [r5, #12]
 8007748:	065b      	lsls	r3, r3, #25
 800774a:	f53f af2d 	bmi.w	80075a8 <_svfiprintf_r+0x28>
 800774e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007750:	e72c      	b.n	80075ac <_svfiprintf_r+0x2c>
 8007752:	ab03      	add	r3, sp, #12
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	462a      	mov	r2, r5
 8007758:	4638      	mov	r0, r7
 800775a:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <_svfiprintf_r+0x1f4>)
 800775c:	a904      	add	r1, sp, #16
 800775e:	f7fe f8e9 	bl	8005934 <_printf_i>
 8007762:	e7ed      	b.n	8007740 <_svfiprintf_r+0x1c0>
 8007764:	08008130 	.word	0x08008130
 8007768:	08008136 	.word	0x08008136
 800776c:	0800813a 	.word	0x0800813a
 8007770:	080053f9 	.word	0x080053f9
 8007774:	080074c9 	.word	0x080074c9

08007778 <__sflush_r>:
 8007778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	0716      	lsls	r6, r2, #28
 8007780:	4605      	mov	r5, r0
 8007782:	460c      	mov	r4, r1
 8007784:	d454      	bmi.n	8007830 <__sflush_r+0xb8>
 8007786:	684b      	ldr	r3, [r1, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	dc02      	bgt.n	8007792 <__sflush_r+0x1a>
 800778c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	dd48      	ble.n	8007824 <__sflush_r+0xac>
 8007792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007794:	2e00      	cmp	r6, #0
 8007796:	d045      	beq.n	8007824 <__sflush_r+0xac>
 8007798:	2300      	movs	r3, #0
 800779a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800779e:	682f      	ldr	r7, [r5, #0]
 80077a0:	6a21      	ldr	r1, [r4, #32]
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	d030      	beq.n	8007808 <__sflush_r+0x90>
 80077a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	0759      	lsls	r1, r3, #29
 80077ac:	d505      	bpl.n	80077ba <__sflush_r+0x42>
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077b4:	b10b      	cbz	r3, 80077ba <__sflush_r+0x42>
 80077b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077b8:	1ad2      	subs	r2, r2, r3
 80077ba:	2300      	movs	r3, #0
 80077bc:	4628      	mov	r0, r5
 80077be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077c0:	6a21      	ldr	r1, [r4, #32]
 80077c2:	47b0      	blx	r6
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	d106      	bne.n	80077d8 <__sflush_r+0x60>
 80077ca:	6829      	ldr	r1, [r5, #0]
 80077cc:	291d      	cmp	r1, #29
 80077ce:	d82b      	bhi.n	8007828 <__sflush_r+0xb0>
 80077d0:	4a28      	ldr	r2, [pc, #160]	@ (8007874 <__sflush_r+0xfc>)
 80077d2:	40ca      	lsrs	r2, r1
 80077d4:	07d6      	lsls	r6, r2, #31
 80077d6:	d527      	bpl.n	8007828 <__sflush_r+0xb0>
 80077d8:	2200      	movs	r2, #0
 80077da:	6062      	str	r2, [r4, #4]
 80077dc:	6922      	ldr	r2, [r4, #16]
 80077de:	04d9      	lsls	r1, r3, #19
 80077e0:	6022      	str	r2, [r4, #0]
 80077e2:	d504      	bpl.n	80077ee <__sflush_r+0x76>
 80077e4:	1c42      	adds	r2, r0, #1
 80077e6:	d101      	bne.n	80077ec <__sflush_r+0x74>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	b903      	cbnz	r3, 80077ee <__sflush_r+0x76>
 80077ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80077ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077f0:	602f      	str	r7, [r5, #0]
 80077f2:	b1b9      	cbz	r1, 8007824 <__sflush_r+0xac>
 80077f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077f8:	4299      	cmp	r1, r3
 80077fa:	d002      	beq.n	8007802 <__sflush_r+0x8a>
 80077fc:	4628      	mov	r0, r5
 80077fe:	f7ff f9eb 	bl	8006bd8 <_free_r>
 8007802:	2300      	movs	r3, #0
 8007804:	6363      	str	r3, [r4, #52]	@ 0x34
 8007806:	e00d      	b.n	8007824 <__sflush_r+0xac>
 8007808:	2301      	movs	r3, #1
 800780a:	4628      	mov	r0, r5
 800780c:	47b0      	blx	r6
 800780e:	4602      	mov	r2, r0
 8007810:	1c50      	adds	r0, r2, #1
 8007812:	d1c9      	bne.n	80077a8 <__sflush_r+0x30>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0c6      	beq.n	80077a8 <__sflush_r+0x30>
 800781a:	2b1d      	cmp	r3, #29
 800781c:	d001      	beq.n	8007822 <__sflush_r+0xaa>
 800781e:	2b16      	cmp	r3, #22
 8007820:	d11d      	bne.n	800785e <__sflush_r+0xe6>
 8007822:	602f      	str	r7, [r5, #0]
 8007824:	2000      	movs	r0, #0
 8007826:	e021      	b.n	800786c <__sflush_r+0xf4>
 8007828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800782c:	b21b      	sxth	r3, r3
 800782e:	e01a      	b.n	8007866 <__sflush_r+0xee>
 8007830:	690f      	ldr	r7, [r1, #16]
 8007832:	2f00      	cmp	r7, #0
 8007834:	d0f6      	beq.n	8007824 <__sflush_r+0xac>
 8007836:	0793      	lsls	r3, r2, #30
 8007838:	bf18      	it	ne
 800783a:	2300      	movne	r3, #0
 800783c:	680e      	ldr	r6, [r1, #0]
 800783e:	bf08      	it	eq
 8007840:	694b      	ldreq	r3, [r1, #20]
 8007842:	1bf6      	subs	r6, r6, r7
 8007844:	600f      	str	r7, [r1, #0]
 8007846:	608b      	str	r3, [r1, #8]
 8007848:	2e00      	cmp	r6, #0
 800784a:	ddeb      	ble.n	8007824 <__sflush_r+0xac>
 800784c:	4633      	mov	r3, r6
 800784e:	463a      	mov	r2, r7
 8007850:	4628      	mov	r0, r5
 8007852:	6a21      	ldr	r1, [r4, #32]
 8007854:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007858:	47e0      	blx	ip
 800785a:	2800      	cmp	r0, #0
 800785c:	dc07      	bgt.n	800786e <__sflush_r+0xf6>
 800785e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800786e:	4407      	add	r7, r0
 8007870:	1a36      	subs	r6, r6, r0
 8007872:	e7e9      	b.n	8007848 <__sflush_r+0xd0>
 8007874:	20400001 	.word	0x20400001

08007878 <_fflush_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	690b      	ldr	r3, [r1, #16]
 800787c:	4605      	mov	r5, r0
 800787e:	460c      	mov	r4, r1
 8007880:	b913      	cbnz	r3, 8007888 <_fflush_r+0x10>
 8007882:	2500      	movs	r5, #0
 8007884:	4628      	mov	r0, r5
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	b118      	cbz	r0, 8007892 <_fflush_r+0x1a>
 800788a:	6a03      	ldr	r3, [r0, #32]
 800788c:	b90b      	cbnz	r3, 8007892 <_fflush_r+0x1a>
 800788e:	f7fe f9fb 	bl	8005c88 <__sinit>
 8007892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0f3      	beq.n	8007882 <_fflush_r+0xa>
 800789a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800789c:	07d0      	lsls	r0, r2, #31
 800789e:	d404      	bmi.n	80078aa <_fflush_r+0x32>
 80078a0:	0599      	lsls	r1, r3, #22
 80078a2:	d402      	bmi.n	80078aa <_fflush_r+0x32>
 80078a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078a6:	f7fe fb28 	bl	8005efa <__retarget_lock_acquire_recursive>
 80078aa:	4628      	mov	r0, r5
 80078ac:	4621      	mov	r1, r4
 80078ae:	f7ff ff63 	bl	8007778 <__sflush_r>
 80078b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078b4:	4605      	mov	r5, r0
 80078b6:	07da      	lsls	r2, r3, #31
 80078b8:	d4e4      	bmi.n	8007884 <_fflush_r+0xc>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	059b      	lsls	r3, r3, #22
 80078be:	d4e1      	bmi.n	8007884 <_fflush_r+0xc>
 80078c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078c2:	f7fe fb1b 	bl	8005efc <__retarget_lock_release_recursive>
 80078c6:	e7dd      	b.n	8007884 <_fflush_r+0xc>

080078c8 <memmove>:
 80078c8:	4288      	cmp	r0, r1
 80078ca:	b510      	push	{r4, lr}
 80078cc:	eb01 0402 	add.w	r4, r1, r2
 80078d0:	d902      	bls.n	80078d8 <memmove+0x10>
 80078d2:	4284      	cmp	r4, r0
 80078d4:	4623      	mov	r3, r4
 80078d6:	d807      	bhi.n	80078e8 <memmove+0x20>
 80078d8:	1e43      	subs	r3, r0, #1
 80078da:	42a1      	cmp	r1, r4
 80078dc:	d008      	beq.n	80078f0 <memmove+0x28>
 80078de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078e6:	e7f8      	b.n	80078da <memmove+0x12>
 80078e8:	4601      	mov	r1, r0
 80078ea:	4402      	add	r2, r0
 80078ec:	428a      	cmp	r2, r1
 80078ee:	d100      	bne.n	80078f2 <memmove+0x2a>
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078fa:	e7f7      	b.n	80078ec <memmove+0x24>

080078fc <_sbrk_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	2300      	movs	r3, #0
 8007900:	4d05      	ldr	r5, [pc, #20]	@ (8007918 <_sbrk_r+0x1c>)
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7f9 fd02 	bl	8001310 <_sbrk>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_sbrk_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_sbrk_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	200004d0 	.word	0x200004d0

0800791c <memcpy>:
 800791c:	440a      	add	r2, r1
 800791e:	4291      	cmp	r1, r2
 8007920:	f100 33ff 	add.w	r3, r0, #4294967295
 8007924:	d100      	bne.n	8007928 <memcpy+0xc>
 8007926:	4770      	bx	lr
 8007928:	b510      	push	{r4, lr}
 800792a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800792e:	4291      	cmp	r1, r2
 8007930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007934:	d1f9      	bne.n	800792a <memcpy+0xe>
 8007936:	bd10      	pop	{r4, pc}

08007938 <__assert_func>:
 8007938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800793a:	4614      	mov	r4, r2
 800793c:	461a      	mov	r2, r3
 800793e:	4b09      	ldr	r3, [pc, #36]	@ (8007964 <__assert_func+0x2c>)
 8007940:	4605      	mov	r5, r0
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68d8      	ldr	r0, [r3, #12]
 8007946:	b14c      	cbz	r4, 800795c <__assert_func+0x24>
 8007948:	4b07      	ldr	r3, [pc, #28]	@ (8007968 <__assert_func+0x30>)
 800794a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800794e:	9100      	str	r1, [sp, #0]
 8007950:	462b      	mov	r3, r5
 8007952:	4906      	ldr	r1, [pc, #24]	@ (800796c <__assert_func+0x34>)
 8007954:	f000 f870 	bl	8007a38 <fiprintf>
 8007958:	f000 f880 	bl	8007a5c <abort>
 800795c:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <__assert_func+0x38>)
 800795e:	461c      	mov	r4, r3
 8007960:	e7f3      	b.n	800794a <__assert_func+0x12>
 8007962:	bf00      	nop
 8007964:	20000018 	.word	0x20000018
 8007968:	0800814b 	.word	0x0800814b
 800796c:	08008158 	.word	0x08008158
 8007970:	08008186 	.word	0x08008186

08007974 <_calloc_r>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	fba1 5402 	umull	r5, r4, r1, r2
 800797a:	b934      	cbnz	r4, 800798a <_calloc_r+0x16>
 800797c:	4629      	mov	r1, r5
 800797e:	f7ff f99d 	bl	8006cbc <_malloc_r>
 8007982:	4606      	mov	r6, r0
 8007984:	b928      	cbnz	r0, 8007992 <_calloc_r+0x1e>
 8007986:	4630      	mov	r0, r6
 8007988:	bd70      	pop	{r4, r5, r6, pc}
 800798a:	220c      	movs	r2, #12
 800798c:	2600      	movs	r6, #0
 800798e:	6002      	str	r2, [r0, #0]
 8007990:	e7f9      	b.n	8007986 <_calloc_r+0x12>
 8007992:	462a      	mov	r2, r5
 8007994:	4621      	mov	r1, r4
 8007996:	f7fe fa26 	bl	8005de6 <memset>
 800799a:	e7f4      	b.n	8007986 <_calloc_r+0x12>

0800799c <__ascii_mbtowc>:
 800799c:	b082      	sub	sp, #8
 800799e:	b901      	cbnz	r1, 80079a2 <__ascii_mbtowc+0x6>
 80079a0:	a901      	add	r1, sp, #4
 80079a2:	b142      	cbz	r2, 80079b6 <__ascii_mbtowc+0x1a>
 80079a4:	b14b      	cbz	r3, 80079ba <__ascii_mbtowc+0x1e>
 80079a6:	7813      	ldrb	r3, [r2, #0]
 80079a8:	600b      	str	r3, [r1, #0]
 80079aa:	7812      	ldrb	r2, [r2, #0]
 80079ac:	1e10      	subs	r0, r2, #0
 80079ae:	bf18      	it	ne
 80079b0:	2001      	movne	r0, #1
 80079b2:	b002      	add	sp, #8
 80079b4:	4770      	bx	lr
 80079b6:	4610      	mov	r0, r2
 80079b8:	e7fb      	b.n	80079b2 <__ascii_mbtowc+0x16>
 80079ba:	f06f 0001 	mvn.w	r0, #1
 80079be:	e7f8      	b.n	80079b2 <__ascii_mbtowc+0x16>

080079c0 <_realloc_r>:
 80079c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	4607      	mov	r7, r0
 80079c6:	4614      	mov	r4, r2
 80079c8:	460d      	mov	r5, r1
 80079ca:	b921      	cbnz	r1, 80079d6 <_realloc_r+0x16>
 80079cc:	4611      	mov	r1, r2
 80079ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d2:	f7ff b973 	b.w	8006cbc <_malloc_r>
 80079d6:	b92a      	cbnz	r2, 80079e4 <_realloc_r+0x24>
 80079d8:	f7ff f8fe 	bl	8006bd8 <_free_r>
 80079dc:	4625      	mov	r5, r4
 80079de:	4628      	mov	r0, r5
 80079e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e4:	f000 f841 	bl	8007a6a <_malloc_usable_size_r>
 80079e8:	4284      	cmp	r4, r0
 80079ea:	4606      	mov	r6, r0
 80079ec:	d802      	bhi.n	80079f4 <_realloc_r+0x34>
 80079ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079f2:	d8f4      	bhi.n	80079de <_realloc_r+0x1e>
 80079f4:	4621      	mov	r1, r4
 80079f6:	4638      	mov	r0, r7
 80079f8:	f7ff f960 	bl	8006cbc <_malloc_r>
 80079fc:	4680      	mov	r8, r0
 80079fe:	b908      	cbnz	r0, 8007a04 <_realloc_r+0x44>
 8007a00:	4645      	mov	r5, r8
 8007a02:	e7ec      	b.n	80079de <_realloc_r+0x1e>
 8007a04:	42b4      	cmp	r4, r6
 8007a06:	4622      	mov	r2, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	bf28      	it	cs
 8007a0c:	4632      	movcs	r2, r6
 8007a0e:	f7ff ff85 	bl	800791c <memcpy>
 8007a12:	4629      	mov	r1, r5
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff f8df 	bl	8006bd8 <_free_r>
 8007a1a:	e7f1      	b.n	8007a00 <_realloc_r+0x40>

08007a1c <__ascii_wctomb>:
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	4608      	mov	r0, r1
 8007a20:	b141      	cbz	r1, 8007a34 <__ascii_wctomb+0x18>
 8007a22:	2aff      	cmp	r2, #255	@ 0xff
 8007a24:	d904      	bls.n	8007a30 <__ascii_wctomb+0x14>
 8007a26:	228a      	movs	r2, #138	@ 0x8a
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	4770      	bx	lr
 8007a30:	2001      	movs	r0, #1
 8007a32:	700a      	strb	r2, [r1, #0]
 8007a34:	4770      	bx	lr
	...

08007a38 <fiprintf>:
 8007a38:	b40e      	push	{r1, r2, r3}
 8007a3a:	b503      	push	{r0, r1, lr}
 8007a3c:	4601      	mov	r1, r0
 8007a3e:	ab03      	add	r3, sp, #12
 8007a40:	4805      	ldr	r0, [pc, #20]	@ (8007a58 <fiprintf+0x20>)
 8007a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a46:	6800      	ldr	r0, [r0, #0]
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	f000 f83d 	bl	8007ac8 <_vfiprintf_r>
 8007a4e:	b002      	add	sp, #8
 8007a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a54:	b003      	add	sp, #12
 8007a56:	4770      	bx	lr
 8007a58:	20000018 	.word	0x20000018

08007a5c <abort>:
 8007a5c:	2006      	movs	r0, #6
 8007a5e:	b508      	push	{r3, lr}
 8007a60:	f000 fa06 	bl	8007e70 <raise>
 8007a64:	2001      	movs	r0, #1
 8007a66:	f7f9 fbde 	bl	8001226 <_exit>

08007a6a <_malloc_usable_size_r>:
 8007a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6e:	1f18      	subs	r0, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bfbc      	itt	lt
 8007a74:	580b      	ldrlt	r3, [r1, r0]
 8007a76:	18c0      	addlt	r0, r0, r3
 8007a78:	4770      	bx	lr

08007a7a <__sfputc_r>:
 8007a7a:	6893      	ldr	r3, [r2, #8]
 8007a7c:	b410      	push	{r4}
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	6093      	str	r3, [r2, #8]
 8007a84:	da07      	bge.n	8007a96 <__sfputc_r+0x1c>
 8007a86:	6994      	ldr	r4, [r2, #24]
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	db01      	blt.n	8007a90 <__sfputc_r+0x16>
 8007a8c:	290a      	cmp	r1, #10
 8007a8e:	d102      	bne.n	8007a96 <__sfputc_r+0x1c>
 8007a90:	bc10      	pop	{r4}
 8007a92:	f000 b931 	b.w	8007cf8 <__swbuf_r>
 8007a96:	6813      	ldr	r3, [r2, #0]
 8007a98:	1c58      	adds	r0, r3, #1
 8007a9a:	6010      	str	r0, [r2, #0]
 8007a9c:	7019      	strb	r1, [r3, #0]
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	bc10      	pop	{r4}
 8007aa2:	4770      	bx	lr

08007aa4 <__sfputs_r>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	4614      	mov	r4, r2
 8007aac:	18d5      	adds	r5, r2, r3
 8007aae:	42ac      	cmp	r4, r5
 8007ab0:	d101      	bne.n	8007ab6 <__sfputs_r+0x12>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e007      	b.n	8007ac6 <__sfputs_r+0x22>
 8007ab6:	463a      	mov	r2, r7
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abe:	f7ff ffdc 	bl	8007a7a <__sfputc_r>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	d1f3      	bne.n	8007aae <__sfputs_r+0xa>
 8007ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ac8 <_vfiprintf_r>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	460d      	mov	r5, r1
 8007ace:	4614      	mov	r4, r2
 8007ad0:	4698      	mov	r8, r3
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	b09d      	sub	sp, #116	@ 0x74
 8007ad6:	b118      	cbz	r0, 8007ae0 <_vfiprintf_r+0x18>
 8007ad8:	6a03      	ldr	r3, [r0, #32]
 8007ada:	b90b      	cbnz	r3, 8007ae0 <_vfiprintf_r+0x18>
 8007adc:	f7fe f8d4 	bl	8005c88 <__sinit>
 8007ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ae2:	07d9      	lsls	r1, r3, #31
 8007ae4:	d405      	bmi.n	8007af2 <_vfiprintf_r+0x2a>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	059a      	lsls	r2, r3, #22
 8007aea:	d402      	bmi.n	8007af2 <_vfiprintf_r+0x2a>
 8007aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007aee:	f7fe fa04 	bl	8005efa <__retarget_lock_acquire_recursive>
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	071b      	lsls	r3, r3, #28
 8007af6:	d501      	bpl.n	8007afc <_vfiprintf_r+0x34>
 8007af8:	692b      	ldr	r3, [r5, #16]
 8007afa:	b99b      	cbnz	r3, 8007b24 <_vfiprintf_r+0x5c>
 8007afc:	4629      	mov	r1, r5
 8007afe:	4630      	mov	r0, r6
 8007b00:	f000 f938 	bl	8007d74 <__swsetup_r>
 8007b04:	b170      	cbz	r0, 8007b24 <_vfiprintf_r+0x5c>
 8007b06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b08:	07dc      	lsls	r4, r3, #31
 8007b0a:	d504      	bpl.n	8007b16 <_vfiprintf_r+0x4e>
 8007b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b10:	b01d      	add	sp, #116	@ 0x74
 8007b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b16:	89ab      	ldrh	r3, [r5, #12]
 8007b18:	0598      	lsls	r0, r3, #22
 8007b1a:	d4f7      	bmi.n	8007b0c <_vfiprintf_r+0x44>
 8007b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b1e:	f7fe f9ed 	bl	8005efc <__retarget_lock_release_recursive>
 8007b22:	e7f3      	b.n	8007b0c <_vfiprintf_r+0x44>
 8007b24:	2300      	movs	r3, #0
 8007b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b28:	2320      	movs	r3, #32
 8007b2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b2e:	2330      	movs	r3, #48	@ 0x30
 8007b30:	f04f 0901 	mov.w	r9, #1
 8007b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b38:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007ce4 <_vfiprintf_r+0x21c>
 8007b3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b40:	4623      	mov	r3, r4
 8007b42:	469a      	mov	sl, r3
 8007b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b48:	b10a      	cbz	r2, 8007b4e <_vfiprintf_r+0x86>
 8007b4a:	2a25      	cmp	r2, #37	@ 0x25
 8007b4c:	d1f9      	bne.n	8007b42 <_vfiprintf_r+0x7a>
 8007b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b52:	d00b      	beq.n	8007b6c <_vfiprintf_r+0xa4>
 8007b54:	465b      	mov	r3, fp
 8007b56:	4622      	mov	r2, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7ff ffa2 	bl	8007aa4 <__sfputs_r>
 8007b60:	3001      	adds	r0, #1
 8007b62:	f000 80a7 	beq.w	8007cb4 <_vfiprintf_r+0x1ec>
 8007b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b68:	445a      	add	r2, fp
 8007b6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 809f 	beq.w	8007cb4 <_vfiprintf_r+0x1ec>
 8007b76:	2300      	movs	r3, #0
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b80:	f10a 0a01 	add.w	sl, sl, #1
 8007b84:	9304      	str	r3, [sp, #16]
 8007b86:	9307      	str	r3, [sp, #28]
 8007b88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b8e:	4654      	mov	r4, sl
 8007b90:	2205      	movs	r2, #5
 8007b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b96:	4853      	ldr	r0, [pc, #332]	@ (8007ce4 <_vfiprintf_r+0x21c>)
 8007b98:	f7fe f9b1 	bl	8005efe <memchr>
 8007b9c:	9a04      	ldr	r2, [sp, #16]
 8007b9e:	b9d8      	cbnz	r0, 8007bd8 <_vfiprintf_r+0x110>
 8007ba0:	06d1      	lsls	r1, r2, #27
 8007ba2:	bf44      	itt	mi
 8007ba4:	2320      	movmi	r3, #32
 8007ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007baa:	0713      	lsls	r3, r2, #28
 8007bac:	bf44      	itt	mi
 8007bae:	232b      	movmi	r3, #43	@ 0x2b
 8007bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bba:	d015      	beq.n	8007be8 <_vfiprintf_r+0x120>
 8007bbc:	4654      	mov	r4, sl
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	f04f 0c0a 	mov.w	ip, #10
 8007bc4:	9a07      	ldr	r2, [sp, #28]
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bcc:	3b30      	subs	r3, #48	@ 0x30
 8007bce:	2b09      	cmp	r3, #9
 8007bd0:	d94b      	bls.n	8007c6a <_vfiprintf_r+0x1a2>
 8007bd2:	b1b0      	cbz	r0, 8007c02 <_vfiprintf_r+0x13a>
 8007bd4:	9207      	str	r2, [sp, #28]
 8007bd6:	e014      	b.n	8007c02 <_vfiprintf_r+0x13a>
 8007bd8:	eba0 0308 	sub.w	r3, r0, r8
 8007bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	46a2      	mov	sl, r4
 8007be4:	9304      	str	r3, [sp, #16]
 8007be6:	e7d2      	b.n	8007b8e <_vfiprintf_r+0xc6>
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	1d19      	adds	r1, r3, #4
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	9103      	str	r1, [sp, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bfbb      	ittet	lt
 8007bf4:	425b      	neglt	r3, r3
 8007bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bfa:	9307      	strge	r3, [sp, #28]
 8007bfc:	9307      	strlt	r3, [sp, #28]
 8007bfe:	bfb8      	it	lt
 8007c00:	9204      	strlt	r2, [sp, #16]
 8007c02:	7823      	ldrb	r3, [r4, #0]
 8007c04:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c06:	d10a      	bne.n	8007c1e <_vfiprintf_r+0x156>
 8007c08:	7863      	ldrb	r3, [r4, #1]
 8007c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c0c:	d132      	bne.n	8007c74 <_vfiprintf_r+0x1ac>
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	3402      	adds	r4, #2
 8007c12:	1d1a      	adds	r2, r3, #4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	9203      	str	r2, [sp, #12]
 8007c18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c1c:	9305      	str	r3, [sp, #20]
 8007c1e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007ce8 <_vfiprintf_r+0x220>
 8007c22:	2203      	movs	r2, #3
 8007c24:	4650      	mov	r0, sl
 8007c26:	7821      	ldrb	r1, [r4, #0]
 8007c28:	f7fe f969 	bl	8005efe <memchr>
 8007c2c:	b138      	cbz	r0, 8007c3e <_vfiprintf_r+0x176>
 8007c2e:	2240      	movs	r2, #64	@ 0x40
 8007c30:	9b04      	ldr	r3, [sp, #16]
 8007c32:	eba0 000a 	sub.w	r0, r0, sl
 8007c36:	4082      	lsls	r2, r0
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	3401      	adds	r4, #1
 8007c3c:	9304      	str	r3, [sp, #16]
 8007c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c42:	2206      	movs	r2, #6
 8007c44:	4829      	ldr	r0, [pc, #164]	@ (8007cec <_vfiprintf_r+0x224>)
 8007c46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c4a:	f7fe f958 	bl	8005efe <memchr>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d03f      	beq.n	8007cd2 <_vfiprintf_r+0x20a>
 8007c52:	4b27      	ldr	r3, [pc, #156]	@ (8007cf0 <_vfiprintf_r+0x228>)
 8007c54:	bb1b      	cbnz	r3, 8007c9e <_vfiprintf_r+0x1d6>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	3307      	adds	r3, #7
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	3308      	adds	r3, #8
 8007c60:	9303      	str	r3, [sp, #12]
 8007c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c64:	443b      	add	r3, r7
 8007c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c68:	e76a      	b.n	8007b40 <_vfiprintf_r+0x78>
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c72:	e7a8      	b.n	8007bc6 <_vfiprintf_r+0xfe>
 8007c74:	2300      	movs	r3, #0
 8007c76:	f04f 0c0a 	mov.w	ip, #10
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	3401      	adds	r4, #1
 8007c7e:	9305      	str	r3, [sp, #20]
 8007c80:	4620      	mov	r0, r4
 8007c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c86:	3a30      	subs	r2, #48	@ 0x30
 8007c88:	2a09      	cmp	r2, #9
 8007c8a:	d903      	bls.n	8007c94 <_vfiprintf_r+0x1cc>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0c6      	beq.n	8007c1e <_vfiprintf_r+0x156>
 8007c90:	9105      	str	r1, [sp, #20]
 8007c92:	e7c4      	b.n	8007c1e <_vfiprintf_r+0x156>
 8007c94:	4604      	mov	r4, r0
 8007c96:	2301      	movs	r3, #1
 8007c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c9c:	e7f0      	b.n	8007c80 <_vfiprintf_r+0x1b8>
 8007c9e:	ab03      	add	r3, sp, #12
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4b13      	ldr	r3, [pc, #76]	@ (8007cf4 <_vfiprintf_r+0x22c>)
 8007ca8:	a904      	add	r1, sp, #16
 8007caa:	f7fd fba5 	bl	80053f8 <_printf_float>
 8007cae:	4607      	mov	r7, r0
 8007cb0:	1c78      	adds	r0, r7, #1
 8007cb2:	d1d6      	bne.n	8007c62 <_vfiprintf_r+0x19a>
 8007cb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cb6:	07d9      	lsls	r1, r3, #31
 8007cb8:	d405      	bmi.n	8007cc6 <_vfiprintf_r+0x1fe>
 8007cba:	89ab      	ldrh	r3, [r5, #12]
 8007cbc:	059a      	lsls	r2, r3, #22
 8007cbe:	d402      	bmi.n	8007cc6 <_vfiprintf_r+0x1fe>
 8007cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cc2:	f7fe f91b 	bl	8005efc <__retarget_lock_release_recursive>
 8007cc6:	89ab      	ldrh	r3, [r5, #12]
 8007cc8:	065b      	lsls	r3, r3, #25
 8007cca:	f53f af1f 	bmi.w	8007b0c <_vfiprintf_r+0x44>
 8007cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cd0:	e71e      	b.n	8007b10 <_vfiprintf_r+0x48>
 8007cd2:	ab03      	add	r3, sp, #12
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	4630      	mov	r0, r6
 8007cda:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <_vfiprintf_r+0x22c>)
 8007cdc:	a904      	add	r1, sp, #16
 8007cde:	f7fd fe29 	bl	8005934 <_printf_i>
 8007ce2:	e7e4      	b.n	8007cae <_vfiprintf_r+0x1e6>
 8007ce4:	08008130 	.word	0x08008130
 8007ce8:	08008136 	.word	0x08008136
 8007cec:	0800813a 	.word	0x0800813a
 8007cf0:	080053f9 	.word	0x080053f9
 8007cf4:	08007aa5 	.word	0x08007aa5

08007cf8 <__swbuf_r>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	460e      	mov	r6, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	4605      	mov	r5, r0
 8007d00:	b118      	cbz	r0, 8007d0a <__swbuf_r+0x12>
 8007d02:	6a03      	ldr	r3, [r0, #32]
 8007d04:	b90b      	cbnz	r3, 8007d0a <__swbuf_r+0x12>
 8007d06:	f7fd ffbf 	bl	8005c88 <__sinit>
 8007d0a:	69a3      	ldr	r3, [r4, #24]
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	071a      	lsls	r2, r3, #28
 8007d12:	d501      	bpl.n	8007d18 <__swbuf_r+0x20>
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	b943      	cbnz	r3, 8007d2a <__swbuf_r+0x32>
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f000 f82a 	bl	8007d74 <__swsetup_r>
 8007d20:	b118      	cbz	r0, 8007d2a <__swbuf_r+0x32>
 8007d22:	f04f 37ff 	mov.w	r7, #4294967295
 8007d26:	4638      	mov	r0, r7
 8007d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	6922      	ldr	r2, [r4, #16]
 8007d2e:	b2f6      	uxtb	r6, r6
 8007d30:	1a98      	subs	r0, r3, r2
 8007d32:	6963      	ldr	r3, [r4, #20]
 8007d34:	4637      	mov	r7, r6
 8007d36:	4283      	cmp	r3, r0
 8007d38:	dc05      	bgt.n	8007d46 <__swbuf_r+0x4e>
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f7ff fd9b 	bl	8007878 <_fflush_r>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d1ed      	bne.n	8007d22 <__swbuf_r+0x2a>
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	60a3      	str	r3, [r4, #8]
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	6022      	str	r2, [r4, #0]
 8007d52:	701e      	strb	r6, [r3, #0]
 8007d54:	6962      	ldr	r2, [r4, #20]
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d004      	beq.n	8007d66 <__swbuf_r+0x6e>
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	07db      	lsls	r3, r3, #31
 8007d60:	d5e1      	bpl.n	8007d26 <__swbuf_r+0x2e>
 8007d62:	2e0a      	cmp	r6, #10
 8007d64:	d1df      	bne.n	8007d26 <__swbuf_r+0x2e>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f7ff fd85 	bl	8007878 <_fflush_r>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d0d9      	beq.n	8007d26 <__swbuf_r+0x2e>
 8007d72:	e7d6      	b.n	8007d22 <__swbuf_r+0x2a>

08007d74 <__swsetup_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <__swsetup_r+0xa8>)
 8007d78:	4605      	mov	r5, r0
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b118      	cbz	r0, 8007d88 <__swsetup_r+0x14>
 8007d80:	6a03      	ldr	r3, [r0, #32]
 8007d82:	b90b      	cbnz	r3, 8007d88 <__swsetup_r+0x14>
 8007d84:	f7fd ff80 	bl	8005c88 <__sinit>
 8007d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8c:	0719      	lsls	r1, r3, #28
 8007d8e:	d422      	bmi.n	8007dd6 <__swsetup_r+0x62>
 8007d90:	06da      	lsls	r2, r3, #27
 8007d92:	d407      	bmi.n	8007da4 <__swsetup_r+0x30>
 8007d94:	2209      	movs	r2, #9
 8007d96:	602a      	str	r2, [r5, #0]
 8007d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	e033      	b.n	8007e0c <__swsetup_r+0x98>
 8007da4:	0758      	lsls	r0, r3, #29
 8007da6:	d512      	bpl.n	8007dce <__swsetup_r+0x5a>
 8007da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007daa:	b141      	cbz	r1, 8007dbe <__swsetup_r+0x4a>
 8007dac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007db0:	4299      	cmp	r1, r3
 8007db2:	d002      	beq.n	8007dba <__swsetup_r+0x46>
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7fe ff0f 	bl	8006bd8 <_free_r>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6063      	str	r3, [r4, #4]
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f043 0308 	orr.w	r3, r3, #8
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	b94b      	cbnz	r3, 8007dee <__swsetup_r+0x7a>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de4:	d003      	beq.n	8007dee <__swsetup_r+0x7a>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	f000 f882 	bl	8007ef2 <__smakebuf_r>
 8007dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df2:	f013 0201 	ands.w	r2, r3, #1
 8007df6:	d00a      	beq.n	8007e0e <__swsetup_r+0x9a>
 8007df8:	2200      	movs	r2, #0
 8007dfa:	60a2      	str	r2, [r4, #8]
 8007dfc:	6962      	ldr	r2, [r4, #20]
 8007dfe:	4252      	negs	r2, r2
 8007e00:	61a2      	str	r2, [r4, #24]
 8007e02:	6922      	ldr	r2, [r4, #16]
 8007e04:	b942      	cbnz	r2, 8007e18 <__swsetup_r+0xa4>
 8007e06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e0a:	d1c5      	bne.n	8007d98 <__swsetup_r+0x24>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	0799      	lsls	r1, r3, #30
 8007e10:	bf58      	it	pl
 8007e12:	6962      	ldrpl	r2, [r4, #20]
 8007e14:	60a2      	str	r2, [r4, #8]
 8007e16:	e7f4      	b.n	8007e02 <__swsetup_r+0x8e>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e7f7      	b.n	8007e0c <__swsetup_r+0x98>
 8007e1c:	20000018 	.word	0x20000018

08007e20 <_raise_r>:
 8007e20:	291f      	cmp	r1, #31
 8007e22:	b538      	push	{r3, r4, r5, lr}
 8007e24:	4605      	mov	r5, r0
 8007e26:	460c      	mov	r4, r1
 8007e28:	d904      	bls.n	8007e34 <_raise_r+0x14>
 8007e2a:	2316      	movs	r3, #22
 8007e2c:	6003      	str	r3, [r0, #0]
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007e36:	b112      	cbz	r2, 8007e3e <_raise_r+0x1e>
 8007e38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e3c:	b94b      	cbnz	r3, 8007e52 <_raise_r+0x32>
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 f830 	bl	8007ea4 <_getpid_r>
 8007e44:	4622      	mov	r2, r4
 8007e46:	4601      	mov	r1, r0
 8007e48:	4628      	mov	r0, r5
 8007e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4e:	f000 b817 	b.w	8007e80 <_kill_r>
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d00a      	beq.n	8007e6c <_raise_r+0x4c>
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	d103      	bne.n	8007e62 <_raise_r+0x42>
 8007e5a:	2316      	movs	r3, #22
 8007e5c:	6003      	str	r3, [r0, #0]
 8007e5e:	2001      	movs	r0, #1
 8007e60:	e7e7      	b.n	8007e32 <_raise_r+0x12>
 8007e62:	2100      	movs	r1, #0
 8007e64:	4620      	mov	r0, r4
 8007e66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007e6a:	4798      	blx	r3
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e7e0      	b.n	8007e32 <_raise_r+0x12>

08007e70 <raise>:
 8007e70:	4b02      	ldr	r3, [pc, #8]	@ (8007e7c <raise+0xc>)
 8007e72:	4601      	mov	r1, r0
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f7ff bfd3 	b.w	8007e20 <_raise_r>
 8007e7a:	bf00      	nop
 8007e7c:	20000018 	.word	0x20000018

08007e80 <_kill_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	2300      	movs	r3, #0
 8007e84:	4d06      	ldr	r5, [pc, #24]	@ (8007ea0 <_kill_r+0x20>)
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	f7f9 f9ba 	bl	8001206 <_kill>
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	d102      	bne.n	8007e9c <_kill_r+0x1c>
 8007e96:	682b      	ldr	r3, [r5, #0]
 8007e98:	b103      	cbz	r3, 8007e9c <_kill_r+0x1c>
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200004d0 	.word	0x200004d0

08007ea4 <_getpid_r>:
 8007ea4:	f7f9 b9a8 	b.w	80011f8 <_getpid>

08007ea8 <__swhatbuf_r>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	4615      	mov	r5, r2
 8007eb2:	2900      	cmp	r1, #0
 8007eb4:	461e      	mov	r6, r3
 8007eb6:	b096      	sub	sp, #88	@ 0x58
 8007eb8:	da0c      	bge.n	8007ed4 <__swhatbuf_r+0x2c>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ec2:	bf14      	ite	ne
 8007ec4:	2340      	movne	r3, #64	@ 0x40
 8007ec6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007eca:	2000      	movs	r0, #0
 8007ecc:	6031      	str	r1, [r6, #0]
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	b016      	add	sp, #88	@ 0x58
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	466a      	mov	r2, sp
 8007ed6:	f000 f849 	bl	8007f6c <_fstat_r>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	dbed      	blt.n	8007eba <__swhatbuf_r+0x12>
 8007ede:	9901      	ldr	r1, [sp, #4]
 8007ee0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ee4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ee8:	4259      	negs	r1, r3
 8007eea:	4159      	adcs	r1, r3
 8007eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ef0:	e7eb      	b.n	8007eca <__swhatbuf_r+0x22>

08007ef2 <__smakebuf_r>:
 8007ef2:	898b      	ldrh	r3, [r1, #12]
 8007ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef6:	079d      	lsls	r5, r3, #30
 8007ef8:	4606      	mov	r6, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	d507      	bpl.n	8007f0e <__smakebuf_r+0x1c>
 8007efe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	2301      	movs	r3, #1
 8007f08:	6163      	str	r3, [r4, #20]
 8007f0a:	b003      	add	sp, #12
 8007f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f0e:	466a      	mov	r2, sp
 8007f10:	ab01      	add	r3, sp, #4
 8007f12:	f7ff ffc9 	bl	8007ea8 <__swhatbuf_r>
 8007f16:	9f00      	ldr	r7, [sp, #0]
 8007f18:	4605      	mov	r5, r0
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7fe fecd 	bl	8006cbc <_malloc_r>
 8007f22:	b948      	cbnz	r0, 8007f38 <__smakebuf_r+0x46>
 8007f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f28:	059a      	lsls	r2, r3, #22
 8007f2a:	d4ee      	bmi.n	8007f0a <__smakebuf_r+0x18>
 8007f2c:	f023 0303 	bic.w	r3, r3, #3
 8007f30:	f043 0302 	orr.w	r3, r3, #2
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	e7e2      	b.n	8007efe <__smakebuf_r+0xc>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	6020      	str	r0, [r4, #0]
 8007f48:	b15b      	cbz	r3, 8007f62 <__smakebuf_r+0x70>
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f50:	f000 f81e 	bl	8007f90 <_isatty_r>
 8007f54:	b128      	cbz	r0, 8007f62 <__smakebuf_r+0x70>
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f023 0303 	bic.w	r3, r3, #3
 8007f5c:	f043 0301 	orr.w	r3, r3, #1
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	431d      	orrs	r5, r3
 8007f66:	81a5      	strh	r5, [r4, #12]
 8007f68:	e7cf      	b.n	8007f0a <__smakebuf_r+0x18>
	...

08007f6c <_fstat_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4d06      	ldr	r5, [pc, #24]	@ (8007f8c <_fstat_r+0x20>)
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	f7f9 f9a3 	bl	80012c4 <_fstat>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d102      	bne.n	8007f88 <_fstat_r+0x1c>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	b103      	cbz	r3, 8007f88 <_fstat_r+0x1c>
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	bf00      	nop
 8007f8c:	200004d0 	.word	0x200004d0

08007f90 <_isatty_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	2300      	movs	r3, #0
 8007f94:	4d05      	ldr	r5, [pc, #20]	@ (8007fac <_isatty_r+0x1c>)
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7f9 f9a1 	bl	80012e2 <_isatty>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_isatty_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_isatty_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200004d0 	.word	0x200004d0

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
