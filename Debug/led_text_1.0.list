
led_text_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008238  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08008348  08008348  00009348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086fc  080086fc  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086fc  080086fc  000096fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008704  08008704  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800870c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200001d8  080088e0  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  080088e0  0000a618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001025b  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef1  00000000  00000000  0001a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c17  00000000  00000000  0001e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044cd  00000000  00000000  0001ef1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148ad  00000000  00000000  000233ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918f3  00000000  00000000  00037c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c958c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e84  00000000  00000000  000c95d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ce454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008330 	.word	0x08008330

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008330 	.word	0x08008330

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <key_control>:
 * key2 模式切换
 * key3 亮
 * key4 暗
 * key5 确定
 */
void key_control(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==RESET)//key1 开关
 8000acc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad0:	4835      	ldr	r0, [pc, #212]	@ (8000ba8 <key_control+0xe0>)
 8000ad2:	f002 fc79 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10f      	bne.n	8000afc <key_control+0x34>
	{
		HAL_Delay(20);
 8000adc:	2014      	movs	r0, #20
 8000ade:	f001 f93d 	bl	8001d5c <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==RESET);
 8000ae2:	bf00      	nop
 8000ae4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ae8:	482f      	ldr	r0, [pc, #188]	@ (8000ba8 <key_control+0xe0>)
 8000aea:	f002 fc6d 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <key_control+0x1c>
		hal_ledpwm(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f85b 	bl	8000bb0 <hal_ledpwm>
		HAL_Delay(20);
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==RESET);

	}

}
 8000afa:	e052      	b.n	8000ba2 <key_control+0xda>
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==RESET)//key2 模式切换
 8000afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b00:	4829      	ldr	r0, [pc, #164]	@ (8000ba8 <key_control+0xe0>)
 8000b02:	f002 fc61 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10c      	bne.n	8000b26 <key_control+0x5e>
		HAL_Delay(20);
 8000b0c:	2014      	movs	r0, #20
 8000b0e:	f001 f925 	bl	8001d5c <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==RESET);
 8000b12:	bf00      	nop
 8000b14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b18:	4823      	ldr	r0, [pc, #140]	@ (8000ba8 <key_control+0xe0>)
 8000b1a:	f002 fc55 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f7      	beq.n	8000b14 <key_control+0x4c>
}
 8000b24:	e03d      	b.n	8000ba2 <key_control+0xda>
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==RESET)//key3 亮
 8000b26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b2a:	481f      	ldr	r0, [pc, #124]	@ (8000ba8 <key_control+0xe0>)
 8000b2c:	f002 fc4c 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10c      	bne.n	8000b50 <key_control+0x88>
		HAL_Delay(20);
 8000b36:	2014      	movs	r0, #20
 8000b38:	f001 f910 	bl	8001d5c <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==RESET);
 8000b3c:	bf00      	nop
 8000b3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b42:	4819      	ldr	r0, [pc, #100]	@ (8000ba8 <key_control+0xe0>)
 8000b44:	f002 fc40 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0f7      	beq.n	8000b3e <key_control+0x76>
}
 8000b4e:	e028      	b.n	8000ba2 <key_control+0xda>
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==RESET)//key4 暗
 8000b50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b54:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <key_control+0xe0>)
 8000b56:	f002 fc37 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10c      	bne.n	8000b7a <key_control+0xb2>
		HAL_Delay(20);
 8000b60:	2014      	movs	r0, #20
 8000b62:	f001 f8fb 	bl	8001d5c <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==RESET);
 8000b66:	bf00      	nop
 8000b68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b6c:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <key_control+0xe0>)
 8000b6e:	f002 fc2b 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f7      	beq.n	8000b68 <key_control+0xa0>
}
 8000b78:	e013      	b.n	8000ba2 <key_control+0xda>
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==RESET)//key5 确定
 8000b7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <key_control+0xe4>)
 8000b80:	f002 fc22 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10b      	bne.n	8000ba2 <key_control+0xda>
		HAL_Delay(20);
 8000b8a:	2014      	movs	r0, #20
 8000b8c:	f001 f8e6 	bl	8001d5c <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==RESET);
 8000b90:	bf00      	nop
 8000b92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <key_control+0xe4>)
 8000b98:	f002 fc16 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f7      	beq.n	8000b92 <key_control+0xca>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	40010800 	.word	0x40010800

08000bb0 <hal_ledpwm>:

extern uint32_t led;

/*确定范围*/
void hal_ledpwm(uint32_t a)
  {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	  if (a<=0)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d107      	bne.n	8000bce <hal_ledpwm+0x1e>
	  {
		  led=0;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <hal_ledpwm+0x6c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4816      	ldr	r0, [pc, #88]	@ (8000c20 <hal_ledpwm+0x70>)
 8000bc8:	f003 faf4 	bl	80041b4 <HAL_TIM_PWM_Stop>
		  led=a;
		  // 直接设置比较值，无需重新初始化
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, led);//调pwm波暗
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // 确保PWM已启动
	  }
  }
 8000bcc:	e021      	b.n	8000c12 <hal_ledpwm+0x62>
	  else if (a>=100)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b63      	cmp	r3, #99	@ 0x63
 8000bd2:	d90c      	bls.n	8000bee <hal_ledpwm+0x3e>
		  led=99.9;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <hal_ledpwm+0x6c>)
 8000bd6:	2263      	movs	r2, #99	@ 0x63
 8000bd8:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, led);//调pwm波暗
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <hal_ledpwm+0x70>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <hal_ledpwm+0x6c>)
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // 确保PWM已启动
 8000be4:	2100      	movs	r1, #0
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <hal_ledpwm+0x70>)
 8000be8:	f003 fa42 	bl	8004070 <HAL_TIM_PWM_Start>
  }
 8000bec:	e011      	b.n	8000c12 <hal_ledpwm+0x62>
	  else if(a>0&&a<100)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00e      	beq.n	8000c12 <hal_ledpwm+0x62>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b63      	cmp	r3, #99	@ 0x63
 8000bf8:	d80b      	bhi.n	8000c12 <hal_ledpwm+0x62>
		  led=a;
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <hal_ledpwm+0x6c>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, led);//调pwm波暗
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <hal_ledpwm+0x70>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <hal_ledpwm+0x6c>)
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // 确保PWM已启动
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <hal_ledpwm+0x70>)
 8000c0e:	f003 fa2f 	bl	8004070 <HAL_TIM_PWM_Start>
  }
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000294 	.word	0x20000294
 8000c20:	20000298 	.word	0x20000298

08000c24 <hal_detect_Closeup_human>:
/**
 * @brief 检测是否有人
 * @note 传感器有人时输出低电平（GPIOB0为RESET），无人时高电平（SET）
 */
bool hal_detect_Closeup_human(void)//近距离0-10mm
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==SET)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <hal_detect_Closeup_human+0x1c>)
 8000c2c:	f002 fbcc 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d101      	bne.n	8000c3a <hal_detect_Closeup_human+0x16>
	{
		return false;//无人
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <hal_detect_Closeup_human+0x18>
	}
	else
	{
		return true;//有人
 8000c3a:	2301      	movs	r3, #1
	}
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000c56:	4a19      	ldr	r2, [pc, #100]	@ (8000cbc <MX_ADC1_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000c6e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c74:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000c82:	f001 f88f 	bl	8001da4 <HAL_ADC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c8c:	f000 fb21 	bl	80012d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_ADC1_Init+0x74>)
 8000ca2:	f001 fc9f 	bl	80025e4 <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cac:	f000 fb11 	bl	80012d2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200001f4 	.word	0x200001f4
 8000cbc:	40012400 	.word	0x40012400

08000cc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <HAL_ADC_MspInit+0x7c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d129      	bne.n	8000d34 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <HAL_ADC_MspInit+0x80>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <HAL_ADC_MspInit+0x80>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <HAL_ADC_MspInit+0x80>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <HAL_ADC_MspInit+0x80>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <HAL_ADC_MspInit+0x80>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <HAL_ADC_MspInit+0x80>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ao_Pin;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	2303      	movs	r3, #3
 8000d16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ao_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <HAL_ADC_MspInit+0x84>)
 8000d20:	f002 f9ce 	bl	80030c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 6, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2106      	movs	r1, #6
 8000d28:	2012      	movs	r0, #18
 8000d2a:	f001 ff7e 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d2e:	2012      	movs	r0, #18
 8000d30:	f001 ff97 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40012400 	.word	0x40012400
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800

08000d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_DMA_Init+0x68>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a17      	ldr	r2, [pc, #92]	@ (8000db0 <MX_DMA_Init+0x68>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_DMA_Init+0x68>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	200c      	movs	r0, #12
 8000d6c:	f001 ff5d 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d70:	200c      	movs	r0, #12
 8000d72:	f001 ff76 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200d      	movs	r0, #13
 8000d7c:	f001 ff55 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d80:	200d      	movs	r0, #13
 8000d82:	f001 ff6e 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	200e      	movs	r0, #14
 8000d8c:	f001 ff4d 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d90:	200e      	movs	r0, #14
 8000d92:	f001 ff66 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f001 ff45 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000da0:	200f      	movs	r0, #15
 8000da2:	f001 ff5e 	bl	8002c62 <HAL_NVIC_EnableIRQ>

}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	4b37      	ldr	r3, [pc, #220]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a36      	ldr	r2, [pc, #216]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0310 	and.w	r3, r3, #16
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de0:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a30      	ldr	r2, [pc, #192]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000de6:	f043 0320 	orr.w	r3, r3, #32
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b28      	ldr	r3, [pc, #160]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b25      	ldr	r3, [pc, #148]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a24      	ldr	r2, [pc, #144]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e2e:	481f      	ldr	r0, [pc, #124]	@ (8000eac <MX_GPIO_Init+0xf8>)
 8000e30:	f002 fae1 	bl	80033f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4817      	ldr	r0, [pc, #92]	@ (8000eac <MX_GPIO_Init+0xf8>)
 8000e4e:	f002 f937 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : red_Pin key1_Pin key2_Pin key3_Pin
                           key4_Pin */
  GPIO_InitStruct.Pin = red_Pin|key1_Pin|key2_Pin|key3_Pin
 8000e52:	f24f 0301 	movw	r3, #61441	@ 0xf001
 8000e56:	613b      	str	r3, [r7, #16]
                          |key4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4619      	mov	r1, r3
 8000e66:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <MX_GPIO_Init+0xfc>)
 8000e68:	f002 f92a 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : key5_Pin */
  GPIO_InitStruct.Pin = key5_Pin;
 8000e6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(key5_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <MX_GPIO_Init+0x100>)
 8000e82:	f002 f91d 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23c0      	movs	r3, #192	@ 0xc0
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_GPIO_Init+0xfc>)
 8000e9a:	f002 f911 	bl	80030c0 <HAL_GPIO_Init>

}
 8000e9e:	bf00      	nop
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

/*
 * RX回调函数
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a37      	ldr	r2, [pc, #220]	@ (8000fa4 <HAL_UART_RxCpltCallback+0xec>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d167      	bne.n	8000f9a <HAL_UART_RxCpltCallback+0xe2>
        // 检查起始字节是否为0xAA
        if (uart3_rx_buf[0] == 0xAA) {
 8000eca:	4b37      	ldr	r3, [pc, #220]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2baa      	cmp	r3, #170	@ 0xaa
 8000ed0:	d15e      	bne.n	8000f90 <HAL_UART_RxCpltCallback+0xd8>
            // 通过UART1非阻塞发送数据
            HAL_UART_Transmit_IT(&huart1, uart3_rx_buf, RX_BUF_SIZE);
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	4934      	ldr	r1, [pc, #208]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000ed6:	4835      	ldr	r0, [pc, #212]	@ (8000fac <HAL_UART_RxCpltCallback+0xf4>)
 8000ed8:	f004 f837 	bl	8004f4a <HAL_UART_Transmit_IT>
            if(uart3_rx_buf[1] == 0x01 && uart3_rx_buf[2] == 0x01 && a == 0){
 8000edc:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000ede:	785b      	ldrb	r3, [r3, #1]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d112      	bne.n	8000f0a <HAL_UART_RxCpltCallback+0x52>
 8000ee4:	4b30      	ldr	r3, [pc, #192]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000ee6:	789b      	ldrb	r3, [r3, #2]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d10e      	bne.n	8000f0a <HAL_UART_RxCpltCallback+0x52>
 8000eec:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xf8>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10a      	bne.n	8000f0a <HAL_UART_RxCpltCallback+0x52>
            	led=20;
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000ef6:	2214      	movs	r2, #20
 8000ef8:	601a      	str	r2, [r3, #0]
            	hal_ledpwm(led);//调pwm波开灯
 8000efa:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe56 	bl	8000bb0 <hal_ledpwm>
            	a=1;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xf8>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
            }
            if(uart3_rx_buf[1] == 0x10 && uart3_rx_buf[2] == 0x10 && a == 1){
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	2b10      	cmp	r3, #16
 8000f10:	d112      	bne.n	8000f38 <HAL_UART_RxCpltCallback+0x80>
 8000f12:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	2b10      	cmp	r3, #16
 8000f18:	d10e      	bne.n	8000f38 <HAL_UART_RxCpltCallback+0x80>
 8000f1a:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xf8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10a      	bne.n	8000f38 <HAL_UART_RxCpltCallback+0x80>
            	led=0;
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
            	hal_ledpwm(led);//调pwm波关灯
 8000f28:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe3f 	bl	8000bb0 <hal_ledpwm>
            	a=0;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xf8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
            }
            if(uart3_rx_buf[1] == 0x10 && uart3_rx_buf[2] == 0x01 && a == 1){
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000f3a:	785b      	ldrb	r3, [r3, #1]
 8000f3c:	2b10      	cmp	r3, #16
 8000f3e:	d111      	bne.n	8000f64 <HAL_UART_RxCpltCallback+0xac>
 8000f40:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000f42:	789b      	ldrb	r3, [r3, #2]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10d      	bne.n	8000f64 <HAL_UART_RxCpltCallback+0xac>
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xf8>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d109      	bne.n	8000f64 <HAL_UART_RxCpltCallback+0xac>
            	led=led+10;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	330a      	adds	r3, #10
 8000f56:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f58:	6013      	str	r3, [r2, #0]
            	hal_ledpwm(led);
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe26 	bl	8000bb0 <hal_ledpwm>
            }
            if(uart3_rx_buf[1] == 0x01 && uart3_rx_buf[2] == 0x10 && a == 1){
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d111      	bne.n	8000f90 <HAL_UART_RxCpltCallback+0xd8>
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000f6e:	789b      	ldrb	r3, [r3, #2]
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d10d      	bne.n	8000f90 <HAL_UART_RxCpltCallback+0xd8>
 8000f74:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_UART_RxCpltCallback+0xf8>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d109      	bne.n	8000f90 <HAL_UART_RxCpltCallback+0xd8>
            	led=led-10;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3b0a      	subs	r3, #10
 8000f82:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f84:	6013      	str	r3, [r2, #0]
            	hal_ledpwm(led);
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe10 	bl	8000bb0 <hal_ledpwm>
            }
        }
        // 重新启动接收
        HAL_UART_Receive_IT(&huart3, uart3_rx_buf, RX_BUF_SIZE);
 8000f90:	2203      	movs	r2, #3
 8000f92:	4905      	ldr	r1, [pc, #20]	@ (8000fa8 <HAL_UART_RxCpltCallback+0xf0>)
 8000f94:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x100>)
 8000f96:	f004 f80d 	bl	8004fb4 <HAL_UART_Receive_IT>
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40004800 	.word	0x40004800
 8000fa8:	2000028c 	.word	0x2000028c
 8000fac:	20000328 	.word	0x20000328
 8000fb0:	20000288 	.word	0x20000288
 8000fb4:	20000294 	.word	0x20000294
 8000fb8:	20000370 	.word	0x20000370

08000fbc <HAL_UART_TxCpltCallback>:

/*
 * TX回调函数
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {

	    }
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
	...

08000fd0 <Apply_Sliding_Filter>:
/*
 * 滑动窗口滤波
 */
int Apply_Sliding_Filter(int new_value) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    filter_sum -= filter_buffer[filter_index];
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <Apply_Sliding_Filter+0x68>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <Apply_Sliding_Filter+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <Apply_Sliding_Filter+0x70>)
 8000fe4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <Apply_Sliding_Filter+0x68>)
 8000fec:	6013      	str	r3, [r2, #0]
    filter_buffer[filter_index] = new_value;
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <Apply_Sliding_Filter+0x6c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <Apply_Sliding_Filter+0x70>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    filter_sum += new_value;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <Apply_Sliding_Filter+0x68>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <Apply_Sliding_Filter+0x68>)
 8001006:	6013      	str	r3, [r2, #0]
    filter_index = (filter_index + 1) % SLIDING_WINDOW_SIZE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <Apply_Sliding_Filter+0x6c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	425a      	negs	r2, r3
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	f002 020f 	and.w	r2, r2, #15
 8001018:	bf58      	it	pl
 800101a:	4253      	negpl	r3, r2
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <Apply_Sliding_Filter+0x6c>)
 8001020:	701a      	strb	r2, [r3, #0]
    return filter_sum / SLIDING_WINDOW_SIZE;
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <Apply_Sliding_Filter+0x68>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	da00      	bge.n	800102c <Apply_Sliding_Filter+0x5c>
 800102a:	330f      	adds	r3, #15
 800102c:	111b      	asrs	r3, r3, #4
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000284 	.word	0x20000284
 800103c:	20000280 	.word	0x20000280
 8001040:	20000240 	.word	0x20000240
 8001044:	00000000 	.word	0x00000000

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f000 fe24 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f8e4 	bl	800121c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // 检查HSI时钟状态
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001054:	4b66      	ldr	r3, [pc, #408]	@ (80011f0 <main+0x1a8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <main+0x1c>
  Error_Handler();
 8001060:	f000 f937 	bl	80012d2 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f7ff fea6 	bl	8000db4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001068:	f7ff fe6e 	bl	8000d48 <MX_DMA_Init>
  MX_ADC1_Init();
 800106c:	f7ff fdea 	bl	8000c44 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001070:	f000 fad4 	bl	800161c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001074:	f000 fb7a 	bl	800176c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001078:	f000 fc52 	bl	8001920 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800107c:	f000 fc7a 	bl	8001974 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001080:	485c      	ldr	r0, [pc, #368]	@ (80011f4 <main+0x1ac>)
 8001082:	f001 fc43 	bl	800290c <HAL_ADCEx_Calibration_Start>
  HAL_UART_Receive_IT(&huart3, uart3_rx_buf, RX_BUF_SIZE);
 8001086:	2203      	movs	r2, #3
 8001088:	495b      	ldr	r1, [pc, #364]	@ (80011f8 <main+0x1b0>)
 800108a:	485c      	ldr	r0, [pc, #368]	@ (80011fc <main+0x1b4>)
 800108c:	f003 ff92 	bl	8004fb4 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  key_control();
 8001090:	f7ff fd1a 	bl	8000ac8 <key_control>

	    // 启动ADC转换并等待完成
	    HAL_ADC_Start(&hadc1);  // 单次模式需每次启动
 8001094:	4857      	ldr	r0, [pc, #348]	@ (80011f4 <main+0x1ac>)
 8001096:	f000 ff5d 	bl	8001f54 <HAL_ADC_Start>
	    //Enter_LowPower_Mode();//低功耗会导致无法烧录

	    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800109a:	2164      	movs	r1, #100	@ 0x64
 800109c:	4855      	ldr	r0, [pc, #340]	@ (80011f4 <main+0x1ac>)
 800109e:	f001 f807 	bl	80020b0 <HAL_ADC_PollForConversion>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f040 8093 	bne.w	80011d0 <main+0x188>
	               value = Apply_Sliding_Filter(HAL_ADC_GetValue(&hadc1));
 80010aa:	4852      	ldr	r0, [pc, #328]	@ (80011f4 <main+0x1ac>)
 80010ac:	f001 f9bc 	bl	8002428 <HAL_ADC_GetValue>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff8c 	bl	8000fd0 <Apply_Sliding_Filter>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a51      	ldr	r2, [pc, #324]	@ (8001200 <main+0x1b8>)
 80010bc:	6013      	str	r3, [r2, #0]
	               mean_value += value;
 80010be:	4b51      	ldr	r3, [pc, #324]	@ (8001204 <main+0x1bc>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001200 <main+0x1b8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001204 <main+0x1bc>)
 80010ca:	6013      	str	r3, [r2, #0]
	               voltage = (value / 4095.0) * 3.3;
 80010cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001200 <main+0x1b8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f997 	bl	8000404 <__aeabi_i2d>
 80010d6:	a340      	add	r3, pc, #256	@ (adr r3, 80011d8 <main+0x190>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fb26 	bl	800072c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	a33d      	add	r3, pc, #244	@ (adr r3, 80011e0 <main+0x198>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff f9f3 	bl	80004d8 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4944      	ldr	r1, [pc, #272]	@ (8001208 <main+0x1c0>)
 80010f8:	e9c1 2300 	strd	r2, r3, [r1]
	               mean_voltage += voltage;
 80010fc:	4b43      	ldr	r3, [pc, #268]	@ (800120c <main+0x1c4>)
 80010fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001102:	4b41      	ldr	r3, [pc, #260]	@ (8001208 <main+0x1c0>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff f830 	bl	800016c <__adddf3>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	493e      	ldr	r1, [pc, #248]	@ (800120c <main+0x1c4>)
 8001112:	e9c1 2300 	strd	r2, r3, [r1]
	               i++;
 8001116:	4b3e      	ldr	r3, [pc, #248]	@ (8001210 <main+0x1c8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	4a3c      	ldr	r2, [pc, #240]	@ (8001210 <main+0x1c8>)
 800111e:	6013      	str	r3, [r2, #0]

	               if (i == 1023) {
 8001120:	4b3b      	ldr	r3, [pc, #236]	@ (8001210 <main+0x1c8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001128:	4293      	cmp	r3, r2
 800112a:	d1b1      	bne.n	8001090 <main+0x48>
	                   mean_value /= i;
 800112c:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <main+0x1bc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <main+0x1c8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	461a      	mov	r2, r3
 800113c:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <main+0x1bc>)
 800113e:	601a      	str	r2, [r3, #0]
	                   mean_voltage /= i;
 8001140:	4b32      	ldr	r3, [pc, #200]	@ (800120c <main+0x1c4>)
 8001142:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001146:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <main+0x1c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f94a 	bl	80003e4 <__aeabi_ui2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff fae8 	bl	800072c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	492a      	ldr	r1, [pc, #168]	@ (800120c <main+0x1c4>)
 8001162:	e9c1 2300 	strd	r2, r3, [r1]

//	                   snprintf(message, sizeof(message), "ADC:%ld V:%.2f",mean_value, (float)mean_voltage);
//	                   // 直接发送数据
//	                   HAL_UART_Transmit(&huart1, (uint8_t*)message,strnlen(message, sizeof(message)), 100);

	             	  if (hal_detect_Closeup_human())//判断人
 8001166:	f7ff fd5d 	bl	8000c24 <hal_detect_Closeup_human>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d021      	beq.n	80011b4 <main+0x16c>
	             	    {
	             		  HAL_ADC_Start_IT(&hadc1);
 8001170:	4820      	ldr	r0, [pc, #128]	@ (80011f4 <main+0x1ac>)
 8001172:	f001 f8a3 	bl	80022bc <HAL_ADC_Start_IT>
	             		 led=100-(mean_value/409.5);
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <main+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f942 	bl	8000404 <__aeabi_i2d>
 8001180:	a319      	add	r3, pc, #100	@ (adr r3, 80011e8 <main+0x1a0>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fad1 	bl	800072c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4920      	ldr	r1, [pc, #128]	@ (8001214 <main+0x1cc>)
 8001194:	f7fe ffe8 	bl	8000168 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc72 	bl	8000a88 <__aeabi_d2uiz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001218 <main+0x1d0>)
 80011a8:	6013      	str	r3, [r2, #0]
	             		 hal_ledpwm(led);
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <main+0x1d0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fcfe 	bl	8000bb0 <hal_ledpwm>
//	             	  else {
//
//	             		  hal_ledpwm(0);//调pwm波
//	             	}

	                   i = 0;
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <main+0x1c8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
	                   mean_value = 0;
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <main+0x1bc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
	                   mean_voltage = 0.0;
 80011c0:	4912      	ldr	r1, [pc, #72]	@ (800120c <main+0x1c4>)
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	e9c1 2300 	strd	r2, r3, [r1]
 80011ce:	e75f      	b.n	8001090 <main+0x48>
	               }
	           }
	    else {
	               Error_Handler();
 80011d0:	f000 f87f 	bl	80012d2 <Error_Handler>
	  key_control();
 80011d4:	e75c      	b.n	8001090 <main+0x48>
 80011d6:	bf00      	nop
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40affe00 	.word	0x40affe00
 80011e0:	66666666 	.word	0x66666666
 80011e4:	400a6666 	.word	0x400a6666
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40799800 	.word	0x40799800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	200001f4 	.word	0x200001f4
 80011f8:	2000028c 	.word	0x2000028c
 80011fc:	20000370 	.word	0x20000370
 8001200:	20000224 	.word	0x20000224
 8001204:	20000234 	.word	0x20000234
 8001208:	20000228 	.word	0x20000228
 800120c:	20000238 	.word	0x20000238
 8001210:	20000230 	.word	0x20000230
 8001214:	40590000 	.word	0x40590000
 8001218:	20000294 	.word	0x20000294

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001226:	2228      	movs	r2, #40	@ 0x28
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f005 f94f 	bl	80064ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124c:	2301      	movs	r3, #1
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001250:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125a:	2301      	movs	r3, #1
 800125c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001266:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001268:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800126c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f002 f8d8 	bl	8003428 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800127e:	f000 f828 	bl	80012d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001292:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fb44 	bl	800392c <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012aa:	f000 f812 	bl	80012d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ae:	2302      	movs	r3, #2
 80012b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fcc4 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012c6:	f000 f804 	bl	80012d2 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3750      	adds	r7, #80	@ 0x50
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d6:	b672      	cpsid	i
}
 80012d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012da:	bf00      	nop
 80012dc:	e7fd      	b.n	80012da <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_MspInit+0x5c>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a14      	ldr	r2, [pc, #80]	@ (800133c <HAL_MspInit+0x5c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_MspInit+0x5c>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_MspInit+0x5c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <HAL_MspInit+0x5c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <HAL_MspInit+0x5c>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_MspInit+0x60>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <HAL_MspInit+0x60>)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <NMI_Handler+0x4>

0800134c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <MemManage_Handler+0x4>

0800135c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <UsageFault_Handler+0x4>

0800136c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 fcc6 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <DMA1_Channel2_IRQHandler+0x10>)
 80013a2:	f001 fd87 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000440 	.word	0x20000440

080013b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <DMA1_Channel3_IRQHandler+0x10>)
 80013b6:	f001 fd7d 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000484 	.word	0x20000484

080013c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <DMA1_Channel4_IRQHandler+0x10>)
 80013ca:	f001 fd73 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200003fc 	.word	0x200003fc

080013d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <DMA1_Channel5_IRQHandler+0x10>)
 80013de:	f001 fd69 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003b8 	.word	0x200003b8

080013ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <ADC1_2_IRQHandler+0x10>)
 80013f2:	f001 f825 	bl	8002440 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200001f4 	.word	0x200001f4

08001400 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <TIM1_BRK_IRQHandler+0x10>)
 8001406:	f002 ff39 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000298 	.word	0x20000298

08001414 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <TIM1_UP_IRQHandler+0x10>)
 800141a:	f002 ff2f 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000298 	.word	0x20000298

08001428 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <TIM1_TRG_COM_IRQHandler+0x10>)
 800142e:	f002 ff25 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000298 	.word	0x20000298

0800143c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <TIM1_CC_IRQHandler+0x10>)
 8001442:	f002 ff1b 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000298 	.word	0x20000298

08001450 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <TIM2_IRQHandler+0x10>)
 8001456:	f002 ff11 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200002e0 	.word	0x200002e0

08001464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <USART1_IRQHandler+0x10>)
 800146a:	f003 fdc9 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000328 	.word	0x20000328

08001478 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <USART3_IRQHandler+0x10>)
 800147e:	f003 fdbf 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000370 	.word	0x20000370

0800148c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return 1;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <_kill>:

int _kill(int pid, int sig)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a4:	f005 f866 	bl	8006574 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2216      	movs	r2, #22
 80014ac:	601a      	str	r2, [r3, #0]
  return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_exit>:

void _exit (int status)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c2:	f04f 31ff 	mov.w	r1, #4294967295
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffe7 	bl	800149a <_kill>
  while (1) {}    /* Make sure we hang here */
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <_exit+0x12>

080014d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e2:	f3af 8000 	nop.w
 80014e6:	4601      	mov	r1, r0
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60ba      	str	r2, [r7, #8]
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf0      	blt.n	80014e2 <_read+0x12>
  }

  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e009      	b.n	8001530 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	60ba      	str	r2, [r7, #8]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf1      	blt.n	800151c <_write+0x12>
  }
  return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_close>:

int _close(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001568:	605a      	str	r2, [r3, #4]
  return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <_isatty>:

int _isatty(int file)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f004 ffce 	bl	8006574 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20005000 	.word	0x20005000
 8001604:	00000400 	.word	0x00000400
 8001608:	20000290 	.word	0x20000290
 800160c:	20000618 	.word	0x20000618

08001610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b096      	sub	sp, #88	@ 0x58
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2220      	movs	r2, #32
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f004 ff3a 	bl	80064ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165a:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <MX_TIM1_Init+0x144>)
 800165c:	4a41      	ldr	r2, [pc, #260]	@ (8001764 <MX_TIM1_Init+0x148>)
 800165e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001660:	4b3f      	ldr	r3, [pc, #252]	@ (8001760 <MX_TIM1_Init+0x144>)
 8001662:	2247      	movs	r2, #71	@ 0x47
 8001664:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <MX_TIM1_Init+0x144>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800166c:	4b3c      	ldr	r3, [pc, #240]	@ (8001760 <MX_TIM1_Init+0x144>)
 800166e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001672:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b3a      	ldr	r3, [pc, #232]	@ (8001760 <MX_TIM1_Init+0x144>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167a:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <MX_TIM1_Init+0x144>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001680:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <MX_TIM1_Init+0x144>)
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001686:	4836      	ldr	r0, [pc, #216]	@ (8001760 <MX_TIM1_Init+0x144>)
 8001688:	f002 fc4a 	bl	8003f20 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001692:	f7ff fe1e 	bl	80012d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016a0:	4619      	mov	r1, r3
 80016a2:	482f      	ldr	r0, [pc, #188]	@ (8001760 <MX_TIM1_Init+0x144>)
 80016a4:	f002 ff9c 	bl	80045e0 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016ae:	f7ff fe10 	bl	80012d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016b2:	482b      	ldr	r0, [pc, #172]	@ (8001760 <MX_TIM1_Init+0x144>)
 80016b4:	f002 fc83 	bl	8003fbe <HAL_TIM_PWM_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016be:	f7ff fe08 	bl	80012d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016ce:	4619      	mov	r1, r3
 80016d0:	4823      	ldr	r0, [pc, #140]	@ (8001760 <MX_TIM1_Init+0x144>)
 80016d2:	f003 fb29 	bl	8004d28 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016dc:	f7ff fdf9 	bl	80012d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	@ 0x60
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = led*10;
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <MX_TIM1_Init+0x14c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016fa:	2304      	movs	r3, #4
 80016fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	4814      	ldr	r0, [pc, #80]	@ (8001760 <MX_TIM1_Init+0x144>)
 8001710:	f002 fea4 	bl	800445c <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800171a:	f7ff fdda 	bl	80012d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001736:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4807      	ldr	r0, [pc, #28]	@ (8001760 <MX_TIM1_Init+0x144>)
 8001742:	f003 fb4f 	bl	8004de4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800174c:	f7ff fdc1 	bl	80012d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001750:	4803      	ldr	r0, [pc, #12]	@ (8001760 <MX_TIM1_Init+0x144>)
 8001752:	f000 f8b1 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 8001756:	bf00      	nop
 8001758:	3758      	adds	r7, #88	@ 0x58
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000298 	.word	0x20000298
 8001764:	40012c00 	.word	0x40012c00
 8001768:	20000294 	.word	0x20000294

0800176c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	463b      	mov	r3, r7
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <MX_TIM2_Init+0x98>)
 800178a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800178e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <MX_TIM2_Init+0x98>)
 8001792:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001796:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <MX_TIM2_Init+0x98>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800179e:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <MX_TIM2_Init+0x98>)
 80017a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <MX_TIM2_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <MX_TIM2_Init+0x98>)
 80017ae:	2280      	movs	r2, #128	@ 0x80
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b2:	4814      	ldr	r0, [pc, #80]	@ (8001804 <MX_TIM2_Init+0x98>)
 80017b4:	f002 fbb4 	bl	8003f20 <HAL_TIM_Base_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017be:	f7ff fd88 	bl	80012d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4619      	mov	r1, r3
 80017ce:	480d      	ldr	r0, [pc, #52]	@ (8001804 <MX_TIM2_Init+0x98>)
 80017d0:	f002 ff06 	bl	80045e0 <HAL_TIM_ConfigClockSource>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017da:	f7ff fd7a 	bl	80012d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e6:	463b      	mov	r3, r7
 80017e8:	4619      	mov	r1, r3
 80017ea:	4806      	ldr	r0, [pc, #24]	@ (8001804 <MX_TIM2_Init+0x98>)
 80017ec:	f003 fa9c 	bl	8004d28 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017f6:	f7ff fd6c 	bl	80012d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200002e0 	.word	0x200002e0

08001808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a26      	ldr	r2, [pc, #152]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12c      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_TIM_Base_MspInit+0xac>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_TIM_Base_MspInit+0xac>)
 8001820:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_TIM_Base_MspInit+0xac>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2018      	movs	r0, #24
 8001838:	f001 f9f7 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800183c:	2018      	movs	r0, #24
 800183e:	f001 fa10 	bl	8002c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2102      	movs	r1, #2
 8001846:	2019      	movs	r0, #25
 8001848:	f001 f9ef 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800184c:	2019      	movs	r0, #25
 800184e:	f001 fa08 	bl	8002c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	201a      	movs	r0, #26
 8001858:	f001 f9e7 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800185c:	201a      	movs	r0, #26
 800185e:	f001 fa00 	bl	8002c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	201b      	movs	r0, #27
 8001868:	f001 f9df 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800186c:	201b      	movs	r0, #27
 800186e:	f001 f9f8 	bl	8002c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001872:	e018      	b.n	80018a6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d113      	bne.n	80018a6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_TIM_Base_MspInit+0xac>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a0c      	ldr	r2, [pc, #48]	@ (80018b4 <HAL_TIM_Base_MspInit+0xac>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <HAL_TIM_Base_MspInit+0xac>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2103      	movs	r1, #3
 800189a:	201c      	movs	r0, #28
 800189c:	f001 f9c5 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a0:	201c      	movs	r0, #28
 80018a2:	f001 f9de 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40012c00 	.word	0x40012c00
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <HAL_TIM_MspPostInit+0x5c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d118      	bne.n	800190a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_TIM_MspPostInit+0x60>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <HAL_TIM_MspPostInit+0x60>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_TIM_MspPostInit+0x60>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = led_Pin;
 80018f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <HAL_TIM_MspPostInit+0x64>)
 8001906:	f001 fbdb 	bl	80030c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40010800 	.word	0x40010800

08001920 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <MX_USART1_UART_Init+0x50>)
 8001928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 800192c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_USART1_UART_Init+0x4c>)
 8001958:	f003 faa7 	bl	8004eaa <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001962:	f7ff fcb6 	bl	80012d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000328 	.word	0x20000328
 8001970:	40013800 	.word	0x40013800

08001974 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <MX_USART3_UART_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <MX_USART3_UART_Init+0x4c>)
 80019ac:	f003 fa7d 	bl	8004eaa <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019b6:	f7ff fc8c 	bl	80012d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000370 	.word	0x20000370
 80019c4:	40004800 	.word	0x40004800

080019c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a8d      	ldr	r2, [pc, #564]	@ (8001c18 <HAL_UART_MspInit+0x250>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	f040 8087 	bne.w	8001af8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ea:	4b8c      	ldr	r3, [pc, #560]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	4a8b      	ldr	r2, [pc, #556]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f4:	6193      	str	r3, [r2, #24]
 80019f6:	4b89      	ldr	r3, [pc, #548]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b86      	ldr	r3, [pc, #536]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a85      	ldr	r2, [pc, #532]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b83      	ldr	r3, [pc, #524]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	487c      	ldr	r0, [pc, #496]	@ (8001c20 <HAL_UART_MspInit+0x258>)
 8001a30:	f001 fb46 	bl	80030c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0318 	add.w	r3, r7, #24
 8001a46:	4619      	mov	r1, r3
 8001a48:	4875      	ldr	r0, [pc, #468]	@ (8001c20 <HAL_UART_MspInit+0x258>)
 8001a4a:	f001 fb39 	bl	80030c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001a4e:	4b75      	ldr	r3, [pc, #468]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a50:	4a75      	ldr	r2, [pc, #468]	@ (8001c28 <HAL_UART_MspInit+0x260>)
 8001a52:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a54:	4b73      	ldr	r3, [pc, #460]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5a:	4b72      	ldr	r3, [pc, #456]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a60:	4b70      	ldr	r3, [pc, #448]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a62:	2280      	movs	r2, #128	@ 0x80
 8001a64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a66:	4b6f      	ldr	r3, [pc, #444]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a6c:	4b6d      	ldr	r3, [pc, #436]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a72:	4b6c      	ldr	r3, [pc, #432]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a78:	4b6a      	ldr	r3, [pc, #424]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a7e:	4869      	ldr	r0, [pc, #420]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a80:	f001 f90a 	bl	8002c98 <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001a8a:	f7ff fc22 	bl	80012d2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a64      	ldr	r2, [pc, #400]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a94:	4a63      	ldr	r2, [pc, #396]	@ (8001c24 <HAL_UART_MspInit+0x25c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001a9a:	4b64      	ldr	r3, [pc, #400]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001a9c:	4a64      	ldr	r2, [pc, #400]	@ (8001c30 <HAL_UART_MspInit+0x268>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa0:	4b62      	ldr	r3, [pc, #392]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa6:	4b61      	ldr	r3, [pc, #388]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aac:	4b5f      	ldr	r3, [pc, #380]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001aae:	2280      	movs	r2, #128	@ 0x80
 8001ab0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001abe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac4:	4b59      	ldr	r3, [pc, #356]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001aca:	4858      	ldr	r0, [pc, #352]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001acc:	f001 f8e4 	bl	8002c98 <HAL_DMA_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001ad6:	f7ff fbfc 	bl	80012d2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a53      	ldr	r2, [pc, #332]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001ade:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ae0:	4a52      	ldr	r2, [pc, #328]	@ (8001c2c <HAL_UART_MspInit+0x264>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2025      	movs	r0, #37	@ 0x25
 8001aec:	f001 f89d 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001af0:	2025      	movs	r0, #37	@ 0x25
 8001af2:	f001 f8b6 	bl	8002c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001af6:	e08b      	b.n	8001c10 <HAL_UART_MspInit+0x248>
  else if(uartHandle->Instance==USART3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c34 <HAL_UART_MspInit+0x26c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	f040 8086 	bne.w	8001c10 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b04:	4b45      	ldr	r3, [pc, #276]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	4a44      	ldr	r2, [pc, #272]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001b0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b0e:	61d3      	str	r3, [r2, #28]
 8001b10:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a3e      	ldr	r2, [pc, #248]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b3c      	ldr	r3, [pc, #240]	@ (8001c1c <HAL_UART_MspInit+0x254>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	4619      	mov	r1, r3
 8001b48:	483b      	ldr	r0, [pc, #236]	@ (8001c38 <HAL_UART_MspInit+0x270>)
 8001b4a:	f001 fab9 	bl	80030c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 0318 	add.w	r3, r7, #24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4835      	ldr	r0, [pc, #212]	@ (8001c38 <HAL_UART_MspInit+0x270>)
 8001b64:	f001 faac 	bl	80030c0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b6a:	4a35      	ldr	r2, [pc, #212]	@ (8001c40 <HAL_UART_MspInit+0x278>)
 8001b6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b6e:	4b33      	ldr	r3, [pc, #204]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b70:	2210      	movs	r2, #16
 8001b72:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b74:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7a:	4b30      	ldr	r3, [pc, #192]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b92:	4b2a      	ldr	r3, [pc, #168]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b98:	4828      	ldr	r0, [pc, #160]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001b9a:	f001 f87d 	bl	8002c98 <HAL_DMA_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8001ba4:	f7ff fb95 	bl	80012d2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a24      	ldr	r2, [pc, #144]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001bac:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bae:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <HAL_UART_MspInit+0x274>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bb6:	4a24      	ldr	r2, [pc, #144]	@ (8001c48 <HAL_UART_MspInit+0x280>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bba:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bc8:	2280      	movs	r2, #128	@ 0x80
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001be4:	4817      	ldr	r0, [pc, #92]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001be6:	f001 f857 	bl	8002c98 <HAL_DMA_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001bf0:	f7ff fb6f 	bl	80012d2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a13      	ldr	r2, [pc, #76]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bfa:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <HAL_UART_MspInit+0x27c>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2101      	movs	r1, #1
 8001c04:	2027      	movs	r0, #39	@ 0x27
 8001c06:	f001 f810 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c0a:	2027      	movs	r0, #39	@ 0x27
 8001c0c:	f001 f829 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	@ 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010800 	.word	0x40010800
 8001c24:	200003b8 	.word	0x200003b8
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	200003fc 	.word	0x200003fc
 8001c30:	40020044 	.word	0x40020044
 8001c34:	40004800 	.word	0x40004800
 8001c38:	40010c00 	.word	0x40010c00
 8001c3c:	20000440 	.word	0x20000440
 8001c40:	4002001c 	.word	0x4002001c
 8001c44:	20000484 	.word	0x20000484
 8001c48:	40020030 	.word	0x40020030

08001c4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c4c:	f7ff fce0 	bl	8001610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c50:	480b      	ldr	r0, [pc, #44]	@ (8001c80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c52:	490c      	ldr	r1, [pc, #48]	@ (8001c84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c54:	4a0c      	ldr	r2, [pc, #48]	@ (8001c88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c68:	4c09      	ldr	r4, [pc, #36]	@ (8001c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c76:	f004 fc83 	bl	8006580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c7a:	f7ff f9e5 	bl	8001048 <main>
  bx lr
 8001c7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c88:	0800870c 	.word	0x0800870c
  ldr r2, =_sbss
 8001c8c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c90:	20000618 	.word	0x20000618

08001c94 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <CAN1_RX1_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_Init+0x28>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	@ (8001cc0 <HAL_Init+0x28>)
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 ffb3 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	200f      	movs	r0, #15
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fb14 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40022000 	.word	0x40022000

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 ffcb 	bl	8002c7e <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 ff93 	bl	8002c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	@ (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_IncTick+0x1c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_IncTick+0x20>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a03      	ldr	r2, [pc, #12]	@ (8001d44 <HAL_IncTick+0x20>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	20000008 	.word	0x20000008
 8001d44:	200004c8 	.word	0x200004c8

08001d48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b02      	ldr	r3, [pc, #8]	@ (8001d58 <HAL_GetTick+0x10>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	200004c8 	.word	0x200004c8

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffe0 	bl	8001d48 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0be      	b.n	8001f44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe ff6c 	bl	8000cc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fd4d 	bl	8002888 <ADC_ConversionStop_Disable>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 8099 	bne.w	8001f32 <HAL_ADC_Init+0x18e>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 8095 	bne.w	8001f32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e10:	f023 0302 	bic.w	r3, r3, #2
 8001e14:	f043 0202 	orr.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7b1b      	ldrb	r3, [r3, #12]
 8001e2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e3c:	d003      	beq.n	8001e46 <HAL_ADC_Init+0xa2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_ADC_Init+0xa8>
 8001e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4a:	e000      	b.n	8001e4e <HAL_ADC_Init+0xaa>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7d1b      	ldrb	r3, [r3, #20]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d119      	bne.n	8001e90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7b1b      	ldrb	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	035a      	lsls	r2, r3, #13
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e00b      	b.n	8001e90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_ADC_Init+0x1a8>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ec0:	d003      	beq.n	8001eca <HAL_ADC_Init+0x126>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d104      	bne.n	8001ed4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	051b      	lsls	r3, r3, #20
 8001ed2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_ADC_Init+0x1ac>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f0e:	e018      	b.n	8001f42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	f023 0312 	bic.w	r3, r3, #18
 8001f18:	f043 0210 	orr.w	r2, r3, #16
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f30:	e007      	b.n	8001f42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	f043 0210 	orr.w	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f50:	ff1f0efe 	.word	0xff1f0efe

08001f54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Start+0x1a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e098      	b.n	80020a0 <HAL_ADC_Start+0x14c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fc2c 	bl	80027d4 <ADC_Enable>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 8087 	bne.w	8002096 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a41      	ldr	r2, [pc, #260]	@ (80020a8 <HAL_ADC_Start+0x154>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d105      	bne.n	8001fb2 <HAL_ADC_Start+0x5e>
 8001fa6:	4b41      	ldr	r3, [pc, #260]	@ (80020ac <HAL_ADC_Start+0x158>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d026      	beq.n	800201a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fd4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fdc:	e01d      	b.n	800201a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2f      	ldr	r2, [pc, #188]	@ (80020ac <HAL_ADC_Start+0x158>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_ADC_Start+0xaa>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80020a8 <HAL_ADC_Start+0x154>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10d      	bne.n	800201a <HAL_ADC_Start+0xc6>
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <HAL_ADC_Start+0x158>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002012:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202a:	f023 0206 	bic.w	r2, r3, #6
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002032:	e002      	b.n	800203a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0202 	mvn.w	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002056:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800205a:	d113      	bne.n	8002084 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002060:	4a11      	ldr	r2, [pc, #68]	@ (80020a8 <HAL_ADC_Start+0x154>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d105      	bne.n	8002072 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_ADC_Start+0x158>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	e00c      	b.n	800209e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e003      	b.n	800209e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40012800 	.word	0x40012800
 80020ac:	40012400 	.word	0x40012400

080020b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80020c6:	f7ff fe3f 	bl	8001d48 <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0d3      	b.n	800229a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d131      	bne.n	8002164 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d12a      	bne.n	8002164 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800210e:	e021      	b.n	8002154 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d01d      	beq.n	8002154 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_ADC_PollForConversion+0x7e>
 800211e:	f7ff fe13 	bl	8001d48 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d212      	bcs.n	8002154 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0a2      	b.n	800229a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0d6      	beq.n	8002110 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002162:	e070      	b.n	8002246 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002164:	4b4f      	ldr	r3, [pc, #316]	@ (80022a4 <HAL_ADC_PollForConversion+0x1f4>)
 8002166:	681c      	ldr	r4, [r3, #0]
 8002168:	2002      	movs	r0, #2
 800216a:	f001 fe23 	bl	8003db4 <HAL_RCCEx_GetPeriphCLKFreq>
 800216e:	4603      	mov	r3, r0
 8002170:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	4b4b      	ldr	r3, [pc, #300]	@ (80022a8 <HAL_ADC_PollForConversion+0x1f8>)
 800217c:	400b      	ands	r3, r1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_ADC_PollForConversion+0x104>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	4b48      	ldr	r3, [pc, #288]	@ (80022ac <HAL_ADC_PollForConversion+0x1fc>)
 800218a:	400b      	ands	r3, r1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d111      	bne.n	80021b4 <HAL_ADC_PollForConversion+0x104>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	4b46      	ldr	r3, [pc, #280]	@ (80022b0 <HAL_ADC_PollForConversion+0x200>)
 8002198:	400b      	ands	r3, r1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_ADC_PollForConversion+0x100>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68d9      	ldr	r1, [r3, #12]
 80021a4:	4b43      	ldr	r3, [pc, #268]	@ (80022b4 <HAL_ADC_PollForConversion+0x204>)
 80021a6:	400b      	ands	r3, r1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_PollForConversion+0x100>
 80021ac:	2314      	movs	r3, #20
 80021ae:	e020      	b.n	80021f2 <HAL_ADC_PollForConversion+0x142>
 80021b0:	2329      	movs	r3, #41	@ 0x29
 80021b2:	e01e      	b.n	80021f2 <HAL_ADC_PollForConversion+0x142>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6919      	ldr	r1, [r3, #16]
 80021ba:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <HAL_ADC_PollForConversion+0x200>)
 80021bc:	400b      	ands	r3, r1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_ADC_PollForConversion+0x120>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_ADC_PollForConversion+0x204>)
 80021ca:	400b      	ands	r3, r1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <HAL_ADC_PollForConversion+0x13c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6919      	ldr	r1, [r3, #16]
 80021d6:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <HAL_ADC_PollForConversion+0x208>)
 80021d8:	400b      	ands	r3, r1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d108      	bne.n	80021f0 <HAL_ADC_PollForConversion+0x140>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68d9      	ldr	r1, [r3, #12]
 80021e4:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <HAL_ADC_PollForConversion+0x208>)
 80021e6:	400b      	ands	r3, r1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_PollForConversion+0x140>
 80021ec:	2354      	movs	r3, #84	@ 0x54
 80021ee:	e000      	b.n	80021f2 <HAL_ADC_PollForConversion+0x142>
 80021f0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021f8:	e021      	b.n	800223e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d01a      	beq.n	8002238 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_ADC_PollForConversion+0x168>
 8002208:	f7ff fd9e 	bl	8001d48 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d20f      	bcs.n	8002238 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d90b      	bls.n	8002238 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e030      	b.n	800229a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	429a      	cmp	r2, r3
 8002244:	d8d9      	bhi.n	80021fa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f06f 0212 	mvn.w	r2, #18
 800224e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002266:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800226a:	d115      	bne.n	8002298 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002270:	2b00      	cmp	r3, #0
 8002272:	d111      	bne.n	8002298 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000000 	.word	0x20000000
 80022a8:	24924924 	.word	0x24924924
 80022ac:	00924924 	.word	0x00924924
 80022b0:	12492492 	.word	0x12492492
 80022b4:	00492492 	.word	0x00492492
 80022b8:	00249249 	.word	0x00249249

080022bc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Start_IT+0x1a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e0a0      	b.n	8002418 <HAL_ADC_Start_IT+0x15c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa78 	bl	80027d4 <ADC_Enable>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 808f 	bne.w	800240e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a45      	ldr	r2, [pc, #276]	@ (8002420 <HAL_ADC_Start_IT+0x164>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d105      	bne.n	800231a <HAL_ADC_Start_IT+0x5e>
 800230e:	4b45      	ldr	r3, [pc, #276]	@ (8002424 <HAL_ADC_Start_IT+0x168>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d115      	bne.n	8002346 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d026      	beq.n	8002382 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800233c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002344:	e01d      	b.n	8002382 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a33      	ldr	r2, [pc, #204]	@ (8002424 <HAL_ADC_Start_IT+0x168>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_ADC_Start_IT+0xaa>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2f      	ldr	r2, [pc, #188]	@ (8002420 <HAL_ADC_Start_IT+0x164>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10d      	bne.n	8002382 <HAL_ADC_Start_IT+0xc6>
 8002366:	4b2f      	ldr	r3, [pc, #188]	@ (8002424 <HAL_ADC_Start_IT+0x168>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800237a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002392:	f023 0206 	bic.w	r2, r3, #6
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	62da      	str	r2, [r3, #44]	@ 0x2c
 800239a:	e002      	b.n	80023a2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f06f 0202 	mvn.w	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0220 	orr.w	r2, r2, #32
 80023c2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023d2:	d113      	bne.n	80023fc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023d8:	4a11      	ldr	r2, [pc, #68]	@ (8002420 <HAL_ADC_Start_IT+0x164>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d105      	bne.n	80023ea <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_ADC_Start_IT+0x168>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	e00c      	b.n	8002416 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e003      	b.n	8002416 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40012800 	.word	0x40012800
 8002424:	40012400 	.word	0x40012400

08002428 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d03e      	beq.n	80024e0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d039      	beq.n	80024e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800248e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002492:	d11d      	bne.n	80024d0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002498:	2b00      	cmp	r3, #0
 800249a:	d119      	bne.n	80024d0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0220 	bic.w	r2, r2, #32
 80024aa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f874 	bl	80025be <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0212 	mvn.w	r2, #18
 80024de:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d04d      	beq.n	8002586 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d048      	beq.n	8002586 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002504:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002516:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800251a:	d012      	beq.n	8002542 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002526:	2b00      	cmp	r3, #0
 8002528:	d125      	bne.n	8002576 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002534:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002538:	d11d      	bne.n	8002576 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800253e:	2b00      	cmp	r3, #0
 8002540:	d119      	bne.n	8002576 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002550:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa76 	bl	8002a68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 020c 	mvn.w	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d012      	beq.n	80025b6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00d      	beq.n	80025b6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f812 	bl	80025d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0201 	mvn.w	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x20>
 8002600:	2302      	movs	r3, #2
 8002602:	e0dc      	b.n	80027be <HAL_ADC_ConfigChannel+0x1da>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b06      	cmp	r3, #6
 8002612:	d81c      	bhi.n	800264e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	3b05      	subs	r3, #5
 8002626:	221f      	movs	r2, #31
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	4019      	ands	r1, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	3b05      	subs	r3, #5
 8002640:	fa00 f203 	lsl.w	r2, r0, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	635a      	str	r2, [r3, #52]	@ 0x34
 800264c:	e03c      	b.n	80026c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d81c      	bhi.n	8002690 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b23      	subs	r3, #35	@ 0x23
 8002668:	221f      	movs	r2, #31
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	4019      	ands	r1, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	3b23      	subs	r3, #35	@ 0x23
 8002682:	fa00 f203 	lsl.w	r2, r0, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
 800268e:	e01b      	b.n	80026c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	3b41      	subs	r3, #65	@ 0x41
 80026a2:	221f      	movs	r2, #31
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	4019      	ands	r1, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	3b41      	subs	r3, #65	@ 0x41
 80026bc:	fa00 f203 	lsl.w	r2, r0, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d91c      	bls.n	800270a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	3b1e      	subs	r3, #30
 80026e2:	2207      	movs	r2, #7
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4019      	ands	r1, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6898      	ldr	r0, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	3b1e      	subs	r3, #30
 80026fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	e019      	b.n	800273e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6919      	ldr	r1, [r3, #16]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	2207      	movs	r2, #7
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	4019      	ands	r1, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6898      	ldr	r0, [r3, #8]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	fa00 f203 	lsl.w	r2, r0, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b10      	cmp	r3, #16
 8002744:	d003      	beq.n	800274e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800274a:	2b11      	cmp	r3, #17
 800274c:	d132      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d125      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d126      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002774:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b10      	cmp	r3, #16
 800277c:	d11a      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800277e:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a13      	ldr	r2, [pc, #76]	@ (80027d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	0c9a      	lsrs	r2, r3, #18
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002794:	e002      	b.n	800279c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	3b01      	subs	r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f9      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x1b2>
 80027a2:	e007      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40012400 	.word	0x40012400
 80027cc:	20000000 	.word	0x20000000
 80027d0:	431bde83 	.word	0x431bde83

080027d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d040      	beq.n	8002874 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002802:	4b1f      	ldr	r3, [pc, #124]	@ (8002880 <ADC_Enable+0xac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <ADC_Enable+0xb0>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002810:	e002      	b.n	8002818 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3b01      	subs	r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f9      	bne.n	8002812 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800281e:	f7ff fa93 	bl	8001d48 <HAL_GetTick>
 8002822:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002824:	e01f      	b.n	8002866 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002826:	f7ff fa8f 	bl	8001d48 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d918      	bls.n	8002866 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d011      	beq.n	8002866 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002846:	f043 0210 	orr.w	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e007      	b.n	8002876 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d1d8      	bne.n	8002826 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000000 	.word	0x20000000
 8002884:	431bde83 	.word	0x431bde83

08002888 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d12e      	bne.n	8002900 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028b2:	f7ff fa49 	bl	8001d48 <HAL_GetTick>
 80028b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028b8:	e01b      	b.n	80028f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ba:	f7ff fa45 	bl	8001d48 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d914      	bls.n	80028f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10d      	bne.n	80028f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e007      	b.n	8002902 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d0dc      	beq.n	80028ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_ADCEx_Calibration_Start+0x1e>
 8002926:	2302      	movs	r3, #2
 8002928:	e097      	b.n	8002a5a <HAL_ADCEx_Calibration_Start+0x14e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa8 	bl	8002888 <ADC_ConversionStop_Disable>
 8002938:	4603      	mov	r3, r0
 800293a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff49 	bl	80027d4 <ADC_Enable>
 8002942:	4603      	mov	r3, r0
 8002944:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 8081 	bne.w	8002a50 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002956:	f023 0302 	bic.w	r3, r3, #2
 800295a:	f043 0202 	orr.w	r2, r3, #2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002962:	4b40      	ldr	r3, [pc, #256]	@ (8002a64 <HAL_ADCEx_Calibration_Start+0x158>)
 8002964:	681c      	ldr	r4, [r3, #0]
 8002966:	2002      	movs	r0, #2
 8002968:	f001 fa24 	bl	8003db4 <HAL_RCCEx_GetPeriphCLKFreq>
 800296c:	4603      	mov	r3, r0
 800296e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002972:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002974:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002976:	e002      	b.n	800297e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3b01      	subs	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f9      	bne.n	8002978 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0208 	orr.w	r2, r2, #8
 8002992:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002994:	f7ff f9d8 	bl	8001d48 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800299a:	e01b      	b.n	80029d4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800299c:	f7ff f9d4 	bl	8001d48 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b0a      	cmp	r3, #10
 80029a8:	d914      	bls.n	80029d4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f023 0312 	bic.w	r3, r3, #18
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e042      	b.n	8002a5a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1dc      	bne.n	800299c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0204 	orr.w	r2, r2, #4
 80029f0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80029f2:	f7ff f9a9 	bl	8001d48 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80029f8:	e01b      	b.n	8002a32 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80029fa:	f7ff f9a5 	bl	8001d48 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b0a      	cmp	r3, #10
 8002a06:	d914      	bls.n	8002a32 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	f023 0312 	bic.w	r3, r3, #18
 8002a1e:	f043 0210 	orr.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e013      	b.n	8002a5a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1dc      	bne.n	80029fa <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	f023 0303 	bic.w	r3, r3, #3
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000

08002a68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	@ (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4906      	ldr	r1, [pc, #24]	@ (8002b14 <__NVIC_EnableIRQ+0x34>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100

08002b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	db0a      	blt.n	8002b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	490c      	ldr	r1, [pc, #48]	@ (8002b64 <__NVIC_SetPriority+0x4c>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b40:	e00a      	b.n	8002b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4908      	ldr	r1, [pc, #32]	@ (8002b68 <__NVIC_SetPriority+0x50>)
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	0112      	lsls	r2, r2, #4
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	440b      	add	r3, r1
 8002b56:	761a      	strb	r2, [r3, #24]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000e100 	.word	0xe000e100
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	@ 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	bf28      	it	cs
 8002b8a:	2304      	movcs	r3, #4
 8002b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d902      	bls.n	8002b9c <NVIC_EncodePriority+0x30>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3b03      	subs	r3, #3
 8002b9a:	e000      	b.n	8002b9e <NVIC_EncodePriority+0x32>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	401a      	ands	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	4313      	orrs	r3, r2
         );
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3724      	adds	r7, #36	@ 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f7ff ff90 	bl	8002b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff2d 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3c:	f7ff ff42 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff90 	bl	8002b6c <NVIC_EncodePriority>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff5f 	bl	8002b18 <__NVIC_SetPriority>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff35 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ffa2 	bl	8002bd0 <SysTick_Config>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e043      	b.n	8002d36 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <HAL_DMA_Init+0xa8>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a22      	ldr	r2, [pc, #136]	@ (8002d44 <HAL_DMA_Init+0xac>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	009a      	lsls	r2, r3, #2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_DMA_Init+0xb0>)
 8002cca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ce2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ce6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	bffdfff8 	.word	0xbffdfff8
 8002d44:	cccccccd 	.word	0xcccccccd
 8002d48:	40020000 	.word	0x40020000

08002d4c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d008      	beq.n	8002d76 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2204      	movs	r2, #4
 8002d68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e020      	b.n	8002db8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 020e 	bic.w	r2, r2, #14
 8002d84:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d005      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2204      	movs	r2, #4
 8002de0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	e051      	b.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 020e 	bic.w	r2, r2, #14
 8002df6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a22      	ldr	r2, [pc, #136]	@ (8002e98 <HAL_DMA_Abort_IT+0xd4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d029      	beq.n	8002e66 <HAL_DMA_Abort_IT+0xa2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a21      	ldr	r2, [pc, #132]	@ (8002e9c <HAL_DMA_Abort_IT+0xd8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x9e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <HAL_DMA_Abort_IT+0xdc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01a      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x98>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea4 <HAL_DMA_Abort_IT+0xe0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d012      	beq.n	8002e56 <HAL_DMA_Abort_IT+0x92>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <HAL_DMA_Abort_IT+0xe4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00a      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x8c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002eac <HAL_DMA_Abort_IT+0xe8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d102      	bne.n	8002e4a <HAL_DMA_Abort_IT+0x86>
 8002e44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e48:	e00e      	b.n	8002e68 <HAL_DMA_Abort_IT+0xa4>
 8002e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e4e:	e00b      	b.n	8002e68 <HAL_DMA_Abort_IT+0xa4>
 8002e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e54:	e008      	b.n	8002e68 <HAL_DMA_Abort_IT+0xa4>
 8002e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e5a:	e005      	b.n	8002e68 <HAL_DMA_Abort_IT+0xa4>
 8002e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e60:	e002      	b.n	8002e68 <HAL_DMA_Abort_IT+0xa4>
 8002e62:	2310      	movs	r3, #16
 8002e64:	e000      	b.n	8002e68 <HAL_DMA_Abort_IT+0xa4>
 8002e66:	2301      	movs	r3, #1
 8002e68:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <HAL_DMA_Abort_IT+0xec>)
 8002e6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
    } 
  }
  return status;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40020008 	.word	0x40020008
 8002e9c:	4002001c 	.word	0x4002001c
 8002ea0:	40020030 	.word	0x40020030
 8002ea4:	40020044 	.word	0x40020044
 8002ea8:	40020058 	.word	0x40020058
 8002eac:	4002006c 	.word	0x4002006c
 8002eb0:	40020000 	.word	0x40020000

08002eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d04f      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xc8>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04a      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a66      	ldr	r2, [pc, #408]	@ (80030a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d029      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xae>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a65      	ldr	r2, [pc, #404]	@ (80030a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xaa>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a63      	ldr	r2, [pc, #396]	@ (80030ac <HAL_DMA_IRQHandler+0x1f8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01a      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xa4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a62      	ldr	r2, [pc, #392]	@ (80030b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d012      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x9e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a60      	ldr	r2, [pc, #384]	@ (80030b4 <HAL_DMA_IRQHandler+0x200>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00a      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x98>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80030b8 <HAL_DMA_IRQHandler+0x204>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d102      	bne.n	8002f46 <HAL_DMA_IRQHandler+0x92>
 8002f40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f44:	e00e      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f4a:	e00b      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002f50:	e008      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f56:	e005      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f5c:	e002      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f5e:	2340      	movs	r3, #64	@ 0x40
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f62:	2304      	movs	r3, #4
 8002f64:	4a55      	ldr	r2, [pc, #340]	@ (80030bc <HAL_DMA_IRQHandler+0x208>)
 8002f66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8094 	beq.w	800309a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f7a:	e08e      	b.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	2202      	movs	r2, #2
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d056      	beq.n	800303a <HAL_DMA_IRQHandler+0x186>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d051      	beq.n	800303a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020a 	bic.w	r2, r2, #10
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a38      	ldr	r2, [pc, #224]	@ (80030a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d029      	beq.n	800301a <HAL_DMA_IRQHandler+0x166>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a37      	ldr	r2, [pc, #220]	@ (80030a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <HAL_DMA_IRQHandler+0x162>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a35      	ldr	r2, [pc, #212]	@ (80030ac <HAL_DMA_IRQHandler+0x1f8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01a      	beq.n	8003010 <HAL_DMA_IRQHandler+0x15c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a34      	ldr	r2, [pc, #208]	@ (80030b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d012      	beq.n	800300a <HAL_DMA_IRQHandler+0x156>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a32      	ldr	r2, [pc, #200]	@ (80030b4 <HAL_DMA_IRQHandler+0x200>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x150>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a31      	ldr	r2, [pc, #196]	@ (80030b8 <HAL_DMA_IRQHandler+0x204>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d102      	bne.n	8002ffe <HAL_DMA_IRQHandler+0x14a>
 8002ff8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ffc:	e00e      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003002:	e00b      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003004:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003008:	e008      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 800300a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800300e:	e005      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003014:	e002      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003016:	2320      	movs	r3, #32
 8003018:	e000      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 800301a:	2302      	movs	r3, #2
 800301c:	4a27      	ldr	r2, [pc, #156]	@ (80030bc <HAL_DMA_IRQHandler+0x208>)
 800301e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d034      	beq.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003038:	e02f      	b.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	2208      	movs	r2, #8
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d028      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 020e 	bic.w	r2, r2, #14
 8003062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
    }
  }
  return;
 800309a:	bf00      	nop
 800309c:	bf00      	nop
}
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40020008 	.word	0x40020008
 80030a8:	4002001c 	.word	0x4002001c
 80030ac:	40020030 	.word	0x40020030
 80030b0:	40020044 	.word	0x40020044
 80030b4:	40020058 	.word	0x40020058
 80030b8:	4002006c 	.word	0x4002006c
 80030bc:	40020000 	.word	0x40020000

080030c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b08b      	sub	sp, #44	@ 0x2c
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d2:	e169      	b.n	80033a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030d4:	2201      	movs	r2, #1
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8158 	bne.w	80033a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a9a      	ldr	r2, [pc, #616]	@ (8003360 <HAL_GPIO_Init+0x2a0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d05e      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 80030fc:	4a98      	ldr	r2, [pc, #608]	@ (8003360 <HAL_GPIO_Init+0x2a0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d875      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003102:	4a98      	ldr	r2, [pc, #608]	@ (8003364 <HAL_GPIO_Init+0x2a4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d058      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003108:	4a96      	ldr	r2, [pc, #600]	@ (8003364 <HAL_GPIO_Init+0x2a4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d86f      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800310e:	4a96      	ldr	r2, [pc, #600]	@ (8003368 <HAL_GPIO_Init+0x2a8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d052      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003114:	4a94      	ldr	r2, [pc, #592]	@ (8003368 <HAL_GPIO_Init+0x2a8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d869      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800311a:	4a94      	ldr	r2, [pc, #592]	@ (800336c <HAL_GPIO_Init+0x2ac>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d04c      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003120:	4a92      	ldr	r2, [pc, #584]	@ (800336c <HAL_GPIO_Init+0x2ac>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d863      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003126:	4a92      	ldr	r2, [pc, #584]	@ (8003370 <HAL_GPIO_Init+0x2b0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d046      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 800312c:	4a90      	ldr	r2, [pc, #576]	@ (8003370 <HAL_GPIO_Init+0x2b0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d85d      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003132:	2b12      	cmp	r3, #18
 8003134:	d82a      	bhi.n	800318c <HAL_GPIO_Init+0xcc>
 8003136:	2b12      	cmp	r3, #18
 8003138:	d859      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800313a:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <HAL_GPIO_Init+0x80>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	080031bb 	.word	0x080031bb
 8003144:	08003195 	.word	0x08003195
 8003148:	080031a7 	.word	0x080031a7
 800314c:	080031e9 	.word	0x080031e9
 8003150:	080031ef 	.word	0x080031ef
 8003154:	080031ef 	.word	0x080031ef
 8003158:	080031ef 	.word	0x080031ef
 800315c:	080031ef 	.word	0x080031ef
 8003160:	080031ef 	.word	0x080031ef
 8003164:	080031ef 	.word	0x080031ef
 8003168:	080031ef 	.word	0x080031ef
 800316c:	080031ef 	.word	0x080031ef
 8003170:	080031ef 	.word	0x080031ef
 8003174:	080031ef 	.word	0x080031ef
 8003178:	080031ef 	.word	0x080031ef
 800317c:	080031ef 	.word	0x080031ef
 8003180:	080031ef 	.word	0x080031ef
 8003184:	0800319d 	.word	0x0800319d
 8003188:	080031b1 	.word	0x080031b1
 800318c:	4a79      	ldr	r2, [pc, #484]	@ (8003374 <HAL_GPIO_Init+0x2b4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003192:	e02c      	b.n	80031ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	623b      	str	r3, [r7, #32]
          break;
 800319a:	e029      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	3304      	adds	r3, #4
 80031a2:	623b      	str	r3, [r7, #32]
          break;
 80031a4:	e024      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	3308      	adds	r3, #8
 80031ac:	623b      	str	r3, [r7, #32]
          break;
 80031ae:	e01f      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	330c      	adds	r3, #12
 80031b6:	623b      	str	r3, [r7, #32]
          break;
 80031b8:	e01a      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031c2:	2304      	movs	r3, #4
 80031c4:	623b      	str	r3, [r7, #32]
          break;
 80031c6:	e013      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d0:	2308      	movs	r3, #8
 80031d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	611a      	str	r2, [r3, #16]
          break;
 80031da:	e009      	b.n	80031f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031dc:	2308      	movs	r3, #8
 80031de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	615a      	str	r2, [r3, #20]
          break;
 80031e6:	e003      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
          break;
 80031ec:	e000      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          break;
 80031ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2bff      	cmp	r3, #255	@ 0xff
 80031f4:	d801      	bhi.n	80031fa <HAL_GPIO_Init+0x13a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	e001      	b.n	80031fe <HAL_GPIO_Init+0x13e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2bff      	cmp	r3, #255	@ 0xff
 8003204:	d802      	bhi.n	800320c <HAL_GPIO_Init+0x14c>
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	e002      	b.n	8003212 <HAL_GPIO_Init+0x152>
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	3b08      	subs	r3, #8
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	210f      	movs	r1, #15
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	401a      	ands	r2, r3
 8003224:	6a39      	ldr	r1, [r7, #32]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	431a      	orrs	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80b1 	beq.w	80033a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003240:	4b4d      	ldr	r3, [pc, #308]	@ (8003378 <HAL_GPIO_Init+0x2b8>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a4c      	ldr	r2, [pc, #304]	@ (8003378 <HAL_GPIO_Init+0x2b8>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6193      	str	r3, [r2, #24]
 800324c:	4b4a      	ldr	r3, [pc, #296]	@ (8003378 <HAL_GPIO_Init+0x2b8>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003258:	4a48      	ldr	r2, [pc, #288]	@ (800337c <HAL_GPIO_Init+0x2bc>)
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a40      	ldr	r2, [pc, #256]	@ (8003380 <HAL_GPIO_Init+0x2c0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_GPIO_Init+0x1ec>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3f      	ldr	r2, [pc, #252]	@ (8003384 <HAL_GPIO_Init+0x2c4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00d      	beq.n	80032a8 <HAL_GPIO_Init+0x1e8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3e      	ldr	r2, [pc, #248]	@ (8003388 <HAL_GPIO_Init+0x2c8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <HAL_GPIO_Init+0x1e4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3d      	ldr	r2, [pc, #244]	@ (800338c <HAL_GPIO_Init+0x2cc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_GPIO_Init+0x1e0>
 800329c:	2303      	movs	r3, #3
 800329e:	e006      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a0:	2304      	movs	r3, #4
 80032a2:	e004      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e002      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032ac:	2300      	movs	r3, #0
 80032ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b0:	f002 0203 	and.w	r2, r2, #3
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	4093      	lsls	r3, r2
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032be:	492f      	ldr	r1, [pc, #188]	@ (800337c <HAL_GPIO_Init+0x2bc>)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d006      	beq.n	80032e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	492c      	ldr	r1, [pc, #176]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4928      	ldr	r1, [pc, #160]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003300:	4b23      	ldr	r3, [pc, #140]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	4922      	ldr	r1, [pc, #136]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	60cb      	str	r3, [r1, #12]
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800330e:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	43db      	mvns	r3, r3
 8003316:	491e      	ldr	r1, [pc, #120]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003318:	4013      	ands	r3, r2
 800331a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4918      	ldr	r1, [pc, #96]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003336:	4b16      	ldr	r3, [pc, #88]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	43db      	mvns	r3, r3
 800333e:	4914      	ldr	r1, [pc, #80]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003340:	4013      	ands	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d021      	beq.n	8003394 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003350:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	490e      	ldr	r1, [pc, #56]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e021      	b.n	80033a2 <HAL_GPIO_Init+0x2e2>
 800335e:	bf00      	nop
 8003360:	10320000 	.word	0x10320000
 8003364:	10310000 	.word	0x10310000
 8003368:	10220000 	.word	0x10220000
 800336c:	10210000 	.word	0x10210000
 8003370:	10120000 	.word	0x10120000
 8003374:	10110000 	.word	0x10110000
 8003378:	40021000 	.word	0x40021000
 800337c:	40010000 	.word	0x40010000
 8003380:	40010800 	.word	0x40010800
 8003384:	40010c00 	.word	0x40010c00
 8003388:	40011000 	.word	0x40011000
 800338c:	40011400 	.word	0x40011400
 8003390:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_GPIO_Init+0x304>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	43db      	mvns	r3, r3
 800339c:	4909      	ldr	r1, [pc, #36]	@ (80033c4 <HAL_GPIO_Init+0x304>)
 800339e:	4013      	ands	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	3301      	adds	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f47f ae8e 	bne.w	80030d4 <HAL_GPIO_Init+0x14>
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	372c      	adds	r7, #44	@ 0x2c
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40010400 	.word	0x40010400

080033c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e001      	b.n	80033ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	807b      	strh	r3, [r7, #2]
 8003402:	4613      	mov	r3, r2
 8003404:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003406:	787b      	ldrb	r3, [r7, #1]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340c:	887a      	ldrh	r2, [r7, #2]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003412:	e003      	b.n	800341c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	041a      	lsls	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	611a      	str	r2, [r3, #16]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
	...

08003428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e272      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8087 	beq.w	8003556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003448:	4b92      	ldr	r3, [pc, #584]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b04      	cmp	r3, #4
 8003452:	d00c      	beq.n	800346e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003454:	4b8f      	ldr	r3, [pc, #572]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d112      	bne.n	8003486 <HAL_RCC_OscConfig+0x5e>
 8003460:	4b8c      	ldr	r3, [pc, #560]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346c:	d10b      	bne.n	8003486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346e:	4b89      	ldr	r3, [pc, #548]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d06c      	beq.n	8003554 <HAL_RCC_OscConfig+0x12c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d168      	bne.n	8003554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e24c      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x76>
 8003490:	4b80      	ldr	r3, [pc, #512]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a7f      	ldr	r2, [pc, #508]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e02e      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x98>
 80034a6:	4b7b      	ldr	r3, [pc, #492]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a7a      	ldr	r2, [pc, #488]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b78      	ldr	r3, [pc, #480]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a77      	ldr	r2, [pc, #476]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e01d      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0xbc>
 80034ca:	4b72      	ldr	r3, [pc, #456]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a71      	ldr	r2, [pc, #452]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a6e      	ldr	r2, [pc, #440]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 80034e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6a      	ldr	r2, [pc, #424]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b68      	ldr	r3, [pc, #416]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a67      	ldr	r2, [pc, #412]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fc20 	bl	8001d48 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fc1c 	bl	8001d48 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	@ 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e200      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	4b5d      	ldr	r3, [pc, #372]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0xe4>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe fc0c 	bl	8001d48 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe fc08 	bl	8001d48 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	@ 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1ec      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	4b53      	ldr	r3, [pc, #332]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x10c>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d063      	beq.n	800362a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003562:	4b4c      	ldr	r3, [pc, #304]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800356e:	4b49      	ldr	r3, [pc, #292]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b08      	cmp	r3, #8
 8003578:	d11c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x18c>
 800357a:	4b46      	ldr	r3, [pc, #280]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d116      	bne.n	80035b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_RCC_OscConfig+0x176>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e1c0      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b3d      	ldr	r3, [pc, #244]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4939      	ldr	r1, [pc, #228]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	e03a      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035bc:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <HAL_RCC_OscConfig+0x270>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe fbc1 	bl	8001d48 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fe fbbd 	bl	8001d48 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1a1      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4927      	ldr	r1, [pc, #156]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
 80035fc:	e015      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fe:	4b26      	ldr	r3, [pc, #152]	@ (8003698 <HAL_RCC_OscConfig+0x270>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fba0 	bl	8001d48 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360c:	f7fe fb9c 	bl	8001d48 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e180      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d03a      	beq.n	80036ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d019      	beq.n	8003672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363e:	4b17      	ldr	r3, [pc, #92]	@ (800369c <HAL_RCC_OscConfig+0x274>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003644:	f7fe fb80 	bl	8001d48 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364c:	f7fe fb7c 	bl	8001d48 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e160      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800366a:	2001      	movs	r0, #1
 800366c:	f000 face 	bl	8003c0c <RCC_Delay>
 8003670:	e01c      	b.n	80036ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003672:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <HAL_RCC_OscConfig+0x274>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003678:	f7fe fb66 	bl	8001d48 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367e:	e00f      	b.n	80036a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003680:	f7fe fb62 	bl	8001d48 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d908      	bls.n	80036a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e146      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	42420000 	.word	0x42420000
 800369c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	4b92      	ldr	r3, [pc, #584]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e9      	bne.n	8003680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a6 	beq.w	8003806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b8b      	ldr	r3, [pc, #556]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b88      	ldr	r3, [pc, #544]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4a87      	ldr	r2, [pc, #540]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	61d3      	str	r3, [r2, #28]
 80036d6:	4b85      	ldr	r3, [pc, #532]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b82      	ldr	r3, [pc, #520]	@ (80038f0 <HAL_RCC_OscConfig+0x4c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f2:	4b7f      	ldr	r3, [pc, #508]	@ (80038f0 <HAL_RCC_OscConfig+0x4c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7e      	ldr	r2, [pc, #504]	@ (80038f0 <HAL_RCC_OscConfig+0x4c8>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fe fb23 	bl	8001d48 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fe fb1f 	bl	8001d48 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b64      	cmp	r3, #100	@ 0x64
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e103      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b75      	ldr	r3, [pc, #468]	@ (80038f0 <HAL_RCC_OscConfig+0x4c8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x312>
 800372c:	4b6f      	ldr	r3, [pc, #444]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4a6e      	ldr	r2, [pc, #440]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6213      	str	r3, [r2, #32]
 8003738:	e02d      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x334>
 8003742:	4b6a      	ldr	r3, [pc, #424]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4a69      	ldr	r2, [pc, #420]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6213      	str	r3, [r2, #32]
 800374e:	4b67      	ldr	r3, [pc, #412]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4a66      	ldr	r2, [pc, #408]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	6213      	str	r3, [r2, #32]
 800375a:	e01c      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x356>
 8003764:	4b61      	ldr	r3, [pc, #388]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a60      	ldr	r2, [pc, #384]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6213      	str	r3, [r2, #32]
 8003770:	4b5e      	ldr	r3, [pc, #376]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4a5d      	ldr	r2, [pc, #372]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6213      	str	r3, [r2, #32]
 800377c:	e00b      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800377e:	4b5b      	ldr	r3, [pc, #364]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4a5a      	ldr	r2, [pc, #360]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6213      	str	r3, [r2, #32]
 800378a:	4b58      	ldr	r3, [pc, #352]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4a57      	ldr	r2, [pc, #348]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d015      	beq.n	80037ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379e:	f7fe fad3 	bl	8001d48 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fe facf 	bl	8001d48 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0b1      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b4b      	ldr	r3, [pc, #300]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCC_OscConfig+0x37e>
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ca:	f7fe fabd 	bl	8001d48 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fe fab9 	bl	8001d48 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e09b      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e8:	4b40      	ldr	r3, [pc, #256]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ee      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b3c      	ldr	r3, [pc, #240]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	4a3b      	ldr	r2, [pc, #236]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003804:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8087 	beq.w	800391e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003810:	4b36      	ldr	r3, [pc, #216]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d061      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d146      	bne.n	80038b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b33      	ldr	r3, [pc, #204]	@ (80038f4 <HAL_RCC_OscConfig+0x4cc>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe fa8d 	bl	8001d48 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003832:	f7fe fa89 	bl	8001d48 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e06d      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003844:	4b29      	ldr	r3, [pc, #164]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f0      	bne.n	8003832 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003858:	d108      	bne.n	800386c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800385a:	4b24      	ldr	r3, [pc, #144]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	4921      	ldr	r1, [pc, #132]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800386c:	4b1f      	ldr	r3, [pc, #124]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a19      	ldr	r1, [r3, #32]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	430b      	orrs	r3, r1
 800387e:	491b      	ldr	r1, [pc, #108]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003884:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <HAL_RCC_OscConfig+0x4cc>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fe fa5d 	bl	8001d48 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fe fa59 	bl	8001d48 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e03d      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a4:	4b11      	ldr	r3, [pc, #68]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x46a>
 80038b0:	e035      	b.n	800391e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <HAL_RCC_OscConfig+0x4cc>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fa46 	bl	8001d48 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe fa42 	bl	8001d48 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e026      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x498>
 80038de:	e01e      	b.n	800391e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e019      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40007000 	.word	0x40007000
 80038f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_RCC_OscConfig+0x500>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	429a      	cmp	r2, r3
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0d0      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b6a      	ldr	r3, [pc, #424]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d910      	bls.n	8003970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b67      	ldr	r3, [pc, #412]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	4965      	ldr	r1, [pc, #404]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b63      	ldr	r3, [pc, #396]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0b8      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003988:	4b59      	ldr	r3, [pc, #356]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a58      	ldr	r2, [pc, #352]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003992:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a0:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a52      	ldr	r2, [pc, #328]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	494d      	ldr	r1, [pc, #308]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d040      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b47      	ldr	r3, [pc, #284]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d115      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e07f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ea:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e073      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fa:	4b3d      	ldr	r3, [pc, #244]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e06b      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4936      	ldr	r1, [pc, #216]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a1c:	f7fe f994 	bl	8001d48 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fe f990 	bl	8001d48 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e053      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 020c 	and.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1eb      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b27      	ldr	r3, [pc, #156]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d210      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b24      	ldr	r3, [pc, #144]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 0207 	bic.w	r2, r3, #7
 8003a62:	4922      	ldr	r1, [pc, #136]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e032      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4916      	ldr	r1, [pc, #88]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aa6:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	490e      	ldr	r1, [pc, #56]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aba:	f000 f821 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490a      	ldr	r1, [pc, #40]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a09      	ldr	r2, [pc, #36]	@ (8003af8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ad6:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_RCC_ClockConfig+0x1d0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe f8f2 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08008348 	.word	0x08008348
 8003af8:	20000000 	.word	0x20000000
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d002      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x30>
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x36>
 8003b2e:	e027      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b32:	613b      	str	r3, [r7, #16]
      break;
 8003b34:	e027      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0c9b      	lsrs	r3, r3, #18
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	4a17      	ldr	r2, [pc, #92]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b40:	5cd3      	ldrb	r3, [r2, r3]
 8003b42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b4e:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0c5b      	lsrs	r3, r3, #17
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	4a11      	ldr	r2, [pc, #68]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b62:	fb03 f202 	mul.w	r2, r3, r2
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e004      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a0c      	ldr	r2, [pc, #48]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	613b      	str	r3, [r7, #16]
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b82:	613b      	str	r3, [r7, #16]
      break;
 8003b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b86:	693b      	ldr	r3, [r7, #16]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	007a1200 	.word	0x007a1200
 8003b9c:	08008360 	.word	0x08008360
 8003ba0:	08008370 	.word	0x08008370
 8003ba4:	003d0900 	.word	0x003d0900

08003ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bac:	4b02      	ldr	r3, [pc, #8]	@ (8003bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	20000000 	.word	0x20000000

08003bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc0:	f7ff fff2 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4903      	ldr	r1, [pc, #12]	@ (8003be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	08008358 	.word	0x08008358

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be8:	f7ff ffde 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0adb      	lsrs	r3, r3, #11
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4903      	ldr	r1, [pc, #12]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08008358 	.word	0x08008358

08003c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <RCC_Delay+0x34>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	@ (8003c44 <RCC_Delay+0x38>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0a5b      	lsrs	r3, r3, #9
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c28:	bf00      	nop
  }
  while (Delay --);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f9      	bne.n	8003c28 <RCC_Delay+0x1c>
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	20000000 	.word	0x20000000
 8003c44:	10624dd3 	.word	0x10624dd3

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d07d      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c68:	4b4f      	ldr	r3, [pc, #316]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c74:	4b4c      	ldr	r3, [pc, #304]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	4a4b      	ldr	r2, [pc, #300]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	61d3      	str	r3, [r2, #28]
 8003c80:	4b49      	ldr	r3, [pc, #292]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4b46      	ldr	r3, [pc, #280]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d118      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9c:	4b43      	ldr	r3, [pc, #268]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a42      	ldr	r2, [pc, #264]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca8:	f7fe f84e 	bl	8001d48 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	e008      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fe f84a 	bl	8001d48 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e06d      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cce:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d02e      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d027      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cec:	4b2e      	ldr	r3, [pc, #184]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d02:	4a29      	ldr	r2, [pc, #164]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d014      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fe f819 	bl	8001d48 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fe f815 	bl	8001d48 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e036      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ee      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4917      	ldr	r1, [pc, #92]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b14      	ldr	r3, [pc, #80]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4a13      	ldr	r2, [pc, #76]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	490b      	ldr	r1, [pc, #44]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4904      	ldr	r1, [pc, #16]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40007000 	.word	0x40007000
 8003db0:	42420440 	.word	0x42420440

08003db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	f200 808a 	bhi.w	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d045      	beq.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d075      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003dea:	e082      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003dec:	4b46      	ldr	r3, [pc, #280]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003df2:	4b45      	ldr	r3, [pc, #276]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07b      	beq.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	0c9b      	lsrs	r3, r3, #18
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	4a41      	ldr	r2, [pc, #260]	@ (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003e08:	5cd3      	ldrb	r3, [r2, r3]
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e16:	4b3c      	ldr	r3, [pc, #240]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	0c5b      	lsrs	r3, r3, #17
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	4a3b      	ldr	r2, [pc, #236]	@ (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e30:	4a38      	ldr	r2, [pc, #224]	@ (8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e004      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4a34      	ldr	r2, [pc, #208]	@ (8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e58:	d102      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	61bb      	str	r3, [r7, #24]
      break;
 8003e5e:	e04a      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4a2d      	ldr	r2, [pc, #180]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
      break;
 8003e6e:	e042      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003e70:	4b25      	ldr	r3, [pc, #148]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e80:	d108      	bne.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003e8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	e01f      	b.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e9e:	d109      	bne.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003eac:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ebe:	d11c      	bne.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d016      	beq.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003ecc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003ed0:	61bb      	str	r3, [r7, #24]
      break;
 8003ed2:	e012      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ed4:	e011      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ed6:	f7ff fe85 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	0b9b      	lsrs	r3, r3, #14
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	61bb      	str	r3, [r7, #24]
      break;
 8003ef0:	e004      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003efa:	bf00      	nop
    }
  }
  return (frequency);
 8003efc:	69bb      	ldr	r3, [r7, #24]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08008374 	.word	0x08008374
 8003f10:	08008384 	.word	0x08008384
 8003f14:	007a1200 	.word	0x007a1200
 8003f18:	003d0900 	.word	0x003d0900
 8003f1c:	aaaaaaab 	.word	0xaaaaaaab

08003f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e041      	b.n	8003fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd fc5e 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f000 fc32 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e041      	b.n	8004054 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f839 	bl	800405c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f000 fbe3 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
	...

08004070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_TIM_PWM_Start+0x24>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e022      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b04      	cmp	r3, #4
 8004098:	d109      	bne.n	80040ae <HAL_TIM_PWM_Start+0x3e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e015      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x58>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e008      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e05e      	b.n	80041a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0x82>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040f0:	e013      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start+0x92>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004100:	e00b      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xa2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004110:	e003      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fddc 	bl	8004ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <HAL_TIM_PWM_Start+0x138>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d107      	bne.n	8004142 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a18      	ldr	r2, [pc, #96]	@ (80041a8 <HAL_TIM_PWM_Start+0x138>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_TIM_PWM_Start+0xfa>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004154:	d009      	beq.n	800416a <HAL_TIM_PWM_Start+0xfa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a14      	ldr	r2, [pc, #80]	@ (80041ac <HAL_TIM_PWM_Start+0x13c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_TIM_PWM_Start+0xfa>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a12      	ldr	r2, [pc, #72]	@ (80041b0 <HAL_TIM_PWM_Start+0x140>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b06      	cmp	r3, #6
 800417a:	d010      	beq.n	800419e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	e007      	b.n	800419e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800

080041b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2200      	movs	r2, #0
 80041c4:	6839      	ldr	r1, [r7, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fd8a 	bl	8004ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a29      	ldr	r2, [pc, #164]	@ (8004278 <HAL_TIM_PWM_Stop+0xc4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d117      	bne.n	8004206 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a1a      	ldr	r2, [r3, #32]
 80041dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <HAL_TIM_PWM_Stop+0x52>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a1a      	ldr	r2, [r3, #32]
 80041ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d107      	bne.n	8004206 <HAL_TIM_PWM_Stop+0x52>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10f      	bne.n	8004236 <HAL_TIM_PWM_Stop+0x82>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d107      	bne.n	8004236 <HAL_TIM_PWM_Stop+0x82>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Stop+0x92>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004244:	e013      	b.n	800426e <HAL_TIM_PWM_Stop+0xba>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Stop+0xa2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004254:	e00b      	b.n	800426e <HAL_TIM_PWM_Stop+0xba>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Stop+0xb2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004264:	e003      	b.n	800426e <HAL_TIM_PWM_Stop+0xba>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40012c00 	.word	0x40012c00

0800427c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d020      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01b      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0202 	mvn.w	r2, #2
 80042b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa63 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa56 	bl	8004780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fa65 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d020      	beq.n	800432c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0204 	mvn.w	r2, #4
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa3d 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa30 	bl	8004780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fa3f 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d020      	beq.n	8004378 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01b      	beq.n	8004378 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0208 	mvn.w	r2, #8
 8004348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2204      	movs	r2, #4
 800434e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa17 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa0a 	bl	8004780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fa19 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d020      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0210 	mvn.w	r2, #16
 8004394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2208      	movs	r2, #8
 800439a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9f1 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9e4 	bl	8004780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f9f3 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0201 	mvn.w	r2, #1
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9c3 	bl	800476e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00c      	beq.n	800440c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fd46 	bl	8004e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9c3 	bl	80047b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0220 	mvn.w	r2, #32
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fd19 	bl	8004e86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004476:	2302      	movs	r3, #2
 8004478:	e0ae      	b.n	80045d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b0c      	cmp	r3, #12
 8004486:	f200 809f 	bhi.w	80045c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800448a:	a201      	add	r2, pc, #4	@ (adr r2, 8004490 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	080044c5 	.word	0x080044c5
 8004494:	080045c9 	.word	0x080045c9
 8004498:	080045c9 	.word	0x080045c9
 800449c:	080045c9 	.word	0x080045c9
 80044a0:	08004505 	.word	0x08004505
 80044a4:	080045c9 	.word	0x080045c9
 80044a8:	080045c9 	.word	0x080045c9
 80044ac:	080045c9 	.word	0x080045c9
 80044b0:	08004547 	.word	0x08004547
 80044b4:	080045c9 	.word	0x080045c9
 80044b8:	080045c9 	.word	0x080045c9
 80044bc:	080045c9 	.word	0x080045c9
 80044c0:	08004587 	.word	0x08004587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f9ea 	bl	80048a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0208 	orr.w	r2, r2, #8
 80044de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0204 	bic.w	r2, r2, #4
 80044ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6999      	ldr	r1, [r3, #24]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	619a      	str	r2, [r3, #24]
      break;
 8004502:	e064      	b.n	80045ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fa30 	bl	8004970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800451e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800452e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6999      	ldr	r1, [r3, #24]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	021a      	lsls	r2, r3, #8
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	619a      	str	r2, [r3, #24]
      break;
 8004544:	e043      	b.n	80045ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fa79 	bl	8004a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0208 	orr.w	r2, r2, #8
 8004560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0204 	bic.w	r2, r2, #4
 8004570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69d9      	ldr	r1, [r3, #28]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	61da      	str	r2, [r3, #28]
      break;
 8004584:	e023      	b.n	80045ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fac3 	bl	8004b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69d9      	ldr	r1, [r3, #28]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	021a      	lsls	r2, r3, #8
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	61da      	str	r2, [r3, #28]
      break;
 80045c6:	e002      	b.n	80045ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
      break;
 80045cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIM_ConfigClockSource+0x1c>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e0b4      	b.n	8004766 <HAL_TIM_ConfigClockSource+0x186>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800461a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004634:	d03e      	beq.n	80046b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800463a:	f200 8087 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x16c>
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004642:	f000 8086 	beq.w	8004752 <HAL_TIM_ConfigClockSource+0x172>
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464a:	d87f      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x16c>
 800464c:	2b70      	cmp	r3, #112	@ 0x70
 800464e:	d01a      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0xa6>
 8004650:	2b70      	cmp	r3, #112	@ 0x70
 8004652:	d87b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x16c>
 8004654:	2b60      	cmp	r3, #96	@ 0x60
 8004656:	d050      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x11a>
 8004658:	2b60      	cmp	r3, #96	@ 0x60
 800465a:	d877      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b50      	cmp	r3, #80	@ 0x50
 800465e:	d03c      	beq.n	80046da <HAL_TIM_ConfigClockSource+0xfa>
 8004660:	2b50      	cmp	r3, #80	@ 0x50
 8004662:	d873      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b40      	cmp	r3, #64	@ 0x40
 8004666:	d058      	beq.n	800471a <HAL_TIM_ConfigClockSource+0x13a>
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	d86f      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b30      	cmp	r3, #48	@ 0x30
 800466e:	d064      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x15a>
 8004670:	2b30      	cmp	r3, #48	@ 0x30
 8004672:	d86b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d060      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x15a>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d867      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x15a>
 8004680:	2b10      	cmp	r3, #16
 8004682:	d05a      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x15a>
 8004684:	e062      	b.n	800474c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004696:	f000 fb04 	bl	8004ca2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	609a      	str	r2, [r3, #8]
      break;
 80046b2:	e04f      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c4:	f000 faed 	bl	8004ca2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046d6:	609a      	str	r2, [r3, #8]
      break;
 80046d8:	e03c      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	461a      	mov	r2, r3
 80046e8:	f000 fa64 	bl	8004bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2150      	movs	r1, #80	@ 0x50
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fabb 	bl	8004c6e <TIM_ITRx_SetConfig>
      break;
 80046f8:	e02c      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004706:	461a      	mov	r2, r3
 8004708:	f000 fa82 	bl	8004c10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2160      	movs	r1, #96	@ 0x60
 8004712:	4618      	mov	r0, r3
 8004714:	f000 faab 	bl	8004c6e <TIM_ITRx_SetConfig>
      break;
 8004718:	e01c      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	461a      	mov	r2, r3
 8004728:	f000 fa44 	bl	8004bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2140      	movs	r1, #64	@ 0x40
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fa9b 	bl	8004c6e <TIM_ITRx_SetConfig>
      break;
 8004738:	e00c      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f000 fa92 	bl	8004c6e <TIM_ITRx_SetConfig>
      break;
 800474a:	e003      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
      break;
 8004750:	e000      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a2f      	ldr	r2, [pc, #188]	@ (8004898 <TIM_Base_SetConfig+0xd0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_Base_SetConfig+0x30>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e6:	d007      	beq.n	80047f8 <TIM_Base_SetConfig+0x30>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2c      	ldr	r2, [pc, #176]	@ (800489c <TIM_Base_SetConfig+0xd4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_Base_SetConfig+0x30>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a2b      	ldr	r2, [pc, #172]	@ (80048a0 <TIM_Base_SetConfig+0xd8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d108      	bne.n	800480a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <TIM_Base_SetConfig+0xd0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_Base_SetConfig+0x62>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004818:	d007      	beq.n	800482a <TIM_Base_SetConfig+0x62>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1f      	ldr	r2, [pc, #124]	@ (800489c <TIM_Base_SetConfig+0xd4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_Base_SetConfig+0x62>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1e      	ldr	r2, [pc, #120]	@ (80048a0 <TIM_Base_SetConfig+0xd8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d108      	bne.n	800483c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a0d      	ldr	r2, [pc, #52]	@ (8004898 <TIM_Base_SetConfig+0xd0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d103      	bne.n	8004870 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	611a      	str	r2, [r3, #16]
  }
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800

080048a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f023 0201 	bic.w	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 0302 	bic.w	r3, r3, #2
 80048ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <TIM_OC1_SetConfig+0xc8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10c      	bne.n	800491a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0308 	bic.w	r3, r3, #8
 8004906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a13      	ldr	r2, [pc, #76]	@ (800496c <TIM_OC1_SetConfig+0xc8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d111      	bne.n	8004946 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	621a      	str	r2, [r3, #32]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40012c00 	.word	0x40012c00

08004970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f023 0210 	bic.w	r2, r3, #16
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800499e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0320 	bic.w	r3, r3, #32
 80049ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004a40 <TIM_OC2_SetConfig+0xd0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10d      	bne.n	80049ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a14      	ldr	r2, [pc, #80]	@ (8004a40 <TIM_OC2_SetConfig+0xd0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d113      	bne.n	8004a1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40012c00 	.word	0x40012c00

08004a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b14 <TIM_OC3_SetConfig+0xd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d10d      	bne.n	8004abe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a14      	ldr	r2, [pc, #80]	@ (8004b14 <TIM_OC3_SetConfig+0xd0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d113      	bne.n	8004aee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	621a      	str	r2, [r3, #32]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40012c00 	.word	0x40012c00

08004b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	031b      	lsls	r3, r3, #12
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb0 <TIM_OC4_SetConfig+0x98>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d109      	bne.n	8004b8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	019b      	lsls	r3, r3, #6
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	40012c00 	.word	0x40012c00

08004bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f023 030a 	bic.w	r3, r3, #10
 8004bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f023 0210 	bic.w	r2, r3, #16
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	031b      	lsls	r3, r3, #12
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f043 0307 	orr.w	r3, r3, #7
 8004c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	609a      	str	r2, [r3, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	021a      	lsls	r2, r3, #8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1a      	ldr	r2, [r3, #32]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	401a      	ands	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e046      	b.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a16      	ldr	r2, [pc, #88]	@ (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8c:	d009      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a12      	ldr	r2, [pc, #72]	@ (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a10      	ldr	r2, [pc, #64]	@ (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10c      	bne.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800

08004de4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e03d      	b.n	8004e7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e042      	b.n	8004f42 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fc fd79 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2224      	movs	r2, #36	@ 0x24
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fd00 	bl	80058f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d121      	bne.n	8004fa8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_UART_Transmit_IT+0x26>
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e01a      	b.n	8004faa <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	88fa      	ldrh	r2, [r7, #6]
 8004f7e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	88fa      	ldrh	r2, [r7, #6]
 8004f84:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2221      	movs	r2, #33	@ 0x21
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fa2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d112      	bne.n	8004ff4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_UART_Receive_IT+0x26>
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e00b      	b.n	8004ff6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 faae 	bl	800554c <UART_Start_Receive_IT>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	e000      	b.n	8004ff6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b0ba      	sub	sp, #232	@ 0xe8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800503e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_UART_IRQHandler+0x66>
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fb8a 	bl	8005778 <UART_Receive_IT>
      return;
 8005064:	e25b      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80de 	beq.w	800522c <HAL_UART_IRQHandler+0x22c>
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005080:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80d1 	beq.w	800522c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xae>
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_UART_IRQHandler+0xd2>
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
 8005102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 81f2 	beq.w	8005514 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_UART_IRQHandler+0x14e>
 800513c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb15 	bl	8005778 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_UART_IRQHandler+0x17a>
 8005172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d04f      	beq.n	800521a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa1f 	bl	80055be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d041      	beq.n	8005212 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3314      	adds	r3, #20
 80051b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1d9      	bne.n	800518e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e6:	4a7e      	ldr	r2, [pc, #504]	@ (80053e0 <HAL_UART_IRQHandler+0x3e0>)
 80051e8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fde8 	bl	8002dc4 <HAL_DMA_Abort_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d016      	beq.n	8005228 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005208:	e00e      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f98a 	bl	8005524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e00a      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f986 	bl	8005524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	e006      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f982 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005226:	e175      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	bf00      	nop
    return;
 800522a:	e173      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	2b01      	cmp	r3, #1
 8005232:	f040 814f 	bne.w	80054d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8148 	beq.w	80054d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8141 	beq.w	80054d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80b6 	beq.w	80053e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8145 	beq.w	8005518 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005296:	429a      	cmp	r2, r3
 8005298:	f080 813e 	bcs.w	8005518 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	f000 8088 	beq.w	80053c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80052dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1d9      	bne.n	80052b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800530c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005320:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005324:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005328:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005332:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e1      	bne.n	80052fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3314      	adds	r3, #20
 800533e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800534a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800534e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800535c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800535e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005362:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800536a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e3      	bne.n	8005338 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800538e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005390:	f023 0310 	bic.w	r3, r3, #16
 8005394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e3      	bne.n	800537e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fd fcc6 	bl	8002d4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f8ad 	bl	8005536 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053dc:	e09c      	b.n	8005518 <HAL_UART_IRQHandler+0x518>
 80053de:	bf00      	nop
 80053e0:	08005683 	.word	0x08005683
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 808e 	beq.w	800551c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8089 	beq.w	800551c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800541a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005420:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800542e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005430:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005434:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800543c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e3      	bne.n	800540a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3314      	adds	r3, #20
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	623b      	str	r3, [r7, #32]
   return(result);
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3314      	adds	r3, #20
 8005462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005466:	633a      	str	r2, [r7, #48]	@ 0x30
 8005468:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800546c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e3      	bne.n	8005442 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	60fb      	str	r3, [r7, #12]
   return(result);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0310 	bic.w	r3, r3, #16
 800549e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	330c      	adds	r3, #12
 80054a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054ac:	61fa      	str	r2, [r7, #28]
 80054ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	69b9      	ldr	r1, [r7, #24]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e3      	bne.n	8005488 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f832 	bl	8005536 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054d2:	e023      	b.n	800551c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_UART_IRQHandler+0x4f4>
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8dc 	bl	80056aa <UART_Transmit_IT>
    return;
 80054f2:	e014      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00e      	beq.n	800551e <HAL_UART_IRQHandler+0x51e>
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f91b 	bl	8005748 <UART_EndTransmit_IT>
    return;
 8005512:	e004      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
    return;
 8005514:	bf00      	nop
 8005516:	e002      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
      return;
 8005518:	bf00      	nop
 800551a:	e000      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
      return;
 800551c:	bf00      	nop
  }
}
 800551e:	37e8      	adds	r7, #232	@ 0xe8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2222      	movs	r2, #34	@ 0x22
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005590:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0220 	orr.w	r2, r2, #32
 80055b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055be:	b480      	push	{r7}
 80055c0:	b095      	sub	sp, #84	@ 0x54
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80055e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e5      	bne.n	80055c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3314      	adds	r3, #20
 8005600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	61fb      	str	r3, [r7, #28]
   return(result);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800561a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800561c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e5      	bne.n	80055fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005632:	2b01      	cmp	r3, #1
 8005634:	d119      	bne.n	800566a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	330c      	adds	r3, #12
 800563c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	60bb      	str	r3, [r7, #8]
   return(result);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f023 0310 	bic.w	r3, r3, #16
 800564c:	647b      	str	r3, [r7, #68]	@ 0x44
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005656:	61ba      	str	r2, [r7, #24]
 8005658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6979      	ldr	r1, [r7, #20]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	613b      	str	r3, [r7, #16]
   return(result);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e5      	bne.n	8005636 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005678:	bf00      	nop
 800567a:	3754      	adds	r7, #84	@ 0x54
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr

08005682 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff ff41 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b21      	cmp	r3, #33	@ 0x21
 80056bc:	d13e      	bne.n	800573c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c6:	d114      	bne.n	80056f2 <UART_Transmit_IT+0x48>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]
 80056f0:	e008      	b.n	8005704 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6211      	str	r1, [r2, #32]
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005726:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005736:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800575e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fb fc27 	bl	8000fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08c      	sub	sp, #48	@ 0x30
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b22      	cmp	r3, #34	@ 0x22
 800578a:	f040 80ae 	bne.w	80058ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005796:	d117      	bne.n	80057c8 <UART_Receive_IT+0x50>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d113      	bne.n	80057c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	1c9a      	adds	r2, r3, #2
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80057c6:	e026      	b.n	8005816 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057da:	d007      	beq.n	80057ec <UART_Receive_IT+0x74>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <UART_Receive_IT+0x82>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e008      	b.n	800580c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005806:	b2da      	uxtb	r2, r3
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29b      	uxth	r3, r3
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4619      	mov	r1, r3
 8005824:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005826:	2b00      	cmp	r3, #0
 8005828:	d15d      	bne.n	80058e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0220 	bic.w	r2, r2, #32
 8005838:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005848:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695a      	ldr	r2, [r3, #20]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586c:	2b01      	cmp	r3, #1
 800586e:	d135      	bne.n	80058dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	613b      	str	r3, [r7, #16]
   return(result);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f023 0310 	bic.w	r3, r3, #16
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005896:	623a      	str	r2, [r7, #32]
 8005898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	69f9      	ldr	r1, [r7, #28]
 800589c:	6a3a      	ldr	r2, [r7, #32]
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e5      	bne.n	8005876 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d10a      	bne.n	80058ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fe2e 	bl	8005536 <HAL_UARTEx_RxEventCallback>
 80058da:	e002      	b.n	80058e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fb faeb 	bl	8000eb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e002      	b.n	80058ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e000      	b.n	80058ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
  }
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3730      	adds	r7, #48	@ 0x30
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800592e:	f023 030c 	bic.w	r3, r3, #12
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	430b      	orrs	r3, r1
 800593a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2c      	ldr	r2, [pc, #176]	@ (8005a08 <UART_SetConfig+0x114>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d103      	bne.n	8005964 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800595c:	f7fe f942 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	e002      	b.n	800596a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005964:	f7fe f92a 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 8005968:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009a      	lsls	r2, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005980:	4a22      	ldr	r2, [pc, #136]	@ (8005a0c <UART_SetConfig+0x118>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	0119      	lsls	r1, r3, #4
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009a      	lsls	r2, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <UART_SetConfig+0x118>)
 80059a2:	fba3 0302 	umull	r0, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2064      	movs	r0, #100	@ 0x64
 80059aa:	fb00 f303 	mul.w	r3, r0, r3
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	3332      	adds	r3, #50	@ 0x32
 80059b4:	4a15      	ldr	r2, [pc, #84]	@ (8005a0c <UART_SetConfig+0x118>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059c0:	4419      	add	r1, r3
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009a      	lsls	r2, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059d8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <UART_SetConfig+0x118>)
 80059da:	fba3 0302 	umull	r0, r3, r3, r2
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2064      	movs	r0, #100	@ 0x64
 80059e2:	fb00 f303 	mul.w	r3, r0, r3
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	3332      	adds	r3, #50	@ 0x32
 80059ec:	4a07      	ldr	r2, [pc, #28]	@ (8005a0c <UART_SetConfig+0x118>)
 80059ee:	fba2 2303 	umull	r2, r3, r2, r3
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	f003 020f 	and.w	r2, r3, #15
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	440a      	add	r2, r1
 80059fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40013800 	.word	0x40013800
 8005a0c:	51eb851f 	.word	0x51eb851f

08005a10 <__cvt>:
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a16:	461d      	mov	r5, r3
 8005a18:	bfbb      	ittet	lt
 8005a1a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005a1e:	461d      	movlt	r5, r3
 8005a20:	2300      	movge	r3, #0
 8005a22:	232d      	movlt	r3, #45	@ 0x2d
 8005a24:	b088      	sub	sp, #32
 8005a26:	4614      	mov	r4, r2
 8005a28:	bfb8      	it	lt
 8005a2a:	4614      	movlt	r4, r2
 8005a2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a2e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a30:	7013      	strb	r3, [r2, #0]
 8005a32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a34:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005a38:	f023 0820 	bic.w	r8, r3, #32
 8005a3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a40:	d005      	beq.n	8005a4e <__cvt+0x3e>
 8005a42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a46:	d100      	bne.n	8005a4a <__cvt+0x3a>
 8005a48:	3601      	adds	r6, #1
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e000      	b.n	8005a50 <__cvt+0x40>
 8005a4e:	2303      	movs	r3, #3
 8005a50:	aa07      	add	r2, sp, #28
 8005a52:	9204      	str	r2, [sp, #16]
 8005a54:	aa06      	add	r2, sp, #24
 8005a56:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a5a:	e9cd 3600 	strd	r3, r6, [sp]
 8005a5e:	4622      	mov	r2, r4
 8005a60:	462b      	mov	r3, r5
 8005a62:	f000 fe4d 	bl	8006700 <_dtoa_r>
 8005a66:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	d119      	bne.n	8005aa2 <__cvt+0x92>
 8005a6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a70:	07db      	lsls	r3, r3, #31
 8005a72:	d50e      	bpl.n	8005a92 <__cvt+0x82>
 8005a74:	eb00 0906 	add.w	r9, r0, r6
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	f7fa ff92 	bl	80009a8 <__aeabi_dcmpeq>
 8005a84:	b108      	cbz	r0, 8005a8a <__cvt+0x7a>
 8005a86:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a8a:	2230      	movs	r2, #48	@ 0x30
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	454b      	cmp	r3, r9
 8005a90:	d31e      	bcc.n	8005ad0 <__cvt+0xc0>
 8005a92:	4638      	mov	r0, r7
 8005a94:	9b07      	ldr	r3, [sp, #28]
 8005a96:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005a98:	1bdb      	subs	r3, r3, r7
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	b008      	add	sp, #32
 8005a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005aa6:	eb00 0906 	add.w	r9, r0, r6
 8005aaa:	d1e5      	bne.n	8005a78 <__cvt+0x68>
 8005aac:	7803      	ldrb	r3, [r0, #0]
 8005aae:	2b30      	cmp	r3, #48	@ 0x30
 8005ab0:	d10a      	bne.n	8005ac8 <__cvt+0xb8>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa ff75 	bl	80009a8 <__aeabi_dcmpeq>
 8005abe:	b918      	cbnz	r0, 8005ac8 <__cvt+0xb8>
 8005ac0:	f1c6 0601 	rsb	r6, r6, #1
 8005ac4:	f8ca 6000 	str.w	r6, [sl]
 8005ac8:	f8da 3000 	ldr.w	r3, [sl]
 8005acc:	4499      	add	r9, r3
 8005ace:	e7d3      	b.n	8005a78 <__cvt+0x68>
 8005ad0:	1c59      	adds	r1, r3, #1
 8005ad2:	9107      	str	r1, [sp, #28]
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	e7d9      	b.n	8005a8c <__cvt+0x7c>

08005ad8 <__exponent>:
 8005ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ada:	2900      	cmp	r1, #0
 8005adc:	bfb6      	itet	lt
 8005ade:	232d      	movlt	r3, #45	@ 0x2d
 8005ae0:	232b      	movge	r3, #43	@ 0x2b
 8005ae2:	4249      	neglt	r1, r1
 8005ae4:	2909      	cmp	r1, #9
 8005ae6:	7002      	strb	r2, [r0, #0]
 8005ae8:	7043      	strb	r3, [r0, #1]
 8005aea:	dd29      	ble.n	8005b40 <__exponent+0x68>
 8005aec:	f10d 0307 	add.w	r3, sp, #7
 8005af0:	461d      	mov	r5, r3
 8005af2:	270a      	movs	r7, #10
 8005af4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005af8:	461a      	mov	r2, r3
 8005afa:	fb07 1416 	mls	r4, r7, r6, r1
 8005afe:	3430      	adds	r4, #48	@ 0x30
 8005b00:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b04:	460c      	mov	r4, r1
 8005b06:	2c63      	cmp	r4, #99	@ 0x63
 8005b08:	4631      	mov	r1, r6
 8005b0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b0e:	dcf1      	bgt.n	8005af4 <__exponent+0x1c>
 8005b10:	3130      	adds	r1, #48	@ 0x30
 8005b12:	1e94      	subs	r4, r2, #2
 8005b14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b18:	4623      	mov	r3, r4
 8005b1a:	1c41      	adds	r1, r0, #1
 8005b1c:	42ab      	cmp	r3, r5
 8005b1e:	d30a      	bcc.n	8005b36 <__exponent+0x5e>
 8005b20:	f10d 0309 	add.w	r3, sp, #9
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	42ac      	cmp	r4, r5
 8005b28:	bf88      	it	hi
 8005b2a:	2300      	movhi	r3, #0
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	4403      	add	r3, r0
 8005b30:	1a18      	subs	r0, r3, r0
 8005b32:	b003      	add	sp, #12
 8005b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b3e:	e7ed      	b.n	8005b1c <__exponent+0x44>
 8005b40:	2330      	movs	r3, #48	@ 0x30
 8005b42:	3130      	adds	r1, #48	@ 0x30
 8005b44:	7083      	strb	r3, [r0, #2]
 8005b46:	70c1      	strb	r1, [r0, #3]
 8005b48:	1d03      	adds	r3, r0, #4
 8005b4a:	e7f1      	b.n	8005b30 <__exponent+0x58>

08005b4c <_printf_float>:
 8005b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	b091      	sub	sp, #68	@ 0x44
 8005b52:	460c      	mov	r4, r1
 8005b54:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005b58:	4616      	mov	r6, r2
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	f000 fcbf 	bl	80064e0 <_localeconv_r>
 8005b62:	6803      	ldr	r3, [r0, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	9308      	str	r3, [sp, #32]
 8005b68:	f7fa faf2 	bl	8000150 <strlen>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b70:	f8d8 3000 	ldr.w	r3, [r8]
 8005b74:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b76:	3307      	adds	r3, #7
 8005b78:	f023 0307 	bic.w	r3, r3, #7
 8005b7c:	f103 0208 	add.w	r2, r3, #8
 8005b80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b84:	f8d4 b000 	ldr.w	fp, [r4]
 8005b88:	f8c8 2000 	str.w	r2, [r8]
 8005b8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b96:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ba2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ba6:	4b9c      	ldr	r3, [pc, #624]	@ (8005e18 <_printf_float+0x2cc>)
 8005ba8:	f7fa ff30 	bl	8000a0c <__aeabi_dcmpun>
 8005bac:	bb70      	cbnz	r0, 8005c0c <_printf_float+0xc0>
 8005bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb6:	4b98      	ldr	r3, [pc, #608]	@ (8005e18 <_printf_float+0x2cc>)
 8005bb8:	f7fa ff0a 	bl	80009d0 <__aeabi_dcmple>
 8005bbc:	bb30      	cbnz	r0, 8005c0c <_printf_float+0xc0>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	f7fa fef9 	bl	80009bc <__aeabi_dcmplt>
 8005bca:	b110      	cbz	r0, 8005bd2 <_printf_float+0x86>
 8005bcc:	232d      	movs	r3, #45	@ 0x2d
 8005bce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bd2:	4a92      	ldr	r2, [pc, #584]	@ (8005e1c <_printf_float+0x2d0>)
 8005bd4:	4b92      	ldr	r3, [pc, #584]	@ (8005e20 <_printf_float+0x2d4>)
 8005bd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bda:	bf8c      	ite	hi
 8005bdc:	4690      	movhi	r8, r2
 8005bde:	4698      	movls	r8, r3
 8005be0:	2303      	movs	r3, #3
 8005be2:	f04f 0900 	mov.w	r9, #0
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	f02b 0304 	bic.w	r3, fp, #4
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	4633      	mov	r3, r6
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	9700      	str	r7, [sp, #0]
 8005bf6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005bf8:	f000 f9d4 	bl	8005fa4 <_printf_common>
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f040 8090 	bne.w	8005d22 <_printf_float+0x1d6>
 8005c02:	f04f 30ff 	mov.w	r0, #4294967295
 8005c06:	b011      	add	sp, #68	@ 0x44
 8005c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	464b      	mov	r3, r9
 8005c10:	4640      	mov	r0, r8
 8005c12:	4649      	mov	r1, r9
 8005c14:	f7fa fefa 	bl	8000a0c <__aeabi_dcmpun>
 8005c18:	b148      	cbz	r0, 8005c2e <_printf_float+0xe2>
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bfb8      	it	lt
 8005c20:	232d      	movlt	r3, #45	@ 0x2d
 8005c22:	4a80      	ldr	r2, [pc, #512]	@ (8005e24 <_printf_float+0x2d8>)
 8005c24:	bfb8      	it	lt
 8005c26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e28 <_printf_float+0x2dc>)
 8005c2c:	e7d3      	b.n	8005bd6 <_printf_float+0x8a>
 8005c2e:	6863      	ldr	r3, [r4, #4]
 8005c30:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	d13f      	bne.n	8005cb8 <_printf_float+0x16c>
 8005c38:	2306      	movs	r3, #6
 8005c3a:	6063      	str	r3, [r4, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	9206      	str	r2, [sp, #24]
 8005c46:	aa0e      	add	r2, sp, #56	@ 0x38
 8005c48:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005c4c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005c4e:	9203      	str	r2, [sp, #12]
 8005c50:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005c54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	4628      	mov	r0, r5
 8005c60:	464b      	mov	r3, r9
 8005c62:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c64:	f7ff fed4 	bl	8005a10 <__cvt>
 8005c68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	2947      	cmp	r1, #71	@ 0x47
 8005c6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005c70:	d128      	bne.n	8005cc4 <_printf_float+0x178>
 8005c72:	1cc8      	adds	r0, r1, #3
 8005c74:	db02      	blt.n	8005c7c <_printf_float+0x130>
 8005c76:	6863      	ldr	r3, [r4, #4]
 8005c78:	4299      	cmp	r1, r3
 8005c7a:	dd40      	ble.n	8005cfe <_printf_float+0x1b2>
 8005c7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c80:	fa5f fa8a 	uxtb.w	sl, sl
 8005c84:	4652      	mov	r2, sl
 8005c86:	3901      	subs	r1, #1
 8005c88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c8c:	910d      	str	r1, [sp, #52]	@ 0x34
 8005c8e:	f7ff ff23 	bl	8005ad8 <__exponent>
 8005c92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c94:	4681      	mov	r9, r0
 8005c96:	1813      	adds	r3, r2, r0
 8005c98:	2a01      	cmp	r2, #1
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	dc02      	bgt.n	8005ca4 <_printf_float+0x158>
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	07d2      	lsls	r2, r2, #31
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_float+0x15c>
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d09e      	beq.n	8005bee <_printf_float+0xa2>
 8005cb0:	232d      	movs	r3, #45	@ 0x2d
 8005cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cb6:	e79a      	b.n	8005bee <_printf_float+0xa2>
 8005cb8:	2947      	cmp	r1, #71	@ 0x47
 8005cba:	d1bf      	bne.n	8005c3c <_printf_float+0xf0>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1bd      	bne.n	8005c3c <_printf_float+0xf0>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e7ba      	b.n	8005c3a <_printf_float+0xee>
 8005cc4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cc8:	d9dc      	bls.n	8005c84 <_printf_float+0x138>
 8005cca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cce:	d118      	bne.n	8005d02 <_printf_float+0x1b6>
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	6863      	ldr	r3, [r4, #4]
 8005cd4:	dd0b      	ble.n	8005cee <_printf_float+0x1a2>
 8005cd6:	6121      	str	r1, [r4, #16]
 8005cd8:	b913      	cbnz	r3, 8005ce0 <_printf_float+0x194>
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	07d0      	lsls	r0, r2, #31
 8005cde:	d502      	bpl.n	8005ce6 <_printf_float+0x19a>
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	440b      	add	r3, r1
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	f04f 0900 	mov.w	r9, #0
 8005cea:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cec:	e7dc      	b.n	8005ca8 <_printf_float+0x15c>
 8005cee:	b913      	cbnz	r3, 8005cf6 <_printf_float+0x1aa>
 8005cf0:	6822      	ldr	r2, [r4, #0]
 8005cf2:	07d2      	lsls	r2, r2, #31
 8005cf4:	d501      	bpl.n	8005cfa <_printf_float+0x1ae>
 8005cf6:	3302      	adds	r3, #2
 8005cf8:	e7f4      	b.n	8005ce4 <_printf_float+0x198>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7f2      	b.n	8005ce4 <_printf_float+0x198>
 8005cfe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d04:	4299      	cmp	r1, r3
 8005d06:	db05      	blt.n	8005d14 <_printf_float+0x1c8>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	6121      	str	r1, [r4, #16]
 8005d0c:	07d8      	lsls	r0, r3, #31
 8005d0e:	d5ea      	bpl.n	8005ce6 <_printf_float+0x19a>
 8005d10:	1c4b      	adds	r3, r1, #1
 8005d12:	e7e7      	b.n	8005ce4 <_printf_float+0x198>
 8005d14:	2900      	cmp	r1, #0
 8005d16:	bfcc      	ite	gt
 8005d18:	2201      	movgt	r2, #1
 8005d1a:	f1c1 0202 	rsble	r2, r1, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	e7e0      	b.n	8005ce4 <_printf_float+0x198>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	055a      	lsls	r2, r3, #21
 8005d26:	d407      	bmi.n	8005d38 <_printf_float+0x1ec>
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	d12b      	bne.n	8005d8e <_printf_float+0x242>
 8005d36:	e764      	b.n	8005c02 <_printf_float+0xb6>
 8005d38:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d3c:	f240 80dc 	bls.w	8005ef8 <_printf_float+0x3ac>
 8005d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d44:	2200      	movs	r2, #0
 8005d46:	2300      	movs	r3, #0
 8005d48:	f7fa fe2e 	bl	80009a8 <__aeabi_dcmpeq>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d033      	beq.n	8005db8 <_printf_float+0x26c>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	4a35      	ldr	r2, [pc, #212]	@ (8005e2c <_printf_float+0x2e0>)
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f af51 	beq.w	8005c02 <_printf_float+0xb6>
 8005d60:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005d64:	4543      	cmp	r3, r8
 8005d66:	db02      	blt.n	8005d6e <_printf_float+0x222>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	07d8      	lsls	r0, r3, #31
 8005d6c:	d50f      	bpl.n	8005d8e <_printf_float+0x242>
 8005d6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	f43f af42 	beq.w	8005c02 <_printf_float+0xb6>
 8005d7e:	f04f 0900 	mov.w	r9, #0
 8005d82:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d86:	f104 0a1a 	add.w	sl, r4, #26
 8005d8a:	45c8      	cmp	r8, r9
 8005d8c:	dc09      	bgt.n	8005da2 <_printf_float+0x256>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	079b      	lsls	r3, r3, #30
 8005d92:	f100 8102 	bmi.w	8005f9a <_printf_float+0x44e>
 8005d96:	68e0      	ldr	r0, [r4, #12]
 8005d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d9a:	4298      	cmp	r0, r3
 8005d9c:	bfb8      	it	lt
 8005d9e:	4618      	movlt	r0, r3
 8005da0:	e731      	b.n	8005c06 <_printf_float+0xba>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4652      	mov	r2, sl
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	f43f af28 	beq.w	8005c02 <_printf_float+0xb6>
 8005db2:	f109 0901 	add.w	r9, r9, #1
 8005db6:	e7e8      	b.n	8005d8a <_printf_float+0x23e>
 8005db8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	dc38      	bgt.n	8005e30 <_printf_float+0x2e4>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	4a19      	ldr	r2, [pc, #100]	@ (8005e2c <_printf_float+0x2e0>)
 8005dc6:	47b8      	blx	r7
 8005dc8:	3001      	adds	r0, #1
 8005dca:	f43f af1a 	beq.w	8005c02 <_printf_float+0xb6>
 8005dce:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005dd2:	ea59 0303 	orrs.w	r3, r9, r3
 8005dd6:	d102      	bne.n	8005dde <_printf_float+0x292>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	d5d7      	bpl.n	8005d8e <_printf_float+0x242>
 8005dde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	f43f af0a 	beq.w	8005c02 <_printf_float+0xb6>
 8005dee:	f04f 0a00 	mov.w	sl, #0
 8005df2:	f104 0b1a 	add.w	fp, r4, #26
 8005df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005df8:	425b      	negs	r3, r3
 8005dfa:	4553      	cmp	r3, sl
 8005dfc:	dc01      	bgt.n	8005e02 <_printf_float+0x2b6>
 8005dfe:	464b      	mov	r3, r9
 8005e00:	e793      	b.n	8005d2a <_printf_float+0x1de>
 8005e02:	2301      	movs	r3, #1
 8005e04:	465a      	mov	r2, fp
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f43f aef8 	beq.w	8005c02 <_printf_float+0xb6>
 8005e12:	f10a 0a01 	add.w	sl, sl, #1
 8005e16:	e7ee      	b.n	8005df6 <_printf_float+0x2aa>
 8005e18:	7fefffff 	.word	0x7fefffff
 8005e1c:	0800838a 	.word	0x0800838a
 8005e20:	08008386 	.word	0x08008386
 8005e24:	08008392 	.word	0x08008392
 8005e28:	0800838e 	.word	0x0800838e
 8005e2c:	08008396 	.word	0x08008396
 8005e30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e32:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e36:	4553      	cmp	r3, sl
 8005e38:	bfa8      	it	ge
 8005e3a:	4653      	movge	r3, sl
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	4699      	mov	r9, r3
 8005e40:	dc36      	bgt.n	8005eb0 <_printf_float+0x364>
 8005e42:	f04f 0b00 	mov.w	fp, #0
 8005e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e4a:	f104 021a 	add.w	r2, r4, #26
 8005e4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e50:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e52:	eba3 0309 	sub.w	r3, r3, r9
 8005e56:	455b      	cmp	r3, fp
 8005e58:	dc31      	bgt.n	8005ebe <_printf_float+0x372>
 8005e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e5c:	459a      	cmp	sl, r3
 8005e5e:	dc3a      	bgt.n	8005ed6 <_printf_float+0x38a>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	07da      	lsls	r2, r3, #31
 8005e64:	d437      	bmi.n	8005ed6 <_printf_float+0x38a>
 8005e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e68:	ebaa 0903 	sub.w	r9, sl, r3
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e72:	4599      	cmp	r9, r3
 8005e74:	bfa8      	it	ge
 8005e76:	4699      	movge	r9, r3
 8005e78:	f1b9 0f00 	cmp.w	r9, #0
 8005e7c:	dc33      	bgt.n	8005ee6 <_printf_float+0x39a>
 8005e7e:	f04f 0800 	mov.w	r8, #0
 8005e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e86:	f104 0b1a 	add.w	fp, r4, #26
 8005e8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e8c:	ebaa 0303 	sub.w	r3, sl, r3
 8005e90:	eba3 0309 	sub.w	r3, r3, r9
 8005e94:	4543      	cmp	r3, r8
 8005e96:	f77f af7a 	ble.w	8005d8e <_printf_float+0x242>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	465a      	mov	r2, fp
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f aeac 	beq.w	8005c02 <_printf_float+0xb6>
 8005eaa:	f108 0801 	add.w	r8, r8, #1
 8005eae:	e7ec      	b.n	8005e8a <_printf_float+0x33e>
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d1c2      	bne.n	8005e42 <_printf_float+0x2f6>
 8005ebc:	e6a1      	b.n	8005c02 <_printf_float+0xb6>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	920a      	str	r2, [sp, #40]	@ 0x28
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f ae9a 	beq.w	8005c02 <_printf_float+0xb6>
 8005ece:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ed0:	f10b 0b01 	add.w	fp, fp, #1
 8005ed4:	e7bb      	b.n	8005e4e <_printf_float+0x302>
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d1c0      	bne.n	8005e66 <_printf_float+0x31a>
 8005ee4:	e68d      	b.n	8005c02 <_printf_float+0xb6>
 8005ee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ee8:	464b      	mov	r3, r9
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	4442      	add	r2, r8
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d1c3      	bne.n	8005e7e <_printf_float+0x332>
 8005ef6:	e684      	b.n	8005c02 <_printf_float+0xb6>
 8005ef8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005efc:	f1ba 0f01 	cmp.w	sl, #1
 8005f00:	dc01      	bgt.n	8005f06 <_printf_float+0x3ba>
 8005f02:	07db      	lsls	r3, r3, #31
 8005f04:	d536      	bpl.n	8005f74 <_printf_float+0x428>
 8005f06:	2301      	movs	r3, #1
 8005f08:	4642      	mov	r2, r8
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	47b8      	blx	r7
 8005f10:	3001      	adds	r0, #1
 8005f12:	f43f ae76 	beq.w	8005c02 <_printf_float+0xb6>
 8005f16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	f43f ae6e 	beq.w	8005c02 <_printf_float+0xb6>
 8005f26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f32:	f7fa fd39 	bl	80009a8 <__aeabi_dcmpeq>
 8005f36:	b9c0      	cbnz	r0, 8005f6a <_printf_float+0x41e>
 8005f38:	4653      	mov	r3, sl
 8005f3a:	f108 0201 	add.w	r2, r8, #1
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	d10c      	bne.n	8005f62 <_printf_float+0x416>
 8005f48:	e65b      	b.n	8005c02 <_printf_float+0xb6>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	465a      	mov	r2, fp
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f ae54 	beq.w	8005c02 <_printf_float+0xb6>
 8005f5a:	f108 0801 	add.w	r8, r8, #1
 8005f5e:	45d0      	cmp	r8, sl
 8005f60:	dbf3      	blt.n	8005f4a <_printf_float+0x3fe>
 8005f62:	464b      	mov	r3, r9
 8005f64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f68:	e6e0      	b.n	8005d2c <_printf_float+0x1e0>
 8005f6a:	f04f 0800 	mov.w	r8, #0
 8005f6e:	f104 0b1a 	add.w	fp, r4, #26
 8005f72:	e7f4      	b.n	8005f5e <_printf_float+0x412>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4642      	mov	r2, r8
 8005f78:	e7e1      	b.n	8005f3e <_printf_float+0x3f2>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	464a      	mov	r2, r9
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f ae3c 	beq.w	8005c02 <_printf_float+0xb6>
 8005f8a:	f108 0801 	add.w	r8, r8, #1
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f92:	1a5b      	subs	r3, r3, r1
 8005f94:	4543      	cmp	r3, r8
 8005f96:	dcf0      	bgt.n	8005f7a <_printf_float+0x42e>
 8005f98:	e6fd      	b.n	8005d96 <_printf_float+0x24a>
 8005f9a:	f04f 0800 	mov.w	r8, #0
 8005f9e:	f104 0919 	add.w	r9, r4, #25
 8005fa2:	e7f4      	b.n	8005f8e <_printf_float+0x442>

08005fa4 <_printf_common>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	4616      	mov	r6, r2
 8005faa:	4698      	mov	r8, r3
 8005fac:	688a      	ldr	r2, [r1, #8]
 8005fae:	690b      	ldr	r3, [r1, #16]
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	bfb8      	it	lt
 8005fb6:	4613      	movlt	r3, r2
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc4:	b10a      	cbz	r2, 8005fca <_printf_common+0x26>
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	6033      	str	r3, [r6, #0]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	0699      	lsls	r1, r3, #26
 8005fce:	bf42      	ittt	mi
 8005fd0:	6833      	ldrmi	r3, [r6, #0]
 8005fd2:	3302      	addmi	r3, #2
 8005fd4:	6033      	strmi	r3, [r6, #0]
 8005fd6:	6825      	ldr	r5, [r4, #0]
 8005fd8:	f015 0506 	ands.w	r5, r5, #6
 8005fdc:	d106      	bne.n	8005fec <_printf_common+0x48>
 8005fde:	f104 0a19 	add.w	sl, r4, #25
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	6832      	ldr	r2, [r6, #0]
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	dc2b      	bgt.n	8006044 <_printf_common+0xa0>
 8005fec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	3b00      	subs	r3, #0
 8005ff4:	bf18      	it	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	0692      	lsls	r2, r2, #26
 8005ffa:	d430      	bmi.n	800605e <_printf_common+0xba>
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	4638      	mov	r0, r7
 8006000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006004:	47c8      	blx	r9
 8006006:	3001      	adds	r0, #1
 8006008:	d023      	beq.n	8006052 <_printf_common+0xae>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	6922      	ldr	r2, [r4, #16]
 800600e:	f003 0306 	and.w	r3, r3, #6
 8006012:	2b04      	cmp	r3, #4
 8006014:	bf14      	ite	ne
 8006016:	2500      	movne	r5, #0
 8006018:	6833      	ldreq	r3, [r6, #0]
 800601a:	f04f 0600 	mov.w	r6, #0
 800601e:	bf08      	it	eq
 8006020:	68e5      	ldreq	r5, [r4, #12]
 8006022:	f104 041a 	add.w	r4, r4, #26
 8006026:	bf08      	it	eq
 8006028:	1aed      	subeq	r5, r5, r3
 800602a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800602e:	bf08      	it	eq
 8006030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006034:	4293      	cmp	r3, r2
 8006036:	bfc4      	itt	gt
 8006038:	1a9b      	subgt	r3, r3, r2
 800603a:	18ed      	addgt	r5, r5, r3
 800603c:	42b5      	cmp	r5, r6
 800603e:	d11a      	bne.n	8006076 <_printf_common+0xd2>
 8006040:	2000      	movs	r0, #0
 8006042:	e008      	b.n	8006056 <_printf_common+0xb2>
 8006044:	2301      	movs	r3, #1
 8006046:	4652      	mov	r2, sl
 8006048:	4641      	mov	r1, r8
 800604a:	4638      	mov	r0, r7
 800604c:	47c8      	blx	r9
 800604e:	3001      	adds	r0, #1
 8006050:	d103      	bne.n	800605a <_printf_common+0xb6>
 8006052:	f04f 30ff 	mov.w	r0, #4294967295
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605a:	3501      	adds	r5, #1
 800605c:	e7c1      	b.n	8005fe2 <_printf_common+0x3e>
 800605e:	2030      	movs	r0, #48	@ 0x30
 8006060:	18e1      	adds	r1, r4, r3
 8006062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800606c:	4422      	add	r2, r4
 800606e:	3302      	adds	r3, #2
 8006070:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006074:	e7c2      	b.n	8005ffc <_printf_common+0x58>
 8006076:	2301      	movs	r3, #1
 8006078:	4622      	mov	r2, r4
 800607a:	4641      	mov	r1, r8
 800607c:	4638      	mov	r0, r7
 800607e:	47c8      	blx	r9
 8006080:	3001      	adds	r0, #1
 8006082:	d0e6      	beq.n	8006052 <_printf_common+0xae>
 8006084:	3601      	adds	r6, #1
 8006086:	e7d9      	b.n	800603c <_printf_common+0x98>

08006088 <_printf_i>:
 8006088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	7e0f      	ldrb	r7, [r1, #24]
 800608e:	4691      	mov	r9, r2
 8006090:	2f78      	cmp	r7, #120	@ 0x78
 8006092:	4680      	mov	r8, r0
 8006094:	460c      	mov	r4, r1
 8006096:	469a      	mov	sl, r3
 8006098:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800609a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800609e:	d807      	bhi.n	80060b0 <_printf_i+0x28>
 80060a0:	2f62      	cmp	r7, #98	@ 0x62
 80060a2:	d80a      	bhi.n	80060ba <_printf_i+0x32>
 80060a4:	2f00      	cmp	r7, #0
 80060a6:	f000 80d1 	beq.w	800624c <_printf_i+0x1c4>
 80060aa:	2f58      	cmp	r7, #88	@ 0x58
 80060ac:	f000 80b8 	beq.w	8006220 <_printf_i+0x198>
 80060b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060b8:	e03a      	b.n	8006130 <_printf_i+0xa8>
 80060ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060be:	2b15      	cmp	r3, #21
 80060c0:	d8f6      	bhi.n	80060b0 <_printf_i+0x28>
 80060c2:	a101      	add	r1, pc, #4	@ (adr r1, 80060c8 <_printf_i+0x40>)
 80060c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006135 	.word	0x08006135
 80060d0:	080060b1 	.word	0x080060b1
 80060d4:	080060b1 	.word	0x080060b1
 80060d8:	080060b1 	.word	0x080060b1
 80060dc:	080060b1 	.word	0x080060b1
 80060e0:	08006135 	.word	0x08006135
 80060e4:	080060b1 	.word	0x080060b1
 80060e8:	080060b1 	.word	0x080060b1
 80060ec:	080060b1 	.word	0x080060b1
 80060f0:	080060b1 	.word	0x080060b1
 80060f4:	08006233 	.word	0x08006233
 80060f8:	0800615f 	.word	0x0800615f
 80060fc:	080061ed 	.word	0x080061ed
 8006100:	080060b1 	.word	0x080060b1
 8006104:	080060b1 	.word	0x080060b1
 8006108:	08006255 	.word	0x08006255
 800610c:	080060b1 	.word	0x080060b1
 8006110:	0800615f 	.word	0x0800615f
 8006114:	080060b1 	.word	0x080060b1
 8006118:	080060b1 	.word	0x080060b1
 800611c:	080061f5 	.word	0x080061f5
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	1d1a      	adds	r2, r3, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6032      	str	r2, [r6, #0]
 8006128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800612c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006130:	2301      	movs	r3, #1
 8006132:	e09c      	b.n	800626e <_printf_i+0x1e6>
 8006134:	6833      	ldr	r3, [r6, #0]
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	1d19      	adds	r1, r3, #4
 800613a:	6031      	str	r1, [r6, #0]
 800613c:	0606      	lsls	r6, r0, #24
 800613e:	d501      	bpl.n	8006144 <_printf_i+0xbc>
 8006140:	681d      	ldr	r5, [r3, #0]
 8006142:	e003      	b.n	800614c <_printf_i+0xc4>
 8006144:	0645      	lsls	r5, r0, #25
 8006146:	d5fb      	bpl.n	8006140 <_printf_i+0xb8>
 8006148:	f9b3 5000 	ldrsh.w	r5, [r3]
 800614c:	2d00      	cmp	r5, #0
 800614e:	da03      	bge.n	8006158 <_printf_i+0xd0>
 8006150:	232d      	movs	r3, #45	@ 0x2d
 8006152:	426d      	negs	r5, r5
 8006154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006158:	230a      	movs	r3, #10
 800615a:	4858      	ldr	r0, [pc, #352]	@ (80062bc <_printf_i+0x234>)
 800615c:	e011      	b.n	8006182 <_printf_i+0xfa>
 800615e:	6821      	ldr	r1, [r4, #0]
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	0608      	lsls	r0, r1, #24
 8006164:	f853 5b04 	ldr.w	r5, [r3], #4
 8006168:	d402      	bmi.n	8006170 <_printf_i+0xe8>
 800616a:	0649      	lsls	r1, r1, #25
 800616c:	bf48      	it	mi
 800616e:	b2ad      	uxthmi	r5, r5
 8006170:	2f6f      	cmp	r7, #111	@ 0x6f
 8006172:	6033      	str	r3, [r6, #0]
 8006174:	bf14      	ite	ne
 8006176:	230a      	movne	r3, #10
 8006178:	2308      	moveq	r3, #8
 800617a:	4850      	ldr	r0, [pc, #320]	@ (80062bc <_printf_i+0x234>)
 800617c:	2100      	movs	r1, #0
 800617e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006182:	6866      	ldr	r6, [r4, #4]
 8006184:	2e00      	cmp	r6, #0
 8006186:	60a6      	str	r6, [r4, #8]
 8006188:	db05      	blt.n	8006196 <_printf_i+0x10e>
 800618a:	6821      	ldr	r1, [r4, #0]
 800618c:	432e      	orrs	r6, r5
 800618e:	f021 0104 	bic.w	r1, r1, #4
 8006192:	6021      	str	r1, [r4, #0]
 8006194:	d04b      	beq.n	800622e <_printf_i+0x1a6>
 8006196:	4616      	mov	r6, r2
 8006198:	fbb5 f1f3 	udiv	r1, r5, r3
 800619c:	fb03 5711 	mls	r7, r3, r1, r5
 80061a0:	5dc7      	ldrb	r7, [r0, r7]
 80061a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061a6:	462f      	mov	r7, r5
 80061a8:	42bb      	cmp	r3, r7
 80061aa:	460d      	mov	r5, r1
 80061ac:	d9f4      	bls.n	8006198 <_printf_i+0x110>
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d10b      	bne.n	80061ca <_printf_i+0x142>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	07df      	lsls	r7, r3, #31
 80061b6:	d508      	bpl.n	80061ca <_printf_i+0x142>
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	6861      	ldr	r1, [r4, #4]
 80061bc:	4299      	cmp	r1, r3
 80061be:	bfde      	ittt	le
 80061c0:	2330      	movle	r3, #48	@ 0x30
 80061c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ca:	1b92      	subs	r2, r2, r6
 80061cc:	6122      	str	r2, [r4, #16]
 80061ce:	464b      	mov	r3, r9
 80061d0:	4621      	mov	r1, r4
 80061d2:	4640      	mov	r0, r8
 80061d4:	f8cd a000 	str.w	sl, [sp]
 80061d8:	aa03      	add	r2, sp, #12
 80061da:	f7ff fee3 	bl	8005fa4 <_printf_common>
 80061de:	3001      	adds	r0, #1
 80061e0:	d14a      	bne.n	8006278 <_printf_i+0x1f0>
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	b004      	add	sp, #16
 80061e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	f043 0320 	orr.w	r3, r3, #32
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	2778      	movs	r7, #120	@ 0x78
 80061f6:	4832      	ldr	r0, [pc, #200]	@ (80062c0 <_printf_i+0x238>)
 80061f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6831      	ldr	r1, [r6, #0]
 8006200:	061f      	lsls	r7, r3, #24
 8006202:	f851 5b04 	ldr.w	r5, [r1], #4
 8006206:	d402      	bmi.n	800620e <_printf_i+0x186>
 8006208:	065f      	lsls	r7, r3, #25
 800620a:	bf48      	it	mi
 800620c:	b2ad      	uxthmi	r5, r5
 800620e:	6031      	str	r1, [r6, #0]
 8006210:	07d9      	lsls	r1, r3, #31
 8006212:	bf44      	itt	mi
 8006214:	f043 0320 	orrmi.w	r3, r3, #32
 8006218:	6023      	strmi	r3, [r4, #0]
 800621a:	b11d      	cbz	r5, 8006224 <_printf_i+0x19c>
 800621c:	2310      	movs	r3, #16
 800621e:	e7ad      	b.n	800617c <_printf_i+0xf4>
 8006220:	4826      	ldr	r0, [pc, #152]	@ (80062bc <_printf_i+0x234>)
 8006222:	e7e9      	b.n	80061f8 <_printf_i+0x170>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	f023 0320 	bic.w	r3, r3, #32
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	e7f6      	b.n	800621c <_printf_i+0x194>
 800622e:	4616      	mov	r6, r2
 8006230:	e7bd      	b.n	80061ae <_printf_i+0x126>
 8006232:	6833      	ldr	r3, [r6, #0]
 8006234:	6825      	ldr	r5, [r4, #0]
 8006236:	1d18      	adds	r0, r3, #4
 8006238:	6961      	ldr	r1, [r4, #20]
 800623a:	6030      	str	r0, [r6, #0]
 800623c:	062e      	lsls	r6, r5, #24
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	d501      	bpl.n	8006246 <_printf_i+0x1be>
 8006242:	6019      	str	r1, [r3, #0]
 8006244:	e002      	b.n	800624c <_printf_i+0x1c4>
 8006246:	0668      	lsls	r0, r5, #25
 8006248:	d5fb      	bpl.n	8006242 <_printf_i+0x1ba>
 800624a:	8019      	strh	r1, [r3, #0]
 800624c:	2300      	movs	r3, #0
 800624e:	4616      	mov	r6, r2
 8006250:	6123      	str	r3, [r4, #16]
 8006252:	e7bc      	b.n	80061ce <_printf_i+0x146>
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	2100      	movs	r1, #0
 8006258:	1d1a      	adds	r2, r3, #4
 800625a:	6032      	str	r2, [r6, #0]
 800625c:	681e      	ldr	r6, [r3, #0]
 800625e:	6862      	ldr	r2, [r4, #4]
 8006260:	4630      	mov	r0, r6
 8006262:	f000 f9b4 	bl	80065ce <memchr>
 8006266:	b108      	cbz	r0, 800626c <_printf_i+0x1e4>
 8006268:	1b80      	subs	r0, r0, r6
 800626a:	6060      	str	r0, [r4, #4]
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	2300      	movs	r3, #0
 8006272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006276:	e7aa      	b.n	80061ce <_printf_i+0x146>
 8006278:	4632      	mov	r2, r6
 800627a:	4649      	mov	r1, r9
 800627c:	4640      	mov	r0, r8
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	47d0      	blx	sl
 8006282:	3001      	adds	r0, #1
 8006284:	d0ad      	beq.n	80061e2 <_printf_i+0x15a>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	079b      	lsls	r3, r3, #30
 800628a:	d413      	bmi.n	80062b4 <_printf_i+0x22c>
 800628c:	68e0      	ldr	r0, [r4, #12]
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	4298      	cmp	r0, r3
 8006292:	bfb8      	it	lt
 8006294:	4618      	movlt	r0, r3
 8006296:	e7a6      	b.n	80061e6 <_printf_i+0x15e>
 8006298:	2301      	movs	r3, #1
 800629a:	4632      	mov	r2, r6
 800629c:	4649      	mov	r1, r9
 800629e:	4640      	mov	r0, r8
 80062a0:	47d0      	blx	sl
 80062a2:	3001      	adds	r0, #1
 80062a4:	d09d      	beq.n	80061e2 <_printf_i+0x15a>
 80062a6:	3501      	adds	r5, #1
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	1a5b      	subs	r3, r3, r1
 80062ae:	42ab      	cmp	r3, r5
 80062b0:	dcf2      	bgt.n	8006298 <_printf_i+0x210>
 80062b2:	e7eb      	b.n	800628c <_printf_i+0x204>
 80062b4:	2500      	movs	r5, #0
 80062b6:	f104 0619 	add.w	r6, r4, #25
 80062ba:	e7f5      	b.n	80062a8 <_printf_i+0x220>
 80062bc:	08008398 	.word	0x08008398
 80062c0:	080083a9 	.word	0x080083a9

080062c4 <std>:
 80062c4:	2300      	movs	r3, #0
 80062c6:	b510      	push	{r4, lr}
 80062c8:	4604      	mov	r4, r0
 80062ca:	e9c0 3300 	strd	r3, r3, [r0]
 80062ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062d2:	6083      	str	r3, [r0, #8]
 80062d4:	8181      	strh	r1, [r0, #12]
 80062d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80062d8:	81c2      	strh	r2, [r0, #14]
 80062da:	6183      	str	r3, [r0, #24]
 80062dc:	4619      	mov	r1, r3
 80062de:	2208      	movs	r2, #8
 80062e0:	305c      	adds	r0, #92	@ 0x5c
 80062e2:	f000 f8f4 	bl	80064ce <memset>
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <std+0x58>)
 80062e8:	6224      	str	r4, [r4, #32]
 80062ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80062ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <std+0x5c>)
 80062ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006324 <std+0x60>)
 80062f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <std+0x64>)
 80062f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80062f8:	4b0c      	ldr	r3, [pc, #48]	@ (800632c <std+0x68>)
 80062fa:	429c      	cmp	r4, r3
 80062fc:	d006      	beq.n	800630c <std+0x48>
 80062fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006302:	4294      	cmp	r4, r2
 8006304:	d002      	beq.n	800630c <std+0x48>
 8006306:	33d0      	adds	r3, #208	@ 0xd0
 8006308:	429c      	cmp	r4, r3
 800630a:	d105      	bne.n	8006318 <std+0x54>
 800630c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006314:	f000 b958 	b.w	80065c8 <__retarget_lock_init_recursive>
 8006318:	bd10      	pop	{r4, pc}
 800631a:	bf00      	nop
 800631c:	08006449 	.word	0x08006449
 8006320:	0800646b 	.word	0x0800646b
 8006324:	080064a3 	.word	0x080064a3
 8006328:	080064c7 	.word	0x080064c7
 800632c:	200004cc 	.word	0x200004cc

08006330 <stdio_exit_handler>:
 8006330:	4a02      	ldr	r2, [pc, #8]	@ (800633c <stdio_exit_handler+0xc>)
 8006332:	4903      	ldr	r1, [pc, #12]	@ (8006340 <stdio_exit_handler+0x10>)
 8006334:	4803      	ldr	r0, [pc, #12]	@ (8006344 <stdio_exit_handler+0x14>)
 8006336:	f000 b869 	b.w	800640c <_fwalk_sglue>
 800633a:	bf00      	nop
 800633c:	2000000c 	.word	0x2000000c
 8006340:	08007c99 	.word	0x08007c99
 8006344:	2000001c 	.word	0x2000001c

08006348 <cleanup_stdio>:
 8006348:	6841      	ldr	r1, [r0, #4]
 800634a:	4b0c      	ldr	r3, [pc, #48]	@ (800637c <cleanup_stdio+0x34>)
 800634c:	b510      	push	{r4, lr}
 800634e:	4299      	cmp	r1, r3
 8006350:	4604      	mov	r4, r0
 8006352:	d001      	beq.n	8006358 <cleanup_stdio+0x10>
 8006354:	f001 fca0 	bl	8007c98 <_fflush_r>
 8006358:	68a1      	ldr	r1, [r4, #8]
 800635a:	4b09      	ldr	r3, [pc, #36]	@ (8006380 <cleanup_stdio+0x38>)
 800635c:	4299      	cmp	r1, r3
 800635e:	d002      	beq.n	8006366 <cleanup_stdio+0x1e>
 8006360:	4620      	mov	r0, r4
 8006362:	f001 fc99 	bl	8007c98 <_fflush_r>
 8006366:	68e1      	ldr	r1, [r4, #12]
 8006368:	4b06      	ldr	r3, [pc, #24]	@ (8006384 <cleanup_stdio+0x3c>)
 800636a:	4299      	cmp	r1, r3
 800636c:	d004      	beq.n	8006378 <cleanup_stdio+0x30>
 800636e:	4620      	mov	r0, r4
 8006370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006374:	f001 bc90 	b.w	8007c98 <_fflush_r>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	bf00      	nop
 800637c:	200004cc 	.word	0x200004cc
 8006380:	20000534 	.word	0x20000534
 8006384:	2000059c 	.word	0x2000059c

08006388 <global_stdio_init.part.0>:
 8006388:	b510      	push	{r4, lr}
 800638a:	4b0b      	ldr	r3, [pc, #44]	@ (80063b8 <global_stdio_init.part.0+0x30>)
 800638c:	4c0b      	ldr	r4, [pc, #44]	@ (80063bc <global_stdio_init.part.0+0x34>)
 800638e:	4a0c      	ldr	r2, [pc, #48]	@ (80063c0 <global_stdio_init.part.0+0x38>)
 8006390:	4620      	mov	r0, r4
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	2104      	movs	r1, #4
 8006396:	2200      	movs	r2, #0
 8006398:	f7ff ff94 	bl	80062c4 <std>
 800639c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063a0:	2201      	movs	r2, #1
 80063a2:	2109      	movs	r1, #9
 80063a4:	f7ff ff8e 	bl	80062c4 <std>
 80063a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063ac:	2202      	movs	r2, #2
 80063ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b2:	2112      	movs	r1, #18
 80063b4:	f7ff bf86 	b.w	80062c4 <std>
 80063b8:	20000604 	.word	0x20000604
 80063bc:	200004cc 	.word	0x200004cc
 80063c0:	08006331 	.word	0x08006331

080063c4 <__sfp_lock_acquire>:
 80063c4:	4801      	ldr	r0, [pc, #4]	@ (80063cc <__sfp_lock_acquire+0x8>)
 80063c6:	f000 b900 	b.w	80065ca <__retarget_lock_acquire_recursive>
 80063ca:	bf00      	nop
 80063cc:	2000060d 	.word	0x2000060d

080063d0 <__sfp_lock_release>:
 80063d0:	4801      	ldr	r0, [pc, #4]	@ (80063d8 <__sfp_lock_release+0x8>)
 80063d2:	f000 b8fb 	b.w	80065cc <__retarget_lock_release_recursive>
 80063d6:	bf00      	nop
 80063d8:	2000060d 	.word	0x2000060d

080063dc <__sinit>:
 80063dc:	b510      	push	{r4, lr}
 80063de:	4604      	mov	r4, r0
 80063e0:	f7ff fff0 	bl	80063c4 <__sfp_lock_acquire>
 80063e4:	6a23      	ldr	r3, [r4, #32]
 80063e6:	b11b      	cbz	r3, 80063f0 <__sinit+0x14>
 80063e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ec:	f7ff bff0 	b.w	80063d0 <__sfp_lock_release>
 80063f0:	4b04      	ldr	r3, [pc, #16]	@ (8006404 <__sinit+0x28>)
 80063f2:	6223      	str	r3, [r4, #32]
 80063f4:	4b04      	ldr	r3, [pc, #16]	@ (8006408 <__sinit+0x2c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f5      	bne.n	80063e8 <__sinit+0xc>
 80063fc:	f7ff ffc4 	bl	8006388 <global_stdio_init.part.0>
 8006400:	e7f2      	b.n	80063e8 <__sinit+0xc>
 8006402:	bf00      	nop
 8006404:	08006349 	.word	0x08006349
 8006408:	20000604 	.word	0x20000604

0800640c <_fwalk_sglue>:
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006410:	4607      	mov	r7, r0
 8006412:	4688      	mov	r8, r1
 8006414:	4614      	mov	r4, r2
 8006416:	2600      	movs	r6, #0
 8006418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800641c:	f1b9 0901 	subs.w	r9, r9, #1
 8006420:	d505      	bpl.n	800642e <_fwalk_sglue+0x22>
 8006422:	6824      	ldr	r4, [r4, #0]
 8006424:	2c00      	cmp	r4, #0
 8006426:	d1f7      	bne.n	8006418 <_fwalk_sglue+0xc>
 8006428:	4630      	mov	r0, r6
 800642a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d907      	bls.n	8006444 <_fwalk_sglue+0x38>
 8006434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006438:	3301      	adds	r3, #1
 800643a:	d003      	beq.n	8006444 <_fwalk_sglue+0x38>
 800643c:	4629      	mov	r1, r5
 800643e:	4638      	mov	r0, r7
 8006440:	47c0      	blx	r8
 8006442:	4306      	orrs	r6, r0
 8006444:	3568      	adds	r5, #104	@ 0x68
 8006446:	e7e9      	b.n	800641c <_fwalk_sglue+0x10>

08006448 <__sread>:
 8006448:	b510      	push	{r4, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006450:	f000 f86c 	bl	800652c <_read_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	bfab      	itete	ge
 8006458:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800645a:	89a3      	ldrhlt	r3, [r4, #12]
 800645c:	181b      	addge	r3, r3, r0
 800645e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006462:	bfac      	ite	ge
 8006464:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006466:	81a3      	strhlt	r3, [r4, #12]
 8006468:	bd10      	pop	{r4, pc}

0800646a <__swrite>:
 800646a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646e:	461f      	mov	r7, r3
 8006470:	898b      	ldrh	r3, [r1, #12]
 8006472:	4605      	mov	r5, r0
 8006474:	05db      	lsls	r3, r3, #23
 8006476:	460c      	mov	r4, r1
 8006478:	4616      	mov	r6, r2
 800647a:	d505      	bpl.n	8006488 <__swrite+0x1e>
 800647c:	2302      	movs	r3, #2
 800647e:	2200      	movs	r2, #0
 8006480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006484:	f000 f840 	bl	8006508 <_lseek_r>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	4632      	mov	r2, r6
 800648c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	4628      	mov	r0, r5
 8006494:	463b      	mov	r3, r7
 8006496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800649a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800649e:	f000 b857 	b.w	8006550 <_write_r>

080064a2 <__sseek>:
 80064a2:	b510      	push	{r4, lr}
 80064a4:	460c      	mov	r4, r1
 80064a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064aa:	f000 f82d 	bl	8006508 <_lseek_r>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	bf15      	itete	ne
 80064b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064be:	81a3      	strheq	r3, [r4, #12]
 80064c0:	bf18      	it	ne
 80064c2:	81a3      	strhne	r3, [r4, #12]
 80064c4:	bd10      	pop	{r4, pc}

080064c6 <__sclose>:
 80064c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ca:	f000 b80d 	b.w	80064e8 <_close_r>

080064ce <memset>:
 80064ce:	4603      	mov	r3, r0
 80064d0:	4402      	add	r2, r0
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d100      	bne.n	80064d8 <memset+0xa>
 80064d6:	4770      	bx	lr
 80064d8:	f803 1b01 	strb.w	r1, [r3], #1
 80064dc:	e7f9      	b.n	80064d2 <memset+0x4>
	...

080064e0 <_localeconv_r>:
 80064e0:	4800      	ldr	r0, [pc, #0]	@ (80064e4 <_localeconv_r+0x4>)
 80064e2:	4770      	bx	lr
 80064e4:	20000158 	.word	0x20000158

080064e8 <_close_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	2300      	movs	r3, #0
 80064ec:	4d05      	ldr	r5, [pc, #20]	@ (8006504 <_close_r+0x1c>)
 80064ee:	4604      	mov	r4, r0
 80064f0:	4608      	mov	r0, r1
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	f7fb f825 	bl	8001542 <_close>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_close_r+0x1a>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_close_r+0x1a>
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20000608 	.word	0x20000608

08006508 <_lseek_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4604      	mov	r4, r0
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	2200      	movs	r2, #0
 8006512:	4d05      	ldr	r5, [pc, #20]	@ (8006528 <_lseek_r+0x20>)
 8006514:	602a      	str	r2, [r5, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	f7fb f837 	bl	800158a <_lseek>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d102      	bne.n	8006526 <_lseek_r+0x1e>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	b103      	cbz	r3, 8006526 <_lseek_r+0x1e>
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	20000608 	.word	0x20000608

0800652c <_read_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	4611      	mov	r1, r2
 8006534:	2200      	movs	r2, #0
 8006536:	4d05      	ldr	r5, [pc, #20]	@ (800654c <_read_r+0x20>)
 8006538:	602a      	str	r2, [r5, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	f7fa ffc8 	bl	80014d0 <_read>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_read_r+0x1e>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_read_r+0x1e>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	20000608 	.word	0x20000608

08006550 <_write_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	4611      	mov	r1, r2
 8006558:	2200      	movs	r2, #0
 800655a:	4d05      	ldr	r5, [pc, #20]	@ (8006570 <_write_r+0x20>)
 800655c:	602a      	str	r2, [r5, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	f7fa ffd3 	bl	800150a <_write>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_write_r+0x1e>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_write_r+0x1e>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000608 	.word	0x20000608

08006574 <__errno>:
 8006574:	4b01      	ldr	r3, [pc, #4]	@ (800657c <__errno+0x8>)
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20000018 	.word	0x20000018

08006580 <__libc_init_array>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	2600      	movs	r6, #0
 8006584:	4d0c      	ldr	r5, [pc, #48]	@ (80065b8 <__libc_init_array+0x38>)
 8006586:	4c0d      	ldr	r4, [pc, #52]	@ (80065bc <__libc_init_array+0x3c>)
 8006588:	1b64      	subs	r4, r4, r5
 800658a:	10a4      	asrs	r4, r4, #2
 800658c:	42a6      	cmp	r6, r4
 800658e:	d109      	bne.n	80065a4 <__libc_init_array+0x24>
 8006590:	f001 fece 	bl	8008330 <_init>
 8006594:	2600      	movs	r6, #0
 8006596:	4d0a      	ldr	r5, [pc, #40]	@ (80065c0 <__libc_init_array+0x40>)
 8006598:	4c0a      	ldr	r4, [pc, #40]	@ (80065c4 <__libc_init_array+0x44>)
 800659a:	1b64      	subs	r4, r4, r5
 800659c:	10a4      	asrs	r4, r4, #2
 800659e:	42a6      	cmp	r6, r4
 80065a0:	d105      	bne.n	80065ae <__libc_init_array+0x2e>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a8:	4798      	blx	r3
 80065aa:	3601      	adds	r6, #1
 80065ac:	e7ee      	b.n	800658c <__libc_init_array+0xc>
 80065ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b2:	4798      	blx	r3
 80065b4:	3601      	adds	r6, #1
 80065b6:	e7f2      	b.n	800659e <__libc_init_array+0x1e>
 80065b8:	08008704 	.word	0x08008704
 80065bc:	08008704 	.word	0x08008704
 80065c0:	08008704 	.word	0x08008704
 80065c4:	08008708 	.word	0x08008708

080065c8 <__retarget_lock_init_recursive>:
 80065c8:	4770      	bx	lr

080065ca <__retarget_lock_acquire_recursive>:
 80065ca:	4770      	bx	lr

080065cc <__retarget_lock_release_recursive>:
 80065cc:	4770      	bx	lr

080065ce <memchr>:
 80065ce:	4603      	mov	r3, r0
 80065d0:	b510      	push	{r4, lr}
 80065d2:	b2c9      	uxtb	r1, r1
 80065d4:	4402      	add	r2, r0
 80065d6:	4293      	cmp	r3, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	d101      	bne.n	80065e0 <memchr+0x12>
 80065dc:	2000      	movs	r0, #0
 80065de:	e003      	b.n	80065e8 <memchr+0x1a>
 80065e0:	7804      	ldrb	r4, [r0, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	428c      	cmp	r4, r1
 80065e6:	d1f6      	bne.n	80065d6 <memchr+0x8>
 80065e8:	bd10      	pop	{r4, pc}

080065ea <quorem>:
 80065ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ee:	6903      	ldr	r3, [r0, #16]
 80065f0:	690c      	ldr	r4, [r1, #16]
 80065f2:	4607      	mov	r7, r0
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	db7e      	blt.n	80066f6 <quorem+0x10c>
 80065f8:	3c01      	subs	r4, #1
 80065fa:	00a3      	lsls	r3, r4, #2
 80065fc:	f100 0514 	add.w	r5, r0, #20
 8006600:	f101 0814 	add.w	r8, r1, #20
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006610:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006614:	3301      	adds	r3, #1
 8006616:	429a      	cmp	r2, r3
 8006618:	fbb2 f6f3 	udiv	r6, r2, r3
 800661c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006620:	d32e      	bcc.n	8006680 <quorem+0x96>
 8006622:	f04f 0a00 	mov.w	sl, #0
 8006626:	46c4      	mov	ip, r8
 8006628:	46ae      	mov	lr, r5
 800662a:	46d3      	mov	fp, sl
 800662c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006630:	b298      	uxth	r0, r3
 8006632:	fb06 a000 	mla	r0, r6, r0, sl
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	0c02      	lsrs	r2, r0, #16
 800663a:	fb06 2303 	mla	r3, r6, r3, r2
 800663e:	f8de 2000 	ldr.w	r2, [lr]
 8006642:	b280      	uxth	r0, r0
 8006644:	b292      	uxth	r2, r2
 8006646:	1a12      	subs	r2, r2, r0
 8006648:	445a      	add	r2, fp
 800664a:	f8de 0000 	ldr.w	r0, [lr]
 800664e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006652:	b29b      	uxth	r3, r3
 8006654:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006658:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800665c:	b292      	uxth	r2, r2
 800665e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006662:	45e1      	cmp	r9, ip
 8006664:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006668:	f84e 2b04 	str.w	r2, [lr], #4
 800666c:	d2de      	bcs.n	800662c <quorem+0x42>
 800666e:	9b00      	ldr	r3, [sp, #0]
 8006670:	58eb      	ldr	r3, [r5, r3]
 8006672:	b92b      	cbnz	r3, 8006680 <quorem+0x96>
 8006674:	9b01      	ldr	r3, [sp, #4]
 8006676:	3b04      	subs	r3, #4
 8006678:	429d      	cmp	r5, r3
 800667a:	461a      	mov	r2, r3
 800667c:	d32f      	bcc.n	80066de <quorem+0xf4>
 800667e:	613c      	str	r4, [r7, #16]
 8006680:	4638      	mov	r0, r7
 8006682:	f001 f981 	bl	8007988 <__mcmp>
 8006686:	2800      	cmp	r0, #0
 8006688:	db25      	blt.n	80066d6 <quorem+0xec>
 800668a:	4629      	mov	r1, r5
 800668c:	2000      	movs	r0, #0
 800668e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006692:	f8d1 c000 	ldr.w	ip, [r1]
 8006696:	fa1f fe82 	uxth.w	lr, r2
 800669a:	fa1f f38c 	uxth.w	r3, ip
 800669e:	eba3 030e 	sub.w	r3, r3, lr
 80066a2:	4403      	add	r3, r0
 80066a4:	0c12      	lsrs	r2, r2, #16
 80066a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80066aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066b4:	45c1      	cmp	r9, r8
 80066b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066ba:	f841 3b04 	str.w	r3, [r1], #4
 80066be:	d2e6      	bcs.n	800668e <quorem+0xa4>
 80066c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066c8:	b922      	cbnz	r2, 80066d4 <quorem+0xea>
 80066ca:	3b04      	subs	r3, #4
 80066cc:	429d      	cmp	r5, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	d30b      	bcc.n	80066ea <quorem+0x100>
 80066d2:	613c      	str	r4, [r7, #16]
 80066d4:	3601      	adds	r6, #1
 80066d6:	4630      	mov	r0, r6
 80066d8:	b003      	add	sp, #12
 80066da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	3b04      	subs	r3, #4
 80066e2:	2a00      	cmp	r2, #0
 80066e4:	d1cb      	bne.n	800667e <quorem+0x94>
 80066e6:	3c01      	subs	r4, #1
 80066e8:	e7c6      	b.n	8006678 <quorem+0x8e>
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	d1ef      	bne.n	80066d2 <quorem+0xe8>
 80066f2:	3c01      	subs	r4, #1
 80066f4:	e7ea      	b.n	80066cc <quorem+0xe2>
 80066f6:	2000      	movs	r0, #0
 80066f8:	e7ee      	b.n	80066d8 <quorem+0xee>
 80066fa:	0000      	movs	r0, r0
 80066fc:	0000      	movs	r0, r0
	...

08006700 <_dtoa_r>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	4614      	mov	r4, r2
 8006706:	461d      	mov	r5, r3
 8006708:	69c7      	ldr	r7, [r0, #28]
 800670a:	b097      	sub	sp, #92	@ 0x5c
 800670c:	4681      	mov	r9, r0
 800670e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006712:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006714:	b97f      	cbnz	r7, 8006736 <_dtoa_r+0x36>
 8006716:	2010      	movs	r0, #16
 8006718:	f000 fe0e 	bl	8007338 <malloc>
 800671c:	4602      	mov	r2, r0
 800671e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006722:	b920      	cbnz	r0, 800672e <_dtoa_r+0x2e>
 8006724:	21ef      	movs	r1, #239	@ 0xef
 8006726:	4bac      	ldr	r3, [pc, #688]	@ (80069d8 <_dtoa_r+0x2d8>)
 8006728:	48ac      	ldr	r0, [pc, #688]	@ (80069dc <_dtoa_r+0x2dc>)
 800672a:	f001 fafb 	bl	8007d24 <__assert_func>
 800672e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006732:	6007      	str	r7, [r0, #0]
 8006734:	60c7      	str	r7, [r0, #12]
 8006736:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800673a:	6819      	ldr	r1, [r3, #0]
 800673c:	b159      	cbz	r1, 8006756 <_dtoa_r+0x56>
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	2301      	movs	r3, #1
 8006742:	4093      	lsls	r3, r2
 8006744:	604a      	str	r2, [r1, #4]
 8006746:	608b      	str	r3, [r1, #8]
 8006748:	4648      	mov	r0, r9
 800674a:	f000 feeb 	bl	8007524 <_Bfree>
 800674e:	2200      	movs	r2, #0
 8006750:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	1e2b      	subs	r3, r5, #0
 8006758:	bfaf      	iteee	ge
 800675a:	2300      	movge	r3, #0
 800675c:	2201      	movlt	r2, #1
 800675e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006762:	9307      	strlt	r3, [sp, #28]
 8006764:	bfa8      	it	ge
 8006766:	6033      	strge	r3, [r6, #0]
 8006768:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800676c:	4b9c      	ldr	r3, [pc, #624]	@ (80069e0 <_dtoa_r+0x2e0>)
 800676e:	bfb8      	it	lt
 8006770:	6032      	strlt	r2, [r6, #0]
 8006772:	ea33 0308 	bics.w	r3, r3, r8
 8006776:	d112      	bne.n	800679e <_dtoa_r+0x9e>
 8006778:	f242 730f 	movw	r3, #9999	@ 0x270f
 800677c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006784:	4323      	orrs	r3, r4
 8006786:	f000 855e 	beq.w	8007246 <_dtoa_r+0xb46>
 800678a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800678c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80069e4 <_dtoa_r+0x2e4>
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8560 	beq.w	8007256 <_dtoa_r+0xb56>
 8006796:	f10a 0303 	add.w	r3, sl, #3
 800679a:	f000 bd5a 	b.w	8007252 <_dtoa_r+0xb52>
 800679e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80067a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067aa:	2200      	movs	r2, #0
 80067ac:	2300      	movs	r3, #0
 80067ae:	f7fa f8fb 	bl	80009a8 <__aeabi_dcmpeq>
 80067b2:	4607      	mov	r7, r0
 80067b4:	b158      	cbz	r0, 80067ce <_dtoa_r+0xce>
 80067b6:	2301      	movs	r3, #1
 80067b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80067be:	b113      	cbz	r3, 80067c6 <_dtoa_r+0xc6>
 80067c0:	4b89      	ldr	r3, [pc, #548]	@ (80069e8 <_dtoa_r+0x2e8>)
 80067c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80069ec <_dtoa_r+0x2ec>
 80067ca:	f000 bd44 	b.w	8007256 <_dtoa_r+0xb56>
 80067ce:	ab14      	add	r3, sp, #80	@ 0x50
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	ab15      	add	r3, sp, #84	@ 0x54
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4648      	mov	r0, r9
 80067d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80067dc:	f001 f984 	bl	8007ae8 <__d2b>
 80067e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80067e4:	9003      	str	r0, [sp, #12]
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	d078      	beq.n	80068dc <_dtoa_r+0x1dc>
 80067ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80067f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80067fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006800:	9712      	str	r7, [sp, #72]	@ 0x48
 8006802:	4619      	mov	r1, r3
 8006804:	2200      	movs	r2, #0
 8006806:	4b7a      	ldr	r3, [pc, #488]	@ (80069f0 <_dtoa_r+0x2f0>)
 8006808:	f7f9 fcae 	bl	8000168 <__aeabi_dsub>
 800680c:	a36c      	add	r3, pc, #432	@ (adr r3, 80069c0 <_dtoa_r+0x2c0>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f7f9 fe61 	bl	80004d8 <__aeabi_dmul>
 8006816:	a36c      	add	r3, pc, #432	@ (adr r3, 80069c8 <_dtoa_r+0x2c8>)
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f7f9 fca6 	bl	800016c <__adddf3>
 8006820:	4604      	mov	r4, r0
 8006822:	4630      	mov	r0, r6
 8006824:	460d      	mov	r5, r1
 8006826:	f7f9 fded 	bl	8000404 <__aeabi_i2d>
 800682a:	a369      	add	r3, pc, #420	@ (adr r3, 80069d0 <_dtoa_r+0x2d0>)
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	f7f9 fe52 	bl	80004d8 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4620      	mov	r0, r4
 800683a:	4629      	mov	r1, r5
 800683c:	f7f9 fc96 	bl	800016c <__adddf3>
 8006840:	4604      	mov	r4, r0
 8006842:	460d      	mov	r5, r1
 8006844:	f7fa f8f8 	bl	8000a38 <__aeabi_d2iz>
 8006848:	2200      	movs	r2, #0
 800684a:	4607      	mov	r7, r0
 800684c:	2300      	movs	r3, #0
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7fa f8b3 	bl	80009bc <__aeabi_dcmplt>
 8006856:	b140      	cbz	r0, 800686a <_dtoa_r+0x16a>
 8006858:	4638      	mov	r0, r7
 800685a:	f7f9 fdd3 	bl	8000404 <__aeabi_i2d>
 800685e:	4622      	mov	r2, r4
 8006860:	462b      	mov	r3, r5
 8006862:	f7fa f8a1 	bl	80009a8 <__aeabi_dcmpeq>
 8006866:	b900      	cbnz	r0, 800686a <_dtoa_r+0x16a>
 8006868:	3f01      	subs	r7, #1
 800686a:	2f16      	cmp	r7, #22
 800686c:	d854      	bhi.n	8006918 <_dtoa_r+0x218>
 800686e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006872:	4b60      	ldr	r3, [pc, #384]	@ (80069f4 <_dtoa_r+0x2f4>)
 8006874:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f7fa f89e 	bl	80009bc <__aeabi_dcmplt>
 8006880:	2800      	cmp	r0, #0
 8006882:	d04b      	beq.n	800691c <_dtoa_r+0x21c>
 8006884:	2300      	movs	r3, #0
 8006886:	3f01      	subs	r7, #1
 8006888:	930f      	str	r3, [sp, #60]	@ 0x3c
 800688a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800688c:	1b9b      	subs	r3, r3, r6
 800688e:	1e5a      	subs	r2, r3, #1
 8006890:	bf49      	itett	mi
 8006892:	f1c3 0301 	rsbmi	r3, r3, #1
 8006896:	2300      	movpl	r3, #0
 8006898:	9304      	strmi	r3, [sp, #16]
 800689a:	2300      	movmi	r3, #0
 800689c:	9209      	str	r2, [sp, #36]	@ 0x24
 800689e:	bf54      	ite	pl
 80068a0:	9304      	strpl	r3, [sp, #16]
 80068a2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80068a4:	2f00      	cmp	r7, #0
 80068a6:	db3b      	blt.n	8006920 <_dtoa_r+0x220>
 80068a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068aa:	970e      	str	r7, [sp, #56]	@ 0x38
 80068ac:	443b      	add	r3, r7
 80068ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b0:	2300      	movs	r3, #0
 80068b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80068b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068b6:	2b09      	cmp	r3, #9
 80068b8:	d865      	bhi.n	8006986 <_dtoa_r+0x286>
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	bfc4      	itt	gt
 80068be:	3b04      	subgt	r3, #4
 80068c0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80068c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068c4:	bfc8      	it	gt
 80068c6:	2400      	movgt	r4, #0
 80068c8:	f1a3 0302 	sub.w	r3, r3, #2
 80068cc:	bfd8      	it	le
 80068ce:	2401      	movle	r4, #1
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d864      	bhi.n	800699e <_dtoa_r+0x29e>
 80068d4:	e8df f003 	tbb	[pc, r3]
 80068d8:	2c385553 	.word	0x2c385553
 80068dc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80068e0:	441e      	add	r6, r3
 80068e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	bfc1      	itttt	gt
 80068ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80068ee:	fa08 f803 	lslgt.w	r8, r8, r3
 80068f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80068f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80068fa:	bfd6      	itet	le
 80068fc:	f1c3 0320 	rsble	r3, r3, #32
 8006900:	ea48 0003 	orrgt.w	r0, r8, r3
 8006904:	fa04 f003 	lslle.w	r0, r4, r3
 8006908:	f7f9 fd6c 	bl	80003e4 <__aeabi_ui2d>
 800690c:	2201      	movs	r2, #1
 800690e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006912:	3e01      	subs	r6, #1
 8006914:	9212      	str	r2, [sp, #72]	@ 0x48
 8006916:	e774      	b.n	8006802 <_dtoa_r+0x102>
 8006918:	2301      	movs	r3, #1
 800691a:	e7b5      	b.n	8006888 <_dtoa_r+0x188>
 800691c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800691e:	e7b4      	b.n	800688a <_dtoa_r+0x18a>
 8006920:	9b04      	ldr	r3, [sp, #16]
 8006922:	1bdb      	subs	r3, r3, r7
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	427b      	negs	r3, r7
 8006928:	930a      	str	r3, [sp, #40]	@ 0x28
 800692a:	2300      	movs	r3, #0
 800692c:	930e      	str	r3, [sp, #56]	@ 0x38
 800692e:	e7c1      	b.n	80068b4 <_dtoa_r+0x1b4>
 8006930:	2301      	movs	r3, #1
 8006932:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006934:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006936:	eb07 0b03 	add.w	fp, r7, r3
 800693a:	f10b 0301 	add.w	r3, fp, #1
 800693e:	2b01      	cmp	r3, #1
 8006940:	9308      	str	r3, [sp, #32]
 8006942:	bfb8      	it	lt
 8006944:	2301      	movlt	r3, #1
 8006946:	e006      	b.n	8006956 <_dtoa_r+0x256>
 8006948:	2301      	movs	r3, #1
 800694a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800694c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800694e:	2b00      	cmp	r3, #0
 8006950:	dd28      	ble.n	80069a4 <_dtoa_r+0x2a4>
 8006952:	469b      	mov	fp, r3
 8006954:	9308      	str	r3, [sp, #32]
 8006956:	2100      	movs	r1, #0
 8006958:	2204      	movs	r2, #4
 800695a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800695e:	f102 0514 	add.w	r5, r2, #20
 8006962:	429d      	cmp	r5, r3
 8006964:	d926      	bls.n	80069b4 <_dtoa_r+0x2b4>
 8006966:	6041      	str	r1, [r0, #4]
 8006968:	4648      	mov	r0, r9
 800696a:	f000 fd9b 	bl	80074a4 <_Balloc>
 800696e:	4682      	mov	sl, r0
 8006970:	2800      	cmp	r0, #0
 8006972:	d143      	bne.n	80069fc <_dtoa_r+0x2fc>
 8006974:	4602      	mov	r2, r0
 8006976:	f240 11af 	movw	r1, #431	@ 0x1af
 800697a:	4b1f      	ldr	r3, [pc, #124]	@ (80069f8 <_dtoa_r+0x2f8>)
 800697c:	e6d4      	b.n	8006728 <_dtoa_r+0x28>
 800697e:	2300      	movs	r3, #0
 8006980:	e7e3      	b.n	800694a <_dtoa_r+0x24a>
 8006982:	2300      	movs	r3, #0
 8006984:	e7d5      	b.n	8006932 <_dtoa_r+0x232>
 8006986:	2401      	movs	r4, #1
 8006988:	2300      	movs	r3, #0
 800698a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800698c:	9320      	str	r3, [sp, #128]	@ 0x80
 800698e:	f04f 3bff 	mov.w	fp, #4294967295
 8006992:	2200      	movs	r2, #0
 8006994:	2312      	movs	r3, #18
 8006996:	f8cd b020 	str.w	fp, [sp, #32]
 800699a:	9221      	str	r2, [sp, #132]	@ 0x84
 800699c:	e7db      	b.n	8006956 <_dtoa_r+0x256>
 800699e:	2301      	movs	r3, #1
 80069a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069a2:	e7f4      	b.n	800698e <_dtoa_r+0x28e>
 80069a4:	f04f 0b01 	mov.w	fp, #1
 80069a8:	465b      	mov	r3, fp
 80069aa:	f8cd b020 	str.w	fp, [sp, #32]
 80069ae:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80069b2:	e7d0      	b.n	8006956 <_dtoa_r+0x256>
 80069b4:	3101      	adds	r1, #1
 80069b6:	0052      	lsls	r2, r2, #1
 80069b8:	e7d1      	b.n	800695e <_dtoa_r+0x25e>
 80069ba:	bf00      	nop
 80069bc:	f3af 8000 	nop.w
 80069c0:	636f4361 	.word	0x636f4361
 80069c4:	3fd287a7 	.word	0x3fd287a7
 80069c8:	8b60c8b3 	.word	0x8b60c8b3
 80069cc:	3fc68a28 	.word	0x3fc68a28
 80069d0:	509f79fb 	.word	0x509f79fb
 80069d4:	3fd34413 	.word	0x3fd34413
 80069d8:	080083c7 	.word	0x080083c7
 80069dc:	080083de 	.word	0x080083de
 80069e0:	7ff00000 	.word	0x7ff00000
 80069e4:	080083c3 	.word	0x080083c3
 80069e8:	08008397 	.word	0x08008397
 80069ec:	08008396 	.word	0x08008396
 80069f0:	3ff80000 	.word	0x3ff80000
 80069f4:	08008530 	.word	0x08008530
 80069f8:	08008436 	.word	0x08008436
 80069fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	9b08      	ldr	r3, [sp, #32]
 8006a04:	2b0e      	cmp	r3, #14
 8006a06:	f200 80a1 	bhi.w	8006b4c <_dtoa_r+0x44c>
 8006a0a:	2c00      	cmp	r4, #0
 8006a0c:	f000 809e 	beq.w	8006b4c <_dtoa_r+0x44c>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	dd33      	ble.n	8006a7c <_dtoa_r+0x37c>
 8006a14:	4b9c      	ldr	r3, [pc, #624]	@ (8006c88 <_dtoa_r+0x588>)
 8006a16:	f007 020f 	and.w	r2, r7, #15
 8006a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a1e:	05f8      	lsls	r0, r7, #23
 8006a20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a24:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006a28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a2c:	d516      	bpl.n	8006a5c <_dtoa_r+0x35c>
 8006a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a32:	4b96      	ldr	r3, [pc, #600]	@ (8006c8c <_dtoa_r+0x58c>)
 8006a34:	2603      	movs	r6, #3
 8006a36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a3a:	f7f9 fe77 	bl	800072c <__aeabi_ddiv>
 8006a3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a42:	f004 040f 	and.w	r4, r4, #15
 8006a46:	4d91      	ldr	r5, [pc, #580]	@ (8006c8c <_dtoa_r+0x58c>)
 8006a48:	b954      	cbnz	r4, 8006a60 <_dtoa_r+0x360>
 8006a4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a52:	f7f9 fe6b 	bl	800072c <__aeabi_ddiv>
 8006a56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a5a:	e028      	b.n	8006aae <_dtoa_r+0x3ae>
 8006a5c:	2602      	movs	r6, #2
 8006a5e:	e7f2      	b.n	8006a46 <_dtoa_r+0x346>
 8006a60:	07e1      	lsls	r1, r4, #31
 8006a62:	d508      	bpl.n	8006a76 <_dtoa_r+0x376>
 8006a64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a6c:	f7f9 fd34 	bl	80004d8 <__aeabi_dmul>
 8006a70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a74:	3601      	adds	r6, #1
 8006a76:	1064      	asrs	r4, r4, #1
 8006a78:	3508      	adds	r5, #8
 8006a7a:	e7e5      	b.n	8006a48 <_dtoa_r+0x348>
 8006a7c:	f000 80af 	beq.w	8006bde <_dtoa_r+0x4de>
 8006a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a84:	427c      	negs	r4, r7
 8006a86:	4b80      	ldr	r3, [pc, #512]	@ (8006c88 <_dtoa_r+0x588>)
 8006a88:	f004 020f 	and.w	r2, r4, #15
 8006a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fd20 	bl	80004d8 <__aeabi_dmul>
 8006a98:	2602      	movs	r6, #2
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006aa0:	4d7a      	ldr	r5, [pc, #488]	@ (8006c8c <_dtoa_r+0x58c>)
 8006aa2:	1124      	asrs	r4, r4, #4
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	f040 808f 	bne.w	8006bc8 <_dtoa_r+0x4c8>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1d3      	bne.n	8006a56 <_dtoa_r+0x356>
 8006aae:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006ab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8094 	beq.w	8006be2 <_dtoa_r+0x4e2>
 8006aba:	2200      	movs	r2, #0
 8006abc:	4620      	mov	r0, r4
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4b73      	ldr	r3, [pc, #460]	@ (8006c90 <_dtoa_r+0x590>)
 8006ac2:	f7f9 ff7b 	bl	80009bc <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f000 808b 	beq.w	8006be2 <_dtoa_r+0x4e2>
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8087 	beq.w	8006be2 <_dtoa_r+0x4e2>
 8006ad4:	f1bb 0f00 	cmp.w	fp, #0
 8006ad8:	dd34      	ble.n	8006b44 <_dtoa_r+0x444>
 8006ada:	4620      	mov	r0, r4
 8006adc:	2200      	movs	r2, #0
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8006c94 <_dtoa_r+0x594>)
 8006ae2:	f7f9 fcf9 	bl	80004d8 <__aeabi_dmul>
 8006ae6:	465c      	mov	r4, fp
 8006ae8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006aec:	f107 38ff 	add.w	r8, r7, #4294967295
 8006af0:	3601      	adds	r6, #1
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7f9 fc86 	bl	8000404 <__aeabi_i2d>
 8006af8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006afc:	f7f9 fcec 	bl	80004d8 <__aeabi_dmul>
 8006b00:	2200      	movs	r2, #0
 8006b02:	4b65      	ldr	r3, [pc, #404]	@ (8006c98 <_dtoa_r+0x598>)
 8006b04:	f7f9 fb32 	bl	800016c <__adddf3>
 8006b08:	4605      	mov	r5, r0
 8006b0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	d16a      	bne.n	8006be8 <_dtoa_r+0x4e8>
 8006b12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b16:	2200      	movs	r2, #0
 8006b18:	4b60      	ldr	r3, [pc, #384]	@ (8006c9c <_dtoa_r+0x59c>)
 8006b1a:	f7f9 fb25 	bl	8000168 <__aeabi_dsub>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b26:	462a      	mov	r2, r5
 8006b28:	4633      	mov	r3, r6
 8006b2a:	f7f9 ff65 	bl	80009f8 <__aeabi_dcmpgt>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	f040 8298 	bne.w	8007064 <_dtoa_r+0x964>
 8006b34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b38:	462a      	mov	r2, r5
 8006b3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b3e:	f7f9 ff3d 	bl	80009bc <__aeabi_dcmplt>
 8006b42:	bb38      	cbnz	r0, 8006b94 <_dtoa_r+0x494>
 8006b44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006b4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f2c0 8157 	blt.w	8006e02 <_dtoa_r+0x702>
 8006b54:	2f0e      	cmp	r7, #14
 8006b56:	f300 8154 	bgt.w	8006e02 <_dtoa_r+0x702>
 8006b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c88 <_dtoa_r+0x588>)
 8006b5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f280 80e5 	bge.w	8006d3a <_dtoa_r+0x63a>
 8006b70:	9b08      	ldr	r3, [sp, #32]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f300 80e1 	bgt.w	8006d3a <_dtoa_r+0x63a>
 8006b78:	d10c      	bne.n	8006b94 <_dtoa_r+0x494>
 8006b7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	4b46      	ldr	r3, [pc, #280]	@ (8006c9c <_dtoa_r+0x59c>)
 8006b82:	f7f9 fca9 	bl	80004d8 <__aeabi_dmul>
 8006b86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b8a:	f7f9 ff2b 	bl	80009e4 <__aeabi_dcmpge>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f000 8266 	beq.w	8007060 <_dtoa_r+0x960>
 8006b94:	2400      	movs	r4, #0
 8006b96:	4625      	mov	r5, r4
 8006b98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b9a:	4656      	mov	r6, sl
 8006b9c:	ea6f 0803 	mvn.w	r8, r3
 8006ba0:	2700      	movs	r7, #0
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4648      	mov	r0, r9
 8006ba6:	f000 fcbd 	bl	8007524 <_Bfree>
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	f000 80bd 	beq.w	8006d2a <_dtoa_r+0x62a>
 8006bb0:	b12f      	cbz	r7, 8006bbe <_dtoa_r+0x4be>
 8006bb2:	42af      	cmp	r7, r5
 8006bb4:	d003      	beq.n	8006bbe <_dtoa_r+0x4be>
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	4648      	mov	r0, r9
 8006bba:	f000 fcb3 	bl	8007524 <_Bfree>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4648      	mov	r0, r9
 8006bc2:	f000 fcaf 	bl	8007524 <_Bfree>
 8006bc6:	e0b0      	b.n	8006d2a <_dtoa_r+0x62a>
 8006bc8:	07e2      	lsls	r2, r4, #31
 8006bca:	d505      	bpl.n	8006bd8 <_dtoa_r+0x4d8>
 8006bcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bd0:	f7f9 fc82 	bl	80004d8 <__aeabi_dmul>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	3601      	adds	r6, #1
 8006bd8:	1064      	asrs	r4, r4, #1
 8006bda:	3508      	adds	r5, #8
 8006bdc:	e762      	b.n	8006aa4 <_dtoa_r+0x3a4>
 8006bde:	2602      	movs	r6, #2
 8006be0:	e765      	b.n	8006aae <_dtoa_r+0x3ae>
 8006be2:	46b8      	mov	r8, r7
 8006be4:	9c08      	ldr	r4, [sp, #32]
 8006be6:	e784      	b.n	8006af2 <_dtoa_r+0x3f2>
 8006be8:	4b27      	ldr	r3, [pc, #156]	@ (8006c88 <_dtoa_r+0x588>)
 8006bea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bf4:	4454      	add	r4, sl
 8006bf6:	2900      	cmp	r1, #0
 8006bf8:	d054      	beq.n	8006ca4 <_dtoa_r+0x5a4>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	4928      	ldr	r1, [pc, #160]	@ (8006ca0 <_dtoa_r+0x5a0>)
 8006bfe:	f7f9 fd95 	bl	800072c <__aeabi_ddiv>
 8006c02:	4633      	mov	r3, r6
 8006c04:	462a      	mov	r2, r5
 8006c06:	f7f9 faaf 	bl	8000168 <__aeabi_dsub>
 8006c0a:	4656      	mov	r6, sl
 8006c0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c14:	f7f9 ff10 	bl	8000a38 <__aeabi_d2iz>
 8006c18:	4605      	mov	r5, r0
 8006c1a:	f7f9 fbf3 	bl	8000404 <__aeabi_i2d>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c26:	f7f9 fa9f 	bl	8000168 <__aeabi_dsub>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	3530      	adds	r5, #48	@ 0x30
 8006c30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c38:	f806 5b01 	strb.w	r5, [r6], #1
 8006c3c:	f7f9 febe 	bl	80009bc <__aeabi_dcmplt>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d172      	bne.n	8006d2a <_dtoa_r+0x62a>
 8006c44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c48:	2000      	movs	r0, #0
 8006c4a:	4911      	ldr	r1, [pc, #68]	@ (8006c90 <_dtoa_r+0x590>)
 8006c4c:	f7f9 fa8c 	bl	8000168 <__aeabi_dsub>
 8006c50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c54:	f7f9 feb2 	bl	80009bc <__aeabi_dcmplt>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	f040 80b4 	bne.w	8006dc6 <_dtoa_r+0x6c6>
 8006c5e:	42a6      	cmp	r6, r4
 8006c60:	f43f af70 	beq.w	8006b44 <_dtoa_r+0x444>
 8006c64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c94 <_dtoa_r+0x594>)
 8006c6c:	f7f9 fc34 	bl	80004d8 <__aeabi_dmul>
 8006c70:	2200      	movs	r2, #0
 8006c72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c7a:	4b06      	ldr	r3, [pc, #24]	@ (8006c94 <_dtoa_r+0x594>)
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c84:	e7c4      	b.n	8006c10 <_dtoa_r+0x510>
 8006c86:	bf00      	nop
 8006c88:	08008530 	.word	0x08008530
 8006c8c:	08008508 	.word	0x08008508
 8006c90:	3ff00000 	.word	0x3ff00000
 8006c94:	40240000 	.word	0x40240000
 8006c98:	401c0000 	.word	0x401c0000
 8006c9c:	40140000 	.word	0x40140000
 8006ca0:	3fe00000 	.word	0x3fe00000
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f7f9 fc16 	bl	80004d8 <__aeabi_dmul>
 8006cac:	4656      	mov	r6, sl
 8006cae:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cb2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb8:	f7f9 febe 	bl	8000a38 <__aeabi_d2iz>
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	f7f9 fba1 	bl	8000404 <__aeabi_i2d>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cca:	f7f9 fa4d 	bl	8000168 <__aeabi_dsub>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	3530      	adds	r5, #48	@ 0x30
 8006cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8006cd8:	42a6      	cmp	r6, r4
 8006cda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	d124      	bne.n	8006d2e <_dtoa_r+0x62e>
 8006ce4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ce8:	4bae      	ldr	r3, [pc, #696]	@ (8006fa4 <_dtoa_r+0x8a4>)
 8006cea:	f7f9 fa3f 	bl	800016c <__adddf3>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cf6:	f7f9 fe7f 	bl	80009f8 <__aeabi_dcmpgt>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d163      	bne.n	8006dc6 <_dtoa_r+0x6c6>
 8006cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d02:	2000      	movs	r0, #0
 8006d04:	49a7      	ldr	r1, [pc, #668]	@ (8006fa4 <_dtoa_r+0x8a4>)
 8006d06:	f7f9 fa2f 	bl	8000168 <__aeabi_dsub>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d12:	f7f9 fe53 	bl	80009bc <__aeabi_dcmplt>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f43f af14 	beq.w	8006b44 <_dtoa_r+0x444>
 8006d1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d1e:	1e73      	subs	r3, r6, #1
 8006d20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d26:	2b30      	cmp	r3, #48	@ 0x30
 8006d28:	d0f8      	beq.n	8006d1c <_dtoa_r+0x61c>
 8006d2a:	4647      	mov	r7, r8
 8006d2c:	e03b      	b.n	8006da6 <_dtoa_r+0x6a6>
 8006d2e:	4b9e      	ldr	r3, [pc, #632]	@ (8006fa8 <_dtoa_r+0x8a8>)
 8006d30:	f7f9 fbd2 	bl	80004d8 <__aeabi_dmul>
 8006d34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d38:	e7bc      	b.n	8006cb4 <_dtoa_r+0x5b4>
 8006d3a:	4656      	mov	r6, sl
 8006d3c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d44:	4620      	mov	r0, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7f9 fcf0 	bl	800072c <__aeabi_ddiv>
 8006d4c:	f7f9 fe74 	bl	8000a38 <__aeabi_d2iz>
 8006d50:	4680      	mov	r8, r0
 8006d52:	f7f9 fb57 	bl	8000404 <__aeabi_i2d>
 8006d56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d5a:	f7f9 fbbd 	bl	80004d8 <__aeabi_dmul>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 f9ff 	bl	8000168 <__aeabi_dsub>
 8006d6a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d6e:	9d08      	ldr	r5, [sp, #32]
 8006d70:	f806 4b01 	strb.w	r4, [r6], #1
 8006d74:	eba6 040a 	sub.w	r4, r6, sl
 8006d78:	42a5      	cmp	r5, r4
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	d133      	bne.n	8006de8 <_dtoa_r+0x6e8>
 8006d80:	f7f9 f9f4 	bl	800016c <__adddf3>
 8006d84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	f7f9 fe34 	bl	80009f8 <__aeabi_dcmpgt>
 8006d90:	b9c0      	cbnz	r0, 8006dc4 <_dtoa_r+0x6c4>
 8006d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 fe05 	bl	80009a8 <__aeabi_dcmpeq>
 8006d9e:	b110      	cbz	r0, 8006da6 <_dtoa_r+0x6a6>
 8006da0:	f018 0f01 	tst.w	r8, #1
 8006da4:	d10e      	bne.n	8006dc4 <_dtoa_r+0x6c4>
 8006da6:	4648      	mov	r0, r9
 8006da8:	9903      	ldr	r1, [sp, #12]
 8006daa:	f000 fbbb 	bl	8007524 <_Bfree>
 8006dae:	2300      	movs	r3, #0
 8006db0:	7033      	strb	r3, [r6, #0]
 8006db2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006db4:	3701      	adds	r7, #1
 8006db6:	601f      	str	r7, [r3, #0]
 8006db8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 824b 	beq.w	8007256 <_dtoa_r+0xb56>
 8006dc0:	601e      	str	r6, [r3, #0]
 8006dc2:	e248      	b.n	8007256 <_dtoa_r+0xb56>
 8006dc4:	46b8      	mov	r8, r7
 8006dc6:	4633      	mov	r3, r6
 8006dc8:	461e      	mov	r6, r3
 8006dca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dce:	2a39      	cmp	r2, #57	@ 0x39
 8006dd0:	d106      	bne.n	8006de0 <_dtoa_r+0x6e0>
 8006dd2:	459a      	cmp	sl, r3
 8006dd4:	d1f8      	bne.n	8006dc8 <_dtoa_r+0x6c8>
 8006dd6:	2230      	movs	r2, #48	@ 0x30
 8006dd8:	f108 0801 	add.w	r8, r8, #1
 8006ddc:	f88a 2000 	strb.w	r2, [sl]
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	3201      	adds	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e7a0      	b.n	8006d2a <_dtoa_r+0x62a>
 8006de8:	2200      	movs	r2, #0
 8006dea:	4b6f      	ldr	r3, [pc, #444]	@ (8006fa8 <_dtoa_r+0x8a8>)
 8006dec:	f7f9 fb74 	bl	80004d8 <__aeabi_dmul>
 8006df0:	2200      	movs	r2, #0
 8006df2:	2300      	movs	r3, #0
 8006df4:	4604      	mov	r4, r0
 8006df6:	460d      	mov	r5, r1
 8006df8:	f7f9 fdd6 	bl	80009a8 <__aeabi_dcmpeq>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d09f      	beq.n	8006d40 <_dtoa_r+0x640>
 8006e00:	e7d1      	b.n	8006da6 <_dtoa_r+0x6a6>
 8006e02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	f000 80ea 	beq.w	8006fde <_dtoa_r+0x8de>
 8006e0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e0c:	2a01      	cmp	r2, #1
 8006e0e:	f300 80cd 	bgt.w	8006fac <_dtoa_r+0x8ac>
 8006e12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	f000 80c1 	beq.w	8006f9c <_dtoa_r+0x89c>
 8006e1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e20:	9e04      	ldr	r6, [sp, #16]
 8006e22:	9a04      	ldr	r2, [sp, #16]
 8006e24:	2101      	movs	r1, #1
 8006e26:	441a      	add	r2, r3
 8006e28:	9204      	str	r2, [sp, #16]
 8006e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	441a      	add	r2, r3
 8006e30:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e32:	f000 fc2b 	bl	800768c <__i2b>
 8006e36:	4605      	mov	r5, r0
 8006e38:	b166      	cbz	r6, 8006e54 <_dtoa_r+0x754>
 8006e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dd09      	ble.n	8006e54 <_dtoa_r+0x754>
 8006e40:	42b3      	cmp	r3, r6
 8006e42:	bfa8      	it	ge
 8006e44:	4633      	movge	r3, r6
 8006e46:	9a04      	ldr	r2, [sp, #16]
 8006e48:	1af6      	subs	r6, r6, r3
 8006e4a:	1ad2      	subs	r2, r2, r3
 8006e4c:	9204      	str	r2, [sp, #16]
 8006e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e56:	b30b      	cbz	r3, 8006e9c <_dtoa_r+0x79c>
 8006e58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80c6 	beq.w	8006fec <_dtoa_r+0x8ec>
 8006e60:	2c00      	cmp	r4, #0
 8006e62:	f000 80c0 	beq.w	8006fe6 <_dtoa_r+0x8e6>
 8006e66:	4629      	mov	r1, r5
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4648      	mov	r0, r9
 8006e6c:	f000 fcc6 	bl	80077fc <__pow5mult>
 8006e70:	9a03      	ldr	r2, [sp, #12]
 8006e72:	4601      	mov	r1, r0
 8006e74:	4605      	mov	r5, r0
 8006e76:	4648      	mov	r0, r9
 8006e78:	f000 fc1e 	bl	80076b8 <__multiply>
 8006e7c:	9903      	ldr	r1, [sp, #12]
 8006e7e:	4680      	mov	r8, r0
 8006e80:	4648      	mov	r0, r9
 8006e82:	f000 fb4f 	bl	8007524 <_Bfree>
 8006e86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e88:	1b1b      	subs	r3, r3, r4
 8006e8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e8c:	f000 80b1 	beq.w	8006ff2 <_dtoa_r+0x8f2>
 8006e90:	4641      	mov	r1, r8
 8006e92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e94:	4648      	mov	r0, r9
 8006e96:	f000 fcb1 	bl	80077fc <__pow5mult>
 8006e9a:	9003      	str	r0, [sp, #12]
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	4648      	mov	r0, r9
 8006ea0:	f000 fbf4 	bl	800768c <__i2b>
 8006ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 81d8 	beq.w	800725e <_dtoa_r+0xb5e>
 8006eae:	461a      	mov	r2, r3
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	f000 fca2 	bl	80077fc <__pow5mult>
 8006eb8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006eba:	4604      	mov	r4, r0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f300 809f 	bgt.w	8007000 <_dtoa_r+0x900>
 8006ec2:	9b06      	ldr	r3, [sp, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f040 8097 	bne.w	8006ff8 <_dtoa_r+0x8f8>
 8006eca:	9b07      	ldr	r3, [sp, #28]
 8006ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f040 8093 	bne.w	8006ffc <_dtoa_r+0x8fc>
 8006ed6:	9b07      	ldr	r3, [sp, #28]
 8006ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006edc:	0d1b      	lsrs	r3, r3, #20
 8006ede:	051b      	lsls	r3, r3, #20
 8006ee0:	b133      	cbz	r3, 8006ef0 <_dtoa_r+0x7f0>
 8006ee2:	9b04      	ldr	r3, [sp, #16]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eea:	3301      	adds	r3, #1
 8006eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eee:	2301      	movs	r3, #1
 8006ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 81b8 	beq.w	800726a <_dtoa_r+0xb6a>
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f00:	6918      	ldr	r0, [r3, #16]
 8006f02:	f000 fb77 	bl	80075f4 <__hi0bits>
 8006f06:	f1c0 0020 	rsb	r0, r0, #32
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	4418      	add	r0, r3
 8006f0e:	f010 001f 	ands.w	r0, r0, #31
 8006f12:	f000 8082 	beq.w	800701a <_dtoa_r+0x91a>
 8006f16:	f1c0 0320 	rsb	r3, r0, #32
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	dd73      	ble.n	8007006 <_dtoa_r+0x906>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	f1c0 001c 	rsb	r0, r0, #28
 8006f24:	4403      	add	r3, r0
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f2a:	4406      	add	r6, r0
 8006f2c:	4403      	add	r3, r0
 8006f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	dd05      	ble.n	8006f42 <_dtoa_r+0x842>
 8006f36:	461a      	mov	r2, r3
 8006f38:	4648      	mov	r0, r9
 8006f3a:	9903      	ldr	r1, [sp, #12]
 8006f3c:	f000 fcb8 	bl	80078b0 <__lshift>
 8006f40:	9003      	str	r0, [sp, #12]
 8006f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	dd05      	ble.n	8006f54 <_dtoa_r+0x854>
 8006f48:	4621      	mov	r1, r4
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4648      	mov	r0, r9
 8006f4e:	f000 fcaf 	bl	80078b0 <__lshift>
 8006f52:	4604      	mov	r4, r0
 8006f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d061      	beq.n	800701e <_dtoa_r+0x91e>
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	9803      	ldr	r0, [sp, #12]
 8006f5e:	f000 fd13 	bl	8007988 <__mcmp>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	da5b      	bge.n	800701e <_dtoa_r+0x91e>
 8006f66:	2300      	movs	r3, #0
 8006f68:	220a      	movs	r2, #10
 8006f6a:	4648      	mov	r0, r9
 8006f6c:	9903      	ldr	r1, [sp, #12]
 8006f6e:	f000 fafb 	bl	8007568 <__multadd>
 8006f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f74:	f107 38ff 	add.w	r8, r7, #4294967295
 8006f78:	9003      	str	r0, [sp, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8177 	beq.w	800726e <_dtoa_r+0xb6e>
 8006f80:	4629      	mov	r1, r5
 8006f82:	2300      	movs	r3, #0
 8006f84:	220a      	movs	r2, #10
 8006f86:	4648      	mov	r0, r9
 8006f88:	f000 faee 	bl	8007568 <__multadd>
 8006f8c:	f1bb 0f00 	cmp.w	fp, #0
 8006f90:	4605      	mov	r5, r0
 8006f92:	dc6f      	bgt.n	8007074 <_dtoa_r+0x974>
 8006f94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	dc49      	bgt.n	800702e <_dtoa_r+0x92e>
 8006f9a:	e06b      	b.n	8007074 <_dtoa_r+0x974>
 8006f9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006fa2:	e73c      	b.n	8006e1e <_dtoa_r+0x71e>
 8006fa4:	3fe00000 	.word	0x3fe00000
 8006fa8:	40240000 	.word	0x40240000
 8006fac:	9b08      	ldr	r3, [sp, #32]
 8006fae:	1e5c      	subs	r4, r3, #1
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb2:	42a3      	cmp	r3, r4
 8006fb4:	db09      	blt.n	8006fca <_dtoa_r+0x8ca>
 8006fb6:	1b1c      	subs	r4, r3, r4
 8006fb8:	9b08      	ldr	r3, [sp, #32]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f6bf af30 	bge.w	8006e20 <_dtoa_r+0x720>
 8006fc0:	9b04      	ldr	r3, [sp, #16]
 8006fc2:	9a08      	ldr	r2, [sp, #32]
 8006fc4:	1a9e      	subs	r6, r3, r2
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e72b      	b.n	8006e22 <_dtoa_r+0x722>
 8006fca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fce:	1ae3      	subs	r3, r4, r3
 8006fd0:	441a      	add	r2, r3
 8006fd2:	940a      	str	r4, [sp, #40]	@ 0x28
 8006fd4:	9e04      	ldr	r6, [sp, #16]
 8006fd6:	2400      	movs	r4, #0
 8006fd8:	9b08      	ldr	r3, [sp, #32]
 8006fda:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fdc:	e721      	b.n	8006e22 <_dtoa_r+0x722>
 8006fde:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fe0:	9e04      	ldr	r6, [sp, #16]
 8006fe2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006fe4:	e728      	b.n	8006e38 <_dtoa_r+0x738>
 8006fe6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006fea:	e751      	b.n	8006e90 <_dtoa_r+0x790>
 8006fec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fee:	9903      	ldr	r1, [sp, #12]
 8006ff0:	e750      	b.n	8006e94 <_dtoa_r+0x794>
 8006ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ff6:	e751      	b.n	8006e9c <_dtoa_r+0x79c>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e779      	b.n	8006ef0 <_dtoa_r+0x7f0>
 8006ffc:	9b06      	ldr	r3, [sp, #24]
 8006ffe:	e777      	b.n	8006ef0 <_dtoa_r+0x7f0>
 8007000:	2300      	movs	r3, #0
 8007002:	930a      	str	r3, [sp, #40]	@ 0x28
 8007004:	e779      	b.n	8006efa <_dtoa_r+0x7fa>
 8007006:	d093      	beq.n	8006f30 <_dtoa_r+0x830>
 8007008:	9a04      	ldr	r2, [sp, #16]
 800700a:	331c      	adds	r3, #28
 800700c:	441a      	add	r2, r3
 800700e:	9204      	str	r2, [sp, #16]
 8007010:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007012:	441e      	add	r6, r3
 8007014:	441a      	add	r2, r3
 8007016:	9209      	str	r2, [sp, #36]	@ 0x24
 8007018:	e78a      	b.n	8006f30 <_dtoa_r+0x830>
 800701a:	4603      	mov	r3, r0
 800701c:	e7f4      	b.n	8007008 <_dtoa_r+0x908>
 800701e:	9b08      	ldr	r3, [sp, #32]
 8007020:	46b8      	mov	r8, r7
 8007022:	2b00      	cmp	r3, #0
 8007024:	dc20      	bgt.n	8007068 <_dtoa_r+0x968>
 8007026:	469b      	mov	fp, r3
 8007028:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800702a:	2b02      	cmp	r3, #2
 800702c:	dd1e      	ble.n	800706c <_dtoa_r+0x96c>
 800702e:	f1bb 0f00 	cmp.w	fp, #0
 8007032:	f47f adb1 	bne.w	8006b98 <_dtoa_r+0x498>
 8007036:	4621      	mov	r1, r4
 8007038:	465b      	mov	r3, fp
 800703a:	2205      	movs	r2, #5
 800703c:	4648      	mov	r0, r9
 800703e:	f000 fa93 	bl	8007568 <__multadd>
 8007042:	4601      	mov	r1, r0
 8007044:	4604      	mov	r4, r0
 8007046:	9803      	ldr	r0, [sp, #12]
 8007048:	f000 fc9e 	bl	8007988 <__mcmp>
 800704c:	2800      	cmp	r0, #0
 800704e:	f77f ada3 	ble.w	8006b98 <_dtoa_r+0x498>
 8007052:	4656      	mov	r6, sl
 8007054:	2331      	movs	r3, #49	@ 0x31
 8007056:	f108 0801 	add.w	r8, r8, #1
 800705a:	f806 3b01 	strb.w	r3, [r6], #1
 800705e:	e59f      	b.n	8006ba0 <_dtoa_r+0x4a0>
 8007060:	46b8      	mov	r8, r7
 8007062:	9c08      	ldr	r4, [sp, #32]
 8007064:	4625      	mov	r5, r4
 8007066:	e7f4      	b.n	8007052 <_dtoa_r+0x952>
 8007068:	f8dd b020 	ldr.w	fp, [sp, #32]
 800706c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 8101 	beq.w	8007276 <_dtoa_r+0xb76>
 8007074:	2e00      	cmp	r6, #0
 8007076:	dd05      	ble.n	8007084 <_dtoa_r+0x984>
 8007078:	4629      	mov	r1, r5
 800707a:	4632      	mov	r2, r6
 800707c:	4648      	mov	r0, r9
 800707e:	f000 fc17 	bl	80078b0 <__lshift>
 8007082:	4605      	mov	r5, r0
 8007084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d05c      	beq.n	8007144 <_dtoa_r+0xa44>
 800708a:	4648      	mov	r0, r9
 800708c:	6869      	ldr	r1, [r5, #4]
 800708e:	f000 fa09 	bl	80074a4 <_Balloc>
 8007092:	4606      	mov	r6, r0
 8007094:	b928      	cbnz	r0, 80070a2 <_dtoa_r+0x9a2>
 8007096:	4602      	mov	r2, r0
 8007098:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800709c:	4b80      	ldr	r3, [pc, #512]	@ (80072a0 <_dtoa_r+0xba0>)
 800709e:	f7ff bb43 	b.w	8006728 <_dtoa_r+0x28>
 80070a2:	692a      	ldr	r2, [r5, #16]
 80070a4:	f105 010c 	add.w	r1, r5, #12
 80070a8:	3202      	adds	r2, #2
 80070aa:	0092      	lsls	r2, r2, #2
 80070ac:	300c      	adds	r0, #12
 80070ae:	f000 fe2b 	bl	8007d08 <memcpy>
 80070b2:	2201      	movs	r2, #1
 80070b4:	4631      	mov	r1, r6
 80070b6:	4648      	mov	r0, r9
 80070b8:	f000 fbfa 	bl	80078b0 <__lshift>
 80070bc:	462f      	mov	r7, r5
 80070be:	4605      	mov	r5, r0
 80070c0:	f10a 0301 	add.w	r3, sl, #1
 80070c4:	9304      	str	r3, [sp, #16]
 80070c6:	eb0a 030b 	add.w	r3, sl, fp
 80070ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80070cc:	9b06      	ldr	r3, [sp, #24]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	4621      	mov	r1, r4
 80070d8:	9803      	ldr	r0, [sp, #12]
 80070da:	f103 3bff 	add.w	fp, r3, #4294967295
 80070de:	f7ff fa84 	bl	80065ea <quorem>
 80070e2:	4603      	mov	r3, r0
 80070e4:	4639      	mov	r1, r7
 80070e6:	3330      	adds	r3, #48	@ 0x30
 80070e8:	9006      	str	r0, [sp, #24]
 80070ea:	9803      	ldr	r0, [sp, #12]
 80070ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ee:	f000 fc4b 	bl	8007988 <__mcmp>
 80070f2:	462a      	mov	r2, r5
 80070f4:	9008      	str	r0, [sp, #32]
 80070f6:	4621      	mov	r1, r4
 80070f8:	4648      	mov	r0, r9
 80070fa:	f000 fc61 	bl	80079c0 <__mdiff>
 80070fe:	68c2      	ldr	r2, [r0, #12]
 8007100:	4606      	mov	r6, r0
 8007102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007104:	bb02      	cbnz	r2, 8007148 <_dtoa_r+0xa48>
 8007106:	4601      	mov	r1, r0
 8007108:	9803      	ldr	r0, [sp, #12]
 800710a:	f000 fc3d 	bl	8007988 <__mcmp>
 800710e:	4602      	mov	r2, r0
 8007110:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007112:	4631      	mov	r1, r6
 8007114:	4648      	mov	r0, r9
 8007116:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800711a:	f000 fa03 	bl	8007524 <_Bfree>
 800711e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007120:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007122:	9e04      	ldr	r6, [sp, #16]
 8007124:	ea42 0103 	orr.w	r1, r2, r3
 8007128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712a:	4319      	orrs	r1, r3
 800712c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800712e:	d10d      	bne.n	800714c <_dtoa_r+0xa4c>
 8007130:	2b39      	cmp	r3, #57	@ 0x39
 8007132:	d027      	beq.n	8007184 <_dtoa_r+0xa84>
 8007134:	9a08      	ldr	r2, [sp, #32]
 8007136:	2a00      	cmp	r2, #0
 8007138:	dd01      	ble.n	800713e <_dtoa_r+0xa3e>
 800713a:	9b06      	ldr	r3, [sp, #24]
 800713c:	3331      	adds	r3, #49	@ 0x31
 800713e:	f88b 3000 	strb.w	r3, [fp]
 8007142:	e52e      	b.n	8006ba2 <_dtoa_r+0x4a2>
 8007144:	4628      	mov	r0, r5
 8007146:	e7b9      	b.n	80070bc <_dtoa_r+0x9bc>
 8007148:	2201      	movs	r2, #1
 800714a:	e7e2      	b.n	8007112 <_dtoa_r+0xa12>
 800714c:	9908      	ldr	r1, [sp, #32]
 800714e:	2900      	cmp	r1, #0
 8007150:	db04      	blt.n	800715c <_dtoa_r+0xa5c>
 8007152:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007154:	4301      	orrs	r1, r0
 8007156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007158:	4301      	orrs	r1, r0
 800715a:	d120      	bne.n	800719e <_dtoa_r+0xa9e>
 800715c:	2a00      	cmp	r2, #0
 800715e:	ddee      	ble.n	800713e <_dtoa_r+0xa3e>
 8007160:	2201      	movs	r2, #1
 8007162:	9903      	ldr	r1, [sp, #12]
 8007164:	4648      	mov	r0, r9
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	f000 fba2 	bl	80078b0 <__lshift>
 800716c:	4621      	mov	r1, r4
 800716e:	9003      	str	r0, [sp, #12]
 8007170:	f000 fc0a 	bl	8007988 <__mcmp>
 8007174:	2800      	cmp	r0, #0
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	dc02      	bgt.n	8007180 <_dtoa_r+0xa80>
 800717a:	d1e0      	bne.n	800713e <_dtoa_r+0xa3e>
 800717c:	07da      	lsls	r2, r3, #31
 800717e:	d5de      	bpl.n	800713e <_dtoa_r+0xa3e>
 8007180:	2b39      	cmp	r3, #57	@ 0x39
 8007182:	d1da      	bne.n	800713a <_dtoa_r+0xa3a>
 8007184:	2339      	movs	r3, #57	@ 0x39
 8007186:	f88b 3000 	strb.w	r3, [fp]
 800718a:	4633      	mov	r3, r6
 800718c:	461e      	mov	r6, r3
 800718e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007192:	3b01      	subs	r3, #1
 8007194:	2a39      	cmp	r2, #57	@ 0x39
 8007196:	d04e      	beq.n	8007236 <_dtoa_r+0xb36>
 8007198:	3201      	adds	r2, #1
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e501      	b.n	8006ba2 <_dtoa_r+0x4a2>
 800719e:	2a00      	cmp	r2, #0
 80071a0:	dd03      	ble.n	80071aa <_dtoa_r+0xaaa>
 80071a2:	2b39      	cmp	r3, #57	@ 0x39
 80071a4:	d0ee      	beq.n	8007184 <_dtoa_r+0xa84>
 80071a6:	3301      	adds	r3, #1
 80071a8:	e7c9      	b.n	800713e <_dtoa_r+0xa3e>
 80071aa:	9a04      	ldr	r2, [sp, #16]
 80071ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071b2:	428a      	cmp	r2, r1
 80071b4:	d028      	beq.n	8007208 <_dtoa_r+0xb08>
 80071b6:	2300      	movs	r3, #0
 80071b8:	220a      	movs	r2, #10
 80071ba:	9903      	ldr	r1, [sp, #12]
 80071bc:	4648      	mov	r0, r9
 80071be:	f000 f9d3 	bl	8007568 <__multadd>
 80071c2:	42af      	cmp	r7, r5
 80071c4:	9003      	str	r0, [sp, #12]
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	f04f 020a 	mov.w	r2, #10
 80071ce:	4639      	mov	r1, r7
 80071d0:	4648      	mov	r0, r9
 80071d2:	d107      	bne.n	80071e4 <_dtoa_r+0xae4>
 80071d4:	f000 f9c8 	bl	8007568 <__multadd>
 80071d8:	4607      	mov	r7, r0
 80071da:	4605      	mov	r5, r0
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	3301      	adds	r3, #1
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	e777      	b.n	80070d4 <_dtoa_r+0x9d4>
 80071e4:	f000 f9c0 	bl	8007568 <__multadd>
 80071e8:	4629      	mov	r1, r5
 80071ea:	4607      	mov	r7, r0
 80071ec:	2300      	movs	r3, #0
 80071ee:	220a      	movs	r2, #10
 80071f0:	4648      	mov	r0, r9
 80071f2:	f000 f9b9 	bl	8007568 <__multadd>
 80071f6:	4605      	mov	r5, r0
 80071f8:	e7f0      	b.n	80071dc <_dtoa_r+0xadc>
 80071fa:	f1bb 0f00 	cmp.w	fp, #0
 80071fe:	bfcc      	ite	gt
 8007200:	465e      	movgt	r6, fp
 8007202:	2601      	movle	r6, #1
 8007204:	2700      	movs	r7, #0
 8007206:	4456      	add	r6, sl
 8007208:	2201      	movs	r2, #1
 800720a:	9903      	ldr	r1, [sp, #12]
 800720c:	4648      	mov	r0, r9
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	f000 fb4e 	bl	80078b0 <__lshift>
 8007214:	4621      	mov	r1, r4
 8007216:	9003      	str	r0, [sp, #12]
 8007218:	f000 fbb6 	bl	8007988 <__mcmp>
 800721c:	2800      	cmp	r0, #0
 800721e:	dcb4      	bgt.n	800718a <_dtoa_r+0xa8a>
 8007220:	d102      	bne.n	8007228 <_dtoa_r+0xb28>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	07db      	lsls	r3, r3, #31
 8007226:	d4b0      	bmi.n	800718a <_dtoa_r+0xa8a>
 8007228:	4633      	mov	r3, r6
 800722a:	461e      	mov	r6, r3
 800722c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007230:	2a30      	cmp	r2, #48	@ 0x30
 8007232:	d0fa      	beq.n	800722a <_dtoa_r+0xb2a>
 8007234:	e4b5      	b.n	8006ba2 <_dtoa_r+0x4a2>
 8007236:	459a      	cmp	sl, r3
 8007238:	d1a8      	bne.n	800718c <_dtoa_r+0xa8c>
 800723a:	2331      	movs	r3, #49	@ 0x31
 800723c:	f108 0801 	add.w	r8, r8, #1
 8007240:	f88a 3000 	strb.w	r3, [sl]
 8007244:	e4ad      	b.n	8006ba2 <_dtoa_r+0x4a2>
 8007246:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007248:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80072a4 <_dtoa_r+0xba4>
 800724c:	b11b      	cbz	r3, 8007256 <_dtoa_r+0xb56>
 800724e:	f10a 0308 	add.w	r3, sl, #8
 8007252:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	4650      	mov	r0, sl
 8007258:	b017      	add	sp, #92	@ 0x5c
 800725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007260:	2b01      	cmp	r3, #1
 8007262:	f77f ae2e 	ble.w	8006ec2 <_dtoa_r+0x7c2>
 8007266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007268:	930a      	str	r3, [sp, #40]	@ 0x28
 800726a:	2001      	movs	r0, #1
 800726c:	e64d      	b.n	8006f0a <_dtoa_r+0x80a>
 800726e:	f1bb 0f00 	cmp.w	fp, #0
 8007272:	f77f aed9 	ble.w	8007028 <_dtoa_r+0x928>
 8007276:	4656      	mov	r6, sl
 8007278:	4621      	mov	r1, r4
 800727a:	9803      	ldr	r0, [sp, #12]
 800727c:	f7ff f9b5 	bl	80065ea <quorem>
 8007280:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007284:	f806 3b01 	strb.w	r3, [r6], #1
 8007288:	eba6 020a 	sub.w	r2, r6, sl
 800728c:	4593      	cmp	fp, r2
 800728e:	ddb4      	ble.n	80071fa <_dtoa_r+0xafa>
 8007290:	2300      	movs	r3, #0
 8007292:	220a      	movs	r2, #10
 8007294:	4648      	mov	r0, r9
 8007296:	9903      	ldr	r1, [sp, #12]
 8007298:	f000 f966 	bl	8007568 <__multadd>
 800729c:	9003      	str	r0, [sp, #12]
 800729e:	e7eb      	b.n	8007278 <_dtoa_r+0xb78>
 80072a0:	08008436 	.word	0x08008436
 80072a4:	080083ba 	.word	0x080083ba

080072a8 <_free_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4605      	mov	r5, r0
 80072ac:	2900      	cmp	r1, #0
 80072ae:	d040      	beq.n	8007332 <_free_r+0x8a>
 80072b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b4:	1f0c      	subs	r4, r1, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	bfb8      	it	lt
 80072ba:	18e4      	addlt	r4, r4, r3
 80072bc:	f000 f8e6 	bl	800748c <__malloc_lock>
 80072c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007334 <_free_r+0x8c>)
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	b933      	cbnz	r3, 80072d4 <_free_r+0x2c>
 80072c6:	6063      	str	r3, [r4, #4]
 80072c8:	6014      	str	r4, [r2, #0]
 80072ca:	4628      	mov	r0, r5
 80072cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072d0:	f000 b8e2 	b.w	8007498 <__malloc_unlock>
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	d908      	bls.n	80072ea <_free_r+0x42>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	1821      	adds	r1, r4, r0
 80072dc:	428b      	cmp	r3, r1
 80072de:	bf01      	itttt	eq
 80072e0:	6819      	ldreq	r1, [r3, #0]
 80072e2:	685b      	ldreq	r3, [r3, #4]
 80072e4:	1809      	addeq	r1, r1, r0
 80072e6:	6021      	streq	r1, [r4, #0]
 80072e8:	e7ed      	b.n	80072c6 <_free_r+0x1e>
 80072ea:	461a      	mov	r2, r3
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	b10b      	cbz	r3, 80072f4 <_free_r+0x4c>
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	d9fa      	bls.n	80072ea <_free_r+0x42>
 80072f4:	6811      	ldr	r1, [r2, #0]
 80072f6:	1850      	adds	r0, r2, r1
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d10b      	bne.n	8007314 <_free_r+0x6c>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	4401      	add	r1, r0
 8007300:	1850      	adds	r0, r2, r1
 8007302:	4283      	cmp	r3, r0
 8007304:	6011      	str	r1, [r2, #0]
 8007306:	d1e0      	bne.n	80072ca <_free_r+0x22>
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	4408      	add	r0, r1
 800730e:	6010      	str	r0, [r2, #0]
 8007310:	6053      	str	r3, [r2, #4]
 8007312:	e7da      	b.n	80072ca <_free_r+0x22>
 8007314:	d902      	bls.n	800731c <_free_r+0x74>
 8007316:	230c      	movs	r3, #12
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	e7d6      	b.n	80072ca <_free_r+0x22>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	1821      	adds	r1, r4, r0
 8007320:	428b      	cmp	r3, r1
 8007322:	bf01      	itttt	eq
 8007324:	6819      	ldreq	r1, [r3, #0]
 8007326:	685b      	ldreq	r3, [r3, #4]
 8007328:	1809      	addeq	r1, r1, r0
 800732a:	6021      	streq	r1, [r4, #0]
 800732c:	6063      	str	r3, [r4, #4]
 800732e:	6054      	str	r4, [r2, #4]
 8007330:	e7cb      	b.n	80072ca <_free_r+0x22>
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	20000614 	.word	0x20000614

08007338 <malloc>:
 8007338:	4b02      	ldr	r3, [pc, #8]	@ (8007344 <malloc+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f000 b825 	b.w	800738c <_malloc_r>
 8007342:	bf00      	nop
 8007344:	20000018 	.word	0x20000018

08007348 <sbrk_aligned>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4e0f      	ldr	r6, [pc, #60]	@ (8007388 <sbrk_aligned+0x40>)
 800734c:	460c      	mov	r4, r1
 800734e:	6831      	ldr	r1, [r6, #0]
 8007350:	4605      	mov	r5, r0
 8007352:	b911      	cbnz	r1, 800735a <sbrk_aligned+0x12>
 8007354:	f000 fcc8 	bl	8007ce8 <_sbrk_r>
 8007358:	6030      	str	r0, [r6, #0]
 800735a:	4621      	mov	r1, r4
 800735c:	4628      	mov	r0, r5
 800735e:	f000 fcc3 	bl	8007ce8 <_sbrk_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	d103      	bne.n	800736e <sbrk_aligned+0x26>
 8007366:	f04f 34ff 	mov.w	r4, #4294967295
 800736a:	4620      	mov	r0, r4
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	1cc4      	adds	r4, r0, #3
 8007370:	f024 0403 	bic.w	r4, r4, #3
 8007374:	42a0      	cmp	r0, r4
 8007376:	d0f8      	beq.n	800736a <sbrk_aligned+0x22>
 8007378:	1a21      	subs	r1, r4, r0
 800737a:	4628      	mov	r0, r5
 800737c:	f000 fcb4 	bl	8007ce8 <_sbrk_r>
 8007380:	3001      	adds	r0, #1
 8007382:	d1f2      	bne.n	800736a <sbrk_aligned+0x22>
 8007384:	e7ef      	b.n	8007366 <sbrk_aligned+0x1e>
 8007386:	bf00      	nop
 8007388:	20000610 	.word	0x20000610

0800738c <_malloc_r>:
 800738c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007390:	1ccd      	adds	r5, r1, #3
 8007392:	f025 0503 	bic.w	r5, r5, #3
 8007396:	3508      	adds	r5, #8
 8007398:	2d0c      	cmp	r5, #12
 800739a:	bf38      	it	cc
 800739c:	250c      	movcc	r5, #12
 800739e:	2d00      	cmp	r5, #0
 80073a0:	4606      	mov	r6, r0
 80073a2:	db01      	blt.n	80073a8 <_malloc_r+0x1c>
 80073a4:	42a9      	cmp	r1, r5
 80073a6:	d904      	bls.n	80073b2 <_malloc_r+0x26>
 80073a8:	230c      	movs	r3, #12
 80073aa:	6033      	str	r3, [r6, #0]
 80073ac:	2000      	movs	r0, #0
 80073ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007488 <_malloc_r+0xfc>
 80073b6:	f000 f869 	bl	800748c <__malloc_lock>
 80073ba:	f8d8 3000 	ldr.w	r3, [r8]
 80073be:	461c      	mov	r4, r3
 80073c0:	bb44      	cbnz	r4, 8007414 <_malloc_r+0x88>
 80073c2:	4629      	mov	r1, r5
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7ff ffbf 	bl	8007348 <sbrk_aligned>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	4604      	mov	r4, r0
 80073ce:	d158      	bne.n	8007482 <_malloc_r+0xf6>
 80073d0:	f8d8 4000 	ldr.w	r4, [r8]
 80073d4:	4627      	mov	r7, r4
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	d143      	bne.n	8007462 <_malloc_r+0xd6>
 80073da:	2c00      	cmp	r4, #0
 80073dc:	d04b      	beq.n	8007476 <_malloc_r+0xea>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	4639      	mov	r1, r7
 80073e2:	4630      	mov	r0, r6
 80073e4:	eb04 0903 	add.w	r9, r4, r3
 80073e8:	f000 fc7e 	bl	8007ce8 <_sbrk_r>
 80073ec:	4581      	cmp	r9, r0
 80073ee:	d142      	bne.n	8007476 <_malloc_r+0xea>
 80073f0:	6821      	ldr	r1, [r4, #0]
 80073f2:	4630      	mov	r0, r6
 80073f4:	1a6d      	subs	r5, r5, r1
 80073f6:	4629      	mov	r1, r5
 80073f8:	f7ff ffa6 	bl	8007348 <sbrk_aligned>
 80073fc:	3001      	adds	r0, #1
 80073fe:	d03a      	beq.n	8007476 <_malloc_r+0xea>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	442b      	add	r3, r5
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	f8d8 3000 	ldr.w	r3, [r8]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	bb62      	cbnz	r2, 8007468 <_malloc_r+0xdc>
 800740e:	f8c8 7000 	str.w	r7, [r8]
 8007412:	e00f      	b.n	8007434 <_malloc_r+0xa8>
 8007414:	6822      	ldr	r2, [r4, #0]
 8007416:	1b52      	subs	r2, r2, r5
 8007418:	d420      	bmi.n	800745c <_malloc_r+0xd0>
 800741a:	2a0b      	cmp	r2, #11
 800741c:	d917      	bls.n	800744e <_malloc_r+0xc2>
 800741e:	1961      	adds	r1, r4, r5
 8007420:	42a3      	cmp	r3, r4
 8007422:	6025      	str	r5, [r4, #0]
 8007424:	bf18      	it	ne
 8007426:	6059      	strne	r1, [r3, #4]
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	bf08      	it	eq
 800742c:	f8c8 1000 	streq.w	r1, [r8]
 8007430:	5162      	str	r2, [r4, r5]
 8007432:	604b      	str	r3, [r1, #4]
 8007434:	4630      	mov	r0, r6
 8007436:	f000 f82f 	bl	8007498 <__malloc_unlock>
 800743a:	f104 000b 	add.w	r0, r4, #11
 800743e:	1d23      	adds	r3, r4, #4
 8007440:	f020 0007 	bic.w	r0, r0, #7
 8007444:	1ac2      	subs	r2, r0, r3
 8007446:	bf1c      	itt	ne
 8007448:	1a1b      	subne	r3, r3, r0
 800744a:	50a3      	strne	r3, [r4, r2]
 800744c:	e7af      	b.n	80073ae <_malloc_r+0x22>
 800744e:	6862      	ldr	r2, [r4, #4]
 8007450:	42a3      	cmp	r3, r4
 8007452:	bf0c      	ite	eq
 8007454:	f8c8 2000 	streq.w	r2, [r8]
 8007458:	605a      	strne	r2, [r3, #4]
 800745a:	e7eb      	b.n	8007434 <_malloc_r+0xa8>
 800745c:	4623      	mov	r3, r4
 800745e:	6864      	ldr	r4, [r4, #4]
 8007460:	e7ae      	b.n	80073c0 <_malloc_r+0x34>
 8007462:	463c      	mov	r4, r7
 8007464:	687f      	ldr	r7, [r7, #4]
 8007466:	e7b6      	b.n	80073d6 <_malloc_r+0x4a>
 8007468:	461a      	mov	r2, r3
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	42a3      	cmp	r3, r4
 800746e:	d1fb      	bne.n	8007468 <_malloc_r+0xdc>
 8007470:	2300      	movs	r3, #0
 8007472:	6053      	str	r3, [r2, #4]
 8007474:	e7de      	b.n	8007434 <_malloc_r+0xa8>
 8007476:	230c      	movs	r3, #12
 8007478:	4630      	mov	r0, r6
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	f000 f80c 	bl	8007498 <__malloc_unlock>
 8007480:	e794      	b.n	80073ac <_malloc_r+0x20>
 8007482:	6005      	str	r5, [r0, #0]
 8007484:	e7d6      	b.n	8007434 <_malloc_r+0xa8>
 8007486:	bf00      	nop
 8007488:	20000614 	.word	0x20000614

0800748c <__malloc_lock>:
 800748c:	4801      	ldr	r0, [pc, #4]	@ (8007494 <__malloc_lock+0x8>)
 800748e:	f7ff b89c 	b.w	80065ca <__retarget_lock_acquire_recursive>
 8007492:	bf00      	nop
 8007494:	2000060c 	.word	0x2000060c

08007498 <__malloc_unlock>:
 8007498:	4801      	ldr	r0, [pc, #4]	@ (80074a0 <__malloc_unlock+0x8>)
 800749a:	f7ff b897 	b.w	80065cc <__retarget_lock_release_recursive>
 800749e:	bf00      	nop
 80074a0:	2000060c 	.word	0x2000060c

080074a4 <_Balloc>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	69c6      	ldr	r6, [r0, #28]
 80074a8:	4604      	mov	r4, r0
 80074aa:	460d      	mov	r5, r1
 80074ac:	b976      	cbnz	r6, 80074cc <_Balloc+0x28>
 80074ae:	2010      	movs	r0, #16
 80074b0:	f7ff ff42 	bl	8007338 <malloc>
 80074b4:	4602      	mov	r2, r0
 80074b6:	61e0      	str	r0, [r4, #28]
 80074b8:	b920      	cbnz	r0, 80074c4 <_Balloc+0x20>
 80074ba:	216b      	movs	r1, #107	@ 0x6b
 80074bc:	4b17      	ldr	r3, [pc, #92]	@ (800751c <_Balloc+0x78>)
 80074be:	4818      	ldr	r0, [pc, #96]	@ (8007520 <_Balloc+0x7c>)
 80074c0:	f000 fc30 	bl	8007d24 <__assert_func>
 80074c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c8:	6006      	str	r6, [r0, #0]
 80074ca:	60c6      	str	r6, [r0, #12]
 80074cc:	69e6      	ldr	r6, [r4, #28]
 80074ce:	68f3      	ldr	r3, [r6, #12]
 80074d0:	b183      	cbz	r3, 80074f4 <_Balloc+0x50>
 80074d2:	69e3      	ldr	r3, [r4, #28]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074da:	b9b8      	cbnz	r0, 800750c <_Balloc+0x68>
 80074dc:	2101      	movs	r1, #1
 80074de:	fa01 f605 	lsl.w	r6, r1, r5
 80074e2:	1d72      	adds	r2, r6, #5
 80074e4:	4620      	mov	r0, r4
 80074e6:	0092      	lsls	r2, r2, #2
 80074e8:	f000 fc3a 	bl	8007d60 <_calloc_r>
 80074ec:	b160      	cbz	r0, 8007508 <_Balloc+0x64>
 80074ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074f2:	e00e      	b.n	8007512 <_Balloc+0x6e>
 80074f4:	2221      	movs	r2, #33	@ 0x21
 80074f6:	2104      	movs	r1, #4
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fc31 	bl	8007d60 <_calloc_r>
 80074fe:	69e3      	ldr	r3, [r4, #28]
 8007500:	60f0      	str	r0, [r6, #12]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e4      	bne.n	80074d2 <_Balloc+0x2e>
 8007508:	2000      	movs	r0, #0
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	6802      	ldr	r2, [r0, #0]
 800750e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007512:	2300      	movs	r3, #0
 8007514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007518:	e7f7      	b.n	800750a <_Balloc+0x66>
 800751a:	bf00      	nop
 800751c:	080083c7 	.word	0x080083c7
 8007520:	08008447 	.word	0x08008447

08007524 <_Bfree>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	69c6      	ldr	r6, [r0, #28]
 8007528:	4605      	mov	r5, r0
 800752a:	460c      	mov	r4, r1
 800752c:	b976      	cbnz	r6, 800754c <_Bfree+0x28>
 800752e:	2010      	movs	r0, #16
 8007530:	f7ff ff02 	bl	8007338 <malloc>
 8007534:	4602      	mov	r2, r0
 8007536:	61e8      	str	r0, [r5, #28]
 8007538:	b920      	cbnz	r0, 8007544 <_Bfree+0x20>
 800753a:	218f      	movs	r1, #143	@ 0x8f
 800753c:	4b08      	ldr	r3, [pc, #32]	@ (8007560 <_Bfree+0x3c>)
 800753e:	4809      	ldr	r0, [pc, #36]	@ (8007564 <_Bfree+0x40>)
 8007540:	f000 fbf0 	bl	8007d24 <__assert_func>
 8007544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007548:	6006      	str	r6, [r0, #0]
 800754a:	60c6      	str	r6, [r0, #12]
 800754c:	b13c      	cbz	r4, 800755e <_Bfree+0x3a>
 800754e:	69eb      	ldr	r3, [r5, #28]
 8007550:	6862      	ldr	r2, [r4, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007558:	6021      	str	r1, [r4, #0]
 800755a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	080083c7 	.word	0x080083c7
 8007564:	08008447 	.word	0x08008447

08007568 <__multadd>:
 8007568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756c:	4607      	mov	r7, r0
 800756e:	460c      	mov	r4, r1
 8007570:	461e      	mov	r6, r3
 8007572:	2000      	movs	r0, #0
 8007574:	690d      	ldr	r5, [r1, #16]
 8007576:	f101 0c14 	add.w	ip, r1, #20
 800757a:	f8dc 3000 	ldr.w	r3, [ip]
 800757e:	3001      	adds	r0, #1
 8007580:	b299      	uxth	r1, r3
 8007582:	fb02 6101 	mla	r1, r2, r1, r6
 8007586:	0c1e      	lsrs	r6, r3, #16
 8007588:	0c0b      	lsrs	r3, r1, #16
 800758a:	fb02 3306 	mla	r3, r2, r6, r3
 800758e:	b289      	uxth	r1, r1
 8007590:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007594:	4285      	cmp	r5, r0
 8007596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800759a:	f84c 1b04 	str.w	r1, [ip], #4
 800759e:	dcec      	bgt.n	800757a <__multadd+0x12>
 80075a0:	b30e      	cbz	r6, 80075e6 <__multadd+0x7e>
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	dc19      	bgt.n	80075dc <__multadd+0x74>
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	4638      	mov	r0, r7
 80075ac:	3101      	adds	r1, #1
 80075ae:	f7ff ff79 	bl	80074a4 <_Balloc>
 80075b2:	4680      	mov	r8, r0
 80075b4:	b928      	cbnz	r0, 80075c2 <__multadd+0x5a>
 80075b6:	4602      	mov	r2, r0
 80075b8:	21ba      	movs	r1, #186	@ 0xba
 80075ba:	4b0c      	ldr	r3, [pc, #48]	@ (80075ec <__multadd+0x84>)
 80075bc:	480c      	ldr	r0, [pc, #48]	@ (80075f0 <__multadd+0x88>)
 80075be:	f000 fbb1 	bl	8007d24 <__assert_func>
 80075c2:	6922      	ldr	r2, [r4, #16]
 80075c4:	f104 010c 	add.w	r1, r4, #12
 80075c8:	3202      	adds	r2, #2
 80075ca:	0092      	lsls	r2, r2, #2
 80075cc:	300c      	adds	r0, #12
 80075ce:	f000 fb9b 	bl	8007d08 <memcpy>
 80075d2:	4621      	mov	r1, r4
 80075d4:	4638      	mov	r0, r7
 80075d6:	f7ff ffa5 	bl	8007524 <_Bfree>
 80075da:	4644      	mov	r4, r8
 80075dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075e0:	3501      	adds	r5, #1
 80075e2:	615e      	str	r6, [r3, #20]
 80075e4:	6125      	str	r5, [r4, #16]
 80075e6:	4620      	mov	r0, r4
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	08008436 	.word	0x08008436
 80075f0:	08008447 	.word	0x08008447

080075f4 <__hi0bits>:
 80075f4:	4603      	mov	r3, r0
 80075f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80075fa:	bf3a      	itte	cc
 80075fc:	0403      	lslcc	r3, r0, #16
 80075fe:	2010      	movcc	r0, #16
 8007600:	2000      	movcs	r0, #0
 8007602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007606:	bf3c      	itt	cc
 8007608:	021b      	lslcc	r3, r3, #8
 800760a:	3008      	addcc	r0, #8
 800760c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007610:	bf3c      	itt	cc
 8007612:	011b      	lslcc	r3, r3, #4
 8007614:	3004      	addcc	r0, #4
 8007616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800761a:	bf3c      	itt	cc
 800761c:	009b      	lslcc	r3, r3, #2
 800761e:	3002      	addcc	r0, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	db05      	blt.n	8007630 <__hi0bits+0x3c>
 8007624:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007628:	f100 0001 	add.w	r0, r0, #1
 800762c:	bf08      	it	eq
 800762e:	2020      	moveq	r0, #32
 8007630:	4770      	bx	lr

08007632 <__lo0bits>:
 8007632:	6803      	ldr	r3, [r0, #0]
 8007634:	4602      	mov	r2, r0
 8007636:	f013 0007 	ands.w	r0, r3, #7
 800763a:	d00b      	beq.n	8007654 <__lo0bits+0x22>
 800763c:	07d9      	lsls	r1, r3, #31
 800763e:	d421      	bmi.n	8007684 <__lo0bits+0x52>
 8007640:	0798      	lsls	r0, r3, #30
 8007642:	bf49      	itett	mi
 8007644:	085b      	lsrmi	r3, r3, #1
 8007646:	089b      	lsrpl	r3, r3, #2
 8007648:	2001      	movmi	r0, #1
 800764a:	6013      	strmi	r3, [r2, #0]
 800764c:	bf5c      	itt	pl
 800764e:	2002      	movpl	r0, #2
 8007650:	6013      	strpl	r3, [r2, #0]
 8007652:	4770      	bx	lr
 8007654:	b299      	uxth	r1, r3
 8007656:	b909      	cbnz	r1, 800765c <__lo0bits+0x2a>
 8007658:	2010      	movs	r0, #16
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	b2d9      	uxtb	r1, r3
 800765e:	b909      	cbnz	r1, 8007664 <__lo0bits+0x32>
 8007660:	3008      	adds	r0, #8
 8007662:	0a1b      	lsrs	r3, r3, #8
 8007664:	0719      	lsls	r1, r3, #28
 8007666:	bf04      	itt	eq
 8007668:	091b      	lsreq	r3, r3, #4
 800766a:	3004      	addeq	r0, #4
 800766c:	0799      	lsls	r1, r3, #30
 800766e:	bf04      	itt	eq
 8007670:	089b      	lsreq	r3, r3, #2
 8007672:	3002      	addeq	r0, #2
 8007674:	07d9      	lsls	r1, r3, #31
 8007676:	d403      	bmi.n	8007680 <__lo0bits+0x4e>
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	f100 0001 	add.w	r0, r0, #1
 800767e:	d003      	beq.n	8007688 <__lo0bits+0x56>
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	4770      	bx	lr
 8007684:	2000      	movs	r0, #0
 8007686:	4770      	bx	lr
 8007688:	2020      	movs	r0, #32
 800768a:	4770      	bx	lr

0800768c <__i2b>:
 800768c:	b510      	push	{r4, lr}
 800768e:	460c      	mov	r4, r1
 8007690:	2101      	movs	r1, #1
 8007692:	f7ff ff07 	bl	80074a4 <_Balloc>
 8007696:	4602      	mov	r2, r0
 8007698:	b928      	cbnz	r0, 80076a6 <__i2b+0x1a>
 800769a:	f240 1145 	movw	r1, #325	@ 0x145
 800769e:	4b04      	ldr	r3, [pc, #16]	@ (80076b0 <__i2b+0x24>)
 80076a0:	4804      	ldr	r0, [pc, #16]	@ (80076b4 <__i2b+0x28>)
 80076a2:	f000 fb3f 	bl	8007d24 <__assert_func>
 80076a6:	2301      	movs	r3, #1
 80076a8:	6144      	str	r4, [r0, #20]
 80076aa:	6103      	str	r3, [r0, #16]
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	bf00      	nop
 80076b0:	08008436 	.word	0x08008436
 80076b4:	08008447 	.word	0x08008447

080076b8 <__multiply>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4617      	mov	r7, r2
 80076be:	690a      	ldr	r2, [r1, #16]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4689      	mov	r9, r1
 80076c4:	429a      	cmp	r2, r3
 80076c6:	bfa2      	ittt	ge
 80076c8:	463b      	movge	r3, r7
 80076ca:	460f      	movge	r7, r1
 80076cc:	4699      	movge	r9, r3
 80076ce:	693d      	ldr	r5, [r7, #16]
 80076d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	eb05 060a 	add.w	r6, r5, sl
 80076dc:	42b3      	cmp	r3, r6
 80076de:	b085      	sub	sp, #20
 80076e0:	bfb8      	it	lt
 80076e2:	3101      	addlt	r1, #1
 80076e4:	f7ff fede 	bl	80074a4 <_Balloc>
 80076e8:	b930      	cbnz	r0, 80076f8 <__multiply+0x40>
 80076ea:	4602      	mov	r2, r0
 80076ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80076f0:	4b40      	ldr	r3, [pc, #256]	@ (80077f4 <__multiply+0x13c>)
 80076f2:	4841      	ldr	r0, [pc, #260]	@ (80077f8 <__multiply+0x140>)
 80076f4:	f000 fb16 	bl	8007d24 <__assert_func>
 80076f8:	f100 0414 	add.w	r4, r0, #20
 80076fc:	4623      	mov	r3, r4
 80076fe:	2200      	movs	r2, #0
 8007700:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007704:	4573      	cmp	r3, lr
 8007706:	d320      	bcc.n	800774a <__multiply+0x92>
 8007708:	f107 0814 	add.w	r8, r7, #20
 800770c:	f109 0114 	add.w	r1, r9, #20
 8007710:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007714:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007718:	9302      	str	r3, [sp, #8]
 800771a:	1beb      	subs	r3, r5, r7
 800771c:	3b15      	subs	r3, #21
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	3304      	adds	r3, #4
 8007724:	3715      	adds	r7, #21
 8007726:	42bd      	cmp	r5, r7
 8007728:	bf38      	it	cc
 800772a:	2304      	movcc	r3, #4
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	9103      	str	r1, [sp, #12]
 8007732:	428b      	cmp	r3, r1
 8007734:	d80c      	bhi.n	8007750 <__multiply+0x98>
 8007736:	2e00      	cmp	r6, #0
 8007738:	dd03      	ble.n	8007742 <__multiply+0x8a>
 800773a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800773e:	2b00      	cmp	r3, #0
 8007740:	d055      	beq.n	80077ee <__multiply+0x136>
 8007742:	6106      	str	r6, [r0, #16]
 8007744:	b005      	add	sp, #20
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	f843 2b04 	str.w	r2, [r3], #4
 800774e:	e7d9      	b.n	8007704 <__multiply+0x4c>
 8007750:	f8b1 a000 	ldrh.w	sl, [r1]
 8007754:	f1ba 0f00 	cmp.w	sl, #0
 8007758:	d01f      	beq.n	800779a <__multiply+0xe2>
 800775a:	46c4      	mov	ip, r8
 800775c:	46a1      	mov	r9, r4
 800775e:	2700      	movs	r7, #0
 8007760:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007764:	f8d9 3000 	ldr.w	r3, [r9]
 8007768:	fa1f fb82 	uxth.w	fp, r2
 800776c:	b29b      	uxth	r3, r3
 800776e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007772:	443b      	add	r3, r7
 8007774:	f8d9 7000 	ldr.w	r7, [r9]
 8007778:	0c12      	lsrs	r2, r2, #16
 800777a:	0c3f      	lsrs	r7, r7, #16
 800777c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007780:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007784:	b29b      	uxth	r3, r3
 8007786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800778a:	4565      	cmp	r5, ip
 800778c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007790:	f849 3b04 	str.w	r3, [r9], #4
 8007794:	d8e4      	bhi.n	8007760 <__multiply+0xa8>
 8007796:	9b01      	ldr	r3, [sp, #4]
 8007798:	50e7      	str	r7, [r4, r3]
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	3104      	adds	r1, #4
 800779e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d020      	beq.n	80077ea <__multiply+0x132>
 80077a8:	4647      	mov	r7, r8
 80077aa:	46a4      	mov	ip, r4
 80077ac:	f04f 0a00 	mov.w	sl, #0
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	f8b7 b000 	ldrh.w	fp, [r7]
 80077b6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	fb09 220b 	mla	r2, r9, fp, r2
 80077c0:	4452      	add	r2, sl
 80077c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077c6:	f84c 3b04 	str.w	r3, [ip], #4
 80077ca:	f857 3b04 	ldr.w	r3, [r7], #4
 80077ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077d2:	f8bc 3000 	ldrh.w	r3, [ip]
 80077d6:	42bd      	cmp	r5, r7
 80077d8:	fb09 330a 	mla	r3, r9, sl, r3
 80077dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80077e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077e4:	d8e5      	bhi.n	80077b2 <__multiply+0xfa>
 80077e6:	9a01      	ldr	r2, [sp, #4]
 80077e8:	50a3      	str	r3, [r4, r2]
 80077ea:	3404      	adds	r4, #4
 80077ec:	e79f      	b.n	800772e <__multiply+0x76>
 80077ee:	3e01      	subs	r6, #1
 80077f0:	e7a1      	b.n	8007736 <__multiply+0x7e>
 80077f2:	bf00      	nop
 80077f4:	08008436 	.word	0x08008436
 80077f8:	08008447 	.word	0x08008447

080077fc <__pow5mult>:
 80077fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007800:	4615      	mov	r5, r2
 8007802:	f012 0203 	ands.w	r2, r2, #3
 8007806:	4607      	mov	r7, r0
 8007808:	460e      	mov	r6, r1
 800780a:	d007      	beq.n	800781c <__pow5mult+0x20>
 800780c:	4c25      	ldr	r4, [pc, #148]	@ (80078a4 <__pow5mult+0xa8>)
 800780e:	3a01      	subs	r2, #1
 8007810:	2300      	movs	r3, #0
 8007812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007816:	f7ff fea7 	bl	8007568 <__multadd>
 800781a:	4606      	mov	r6, r0
 800781c:	10ad      	asrs	r5, r5, #2
 800781e:	d03d      	beq.n	800789c <__pow5mult+0xa0>
 8007820:	69fc      	ldr	r4, [r7, #28]
 8007822:	b97c      	cbnz	r4, 8007844 <__pow5mult+0x48>
 8007824:	2010      	movs	r0, #16
 8007826:	f7ff fd87 	bl	8007338 <malloc>
 800782a:	4602      	mov	r2, r0
 800782c:	61f8      	str	r0, [r7, #28]
 800782e:	b928      	cbnz	r0, 800783c <__pow5mult+0x40>
 8007830:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007834:	4b1c      	ldr	r3, [pc, #112]	@ (80078a8 <__pow5mult+0xac>)
 8007836:	481d      	ldr	r0, [pc, #116]	@ (80078ac <__pow5mult+0xb0>)
 8007838:	f000 fa74 	bl	8007d24 <__assert_func>
 800783c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007840:	6004      	str	r4, [r0, #0]
 8007842:	60c4      	str	r4, [r0, #12]
 8007844:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800784c:	b94c      	cbnz	r4, 8007862 <__pow5mult+0x66>
 800784e:	f240 2171 	movw	r1, #625	@ 0x271
 8007852:	4638      	mov	r0, r7
 8007854:	f7ff ff1a 	bl	800768c <__i2b>
 8007858:	2300      	movs	r3, #0
 800785a:	4604      	mov	r4, r0
 800785c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	f04f 0900 	mov.w	r9, #0
 8007866:	07eb      	lsls	r3, r5, #31
 8007868:	d50a      	bpl.n	8007880 <__pow5mult+0x84>
 800786a:	4631      	mov	r1, r6
 800786c:	4622      	mov	r2, r4
 800786e:	4638      	mov	r0, r7
 8007870:	f7ff ff22 	bl	80076b8 <__multiply>
 8007874:	4680      	mov	r8, r0
 8007876:	4631      	mov	r1, r6
 8007878:	4638      	mov	r0, r7
 800787a:	f7ff fe53 	bl	8007524 <_Bfree>
 800787e:	4646      	mov	r6, r8
 8007880:	106d      	asrs	r5, r5, #1
 8007882:	d00b      	beq.n	800789c <__pow5mult+0xa0>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	b938      	cbnz	r0, 8007898 <__pow5mult+0x9c>
 8007888:	4622      	mov	r2, r4
 800788a:	4621      	mov	r1, r4
 800788c:	4638      	mov	r0, r7
 800788e:	f7ff ff13 	bl	80076b8 <__multiply>
 8007892:	6020      	str	r0, [r4, #0]
 8007894:	f8c0 9000 	str.w	r9, [r0]
 8007898:	4604      	mov	r4, r0
 800789a:	e7e4      	b.n	8007866 <__pow5mult+0x6a>
 800789c:	4630      	mov	r0, r6
 800789e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a2:	bf00      	nop
 80078a4:	080084f8 	.word	0x080084f8
 80078a8:	080083c7 	.word	0x080083c7
 80078ac:	08008447 	.word	0x08008447

080078b0 <__lshift>:
 80078b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	4607      	mov	r7, r0
 80078b8:	4691      	mov	r9, r2
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	6849      	ldr	r1, [r1, #4]
 80078be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078c2:	68a3      	ldr	r3, [r4, #8]
 80078c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078c8:	f108 0601 	add.w	r6, r8, #1
 80078cc:	42b3      	cmp	r3, r6
 80078ce:	db0b      	blt.n	80078e8 <__lshift+0x38>
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff fde7 	bl	80074a4 <_Balloc>
 80078d6:	4605      	mov	r5, r0
 80078d8:	b948      	cbnz	r0, 80078ee <__lshift+0x3e>
 80078da:	4602      	mov	r2, r0
 80078dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80078e0:	4b27      	ldr	r3, [pc, #156]	@ (8007980 <__lshift+0xd0>)
 80078e2:	4828      	ldr	r0, [pc, #160]	@ (8007984 <__lshift+0xd4>)
 80078e4:	f000 fa1e 	bl	8007d24 <__assert_func>
 80078e8:	3101      	adds	r1, #1
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	e7ee      	b.n	80078cc <__lshift+0x1c>
 80078ee:	2300      	movs	r3, #0
 80078f0:	f100 0114 	add.w	r1, r0, #20
 80078f4:	f100 0210 	add.w	r2, r0, #16
 80078f8:	4618      	mov	r0, r3
 80078fa:	4553      	cmp	r3, sl
 80078fc:	db33      	blt.n	8007966 <__lshift+0xb6>
 80078fe:	6920      	ldr	r0, [r4, #16]
 8007900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007904:	f104 0314 	add.w	r3, r4, #20
 8007908:	f019 091f 	ands.w	r9, r9, #31
 800790c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007914:	d02b      	beq.n	800796e <__lshift+0xbe>
 8007916:	468a      	mov	sl, r1
 8007918:	2200      	movs	r2, #0
 800791a:	f1c9 0e20 	rsb	lr, r9, #32
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	fa00 f009 	lsl.w	r0, r0, r9
 8007924:	4310      	orrs	r0, r2
 8007926:	f84a 0b04 	str.w	r0, [sl], #4
 800792a:	f853 2b04 	ldr.w	r2, [r3], #4
 800792e:	459c      	cmp	ip, r3
 8007930:	fa22 f20e 	lsr.w	r2, r2, lr
 8007934:	d8f3      	bhi.n	800791e <__lshift+0x6e>
 8007936:	ebac 0304 	sub.w	r3, ip, r4
 800793a:	3b15      	subs	r3, #21
 800793c:	f023 0303 	bic.w	r3, r3, #3
 8007940:	3304      	adds	r3, #4
 8007942:	f104 0015 	add.w	r0, r4, #21
 8007946:	4560      	cmp	r0, ip
 8007948:	bf88      	it	hi
 800794a:	2304      	movhi	r3, #4
 800794c:	50ca      	str	r2, [r1, r3]
 800794e:	b10a      	cbz	r2, 8007954 <__lshift+0xa4>
 8007950:	f108 0602 	add.w	r6, r8, #2
 8007954:	3e01      	subs	r6, #1
 8007956:	4638      	mov	r0, r7
 8007958:	4621      	mov	r1, r4
 800795a:	612e      	str	r6, [r5, #16]
 800795c:	f7ff fde2 	bl	8007524 <_Bfree>
 8007960:	4628      	mov	r0, r5
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	f842 0f04 	str.w	r0, [r2, #4]!
 800796a:	3301      	adds	r3, #1
 800796c:	e7c5      	b.n	80078fa <__lshift+0x4a>
 800796e:	3904      	subs	r1, #4
 8007970:	f853 2b04 	ldr.w	r2, [r3], #4
 8007974:	459c      	cmp	ip, r3
 8007976:	f841 2f04 	str.w	r2, [r1, #4]!
 800797a:	d8f9      	bhi.n	8007970 <__lshift+0xc0>
 800797c:	e7ea      	b.n	8007954 <__lshift+0xa4>
 800797e:	bf00      	nop
 8007980:	08008436 	.word	0x08008436
 8007984:	08008447 	.word	0x08008447

08007988 <__mcmp>:
 8007988:	4603      	mov	r3, r0
 800798a:	690a      	ldr	r2, [r1, #16]
 800798c:	6900      	ldr	r0, [r0, #16]
 800798e:	b530      	push	{r4, r5, lr}
 8007990:	1a80      	subs	r0, r0, r2
 8007992:	d10e      	bne.n	80079b2 <__mcmp+0x2a>
 8007994:	3314      	adds	r3, #20
 8007996:	3114      	adds	r1, #20
 8007998:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800799c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079a8:	4295      	cmp	r5, r2
 80079aa:	d003      	beq.n	80079b4 <__mcmp+0x2c>
 80079ac:	d205      	bcs.n	80079ba <__mcmp+0x32>
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	bd30      	pop	{r4, r5, pc}
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d3f3      	bcc.n	80079a0 <__mcmp+0x18>
 80079b8:	e7fb      	b.n	80079b2 <__mcmp+0x2a>
 80079ba:	2001      	movs	r0, #1
 80079bc:	e7f9      	b.n	80079b2 <__mcmp+0x2a>
	...

080079c0 <__mdiff>:
 80079c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	4689      	mov	r9, r1
 80079c6:	4606      	mov	r6, r0
 80079c8:	4611      	mov	r1, r2
 80079ca:	4648      	mov	r0, r9
 80079cc:	4614      	mov	r4, r2
 80079ce:	f7ff ffdb 	bl	8007988 <__mcmp>
 80079d2:	1e05      	subs	r5, r0, #0
 80079d4:	d112      	bne.n	80079fc <__mdiff+0x3c>
 80079d6:	4629      	mov	r1, r5
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff fd63 	bl	80074a4 <_Balloc>
 80079de:	4602      	mov	r2, r0
 80079e0:	b928      	cbnz	r0, 80079ee <__mdiff+0x2e>
 80079e2:	f240 2137 	movw	r1, #567	@ 0x237
 80079e6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae0 <__mdiff+0x120>)
 80079e8:	483e      	ldr	r0, [pc, #248]	@ (8007ae4 <__mdiff+0x124>)
 80079ea:	f000 f99b 	bl	8007d24 <__assert_func>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f4:	4610      	mov	r0, r2
 80079f6:	b003      	add	sp, #12
 80079f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fc:	bfbc      	itt	lt
 80079fe:	464b      	movlt	r3, r9
 8007a00:	46a1      	movlt	r9, r4
 8007a02:	4630      	mov	r0, r6
 8007a04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a08:	bfba      	itte	lt
 8007a0a:	461c      	movlt	r4, r3
 8007a0c:	2501      	movlt	r5, #1
 8007a0e:	2500      	movge	r5, #0
 8007a10:	f7ff fd48 	bl	80074a4 <_Balloc>
 8007a14:	4602      	mov	r2, r0
 8007a16:	b918      	cbnz	r0, 8007a20 <__mdiff+0x60>
 8007a18:	f240 2145 	movw	r1, #581	@ 0x245
 8007a1c:	4b30      	ldr	r3, [pc, #192]	@ (8007ae0 <__mdiff+0x120>)
 8007a1e:	e7e3      	b.n	80079e8 <__mdiff+0x28>
 8007a20:	f100 0b14 	add.w	fp, r0, #20
 8007a24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a28:	f109 0310 	add.w	r3, r9, #16
 8007a2c:	60c5      	str	r5, [r0, #12]
 8007a2e:	f04f 0c00 	mov.w	ip, #0
 8007a32:	f109 0514 	add.w	r5, r9, #20
 8007a36:	46d9      	mov	r9, fp
 8007a38:	6926      	ldr	r6, [r4, #16]
 8007a3a:	f104 0e14 	add.w	lr, r4, #20
 8007a3e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a42:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	9b01      	ldr	r3, [sp, #4]
 8007a4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a52:	b281      	uxth	r1, r0
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	fa1f f38a 	uxth.w	r3, sl
 8007a5a:	1a5b      	subs	r3, r3, r1
 8007a5c:	0c00      	lsrs	r0, r0, #16
 8007a5e:	4463      	add	r3, ip
 8007a60:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a64:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a6e:	4576      	cmp	r6, lr
 8007a70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a74:	f849 3b04 	str.w	r3, [r9], #4
 8007a78:	d8e6      	bhi.n	8007a48 <__mdiff+0x88>
 8007a7a:	1b33      	subs	r3, r6, r4
 8007a7c:	3b15      	subs	r3, #21
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	3415      	adds	r4, #21
 8007a84:	3304      	adds	r3, #4
 8007a86:	42a6      	cmp	r6, r4
 8007a88:	bf38      	it	cc
 8007a8a:	2304      	movcc	r3, #4
 8007a8c:	441d      	add	r5, r3
 8007a8e:	445b      	add	r3, fp
 8007a90:	461e      	mov	r6, r3
 8007a92:	462c      	mov	r4, r5
 8007a94:	4544      	cmp	r4, r8
 8007a96:	d30e      	bcc.n	8007ab6 <__mdiff+0xf6>
 8007a98:	f108 0103 	add.w	r1, r8, #3
 8007a9c:	1b49      	subs	r1, r1, r5
 8007a9e:	f021 0103 	bic.w	r1, r1, #3
 8007aa2:	3d03      	subs	r5, #3
 8007aa4:	45a8      	cmp	r8, r5
 8007aa6:	bf38      	it	cc
 8007aa8:	2100      	movcc	r1, #0
 8007aaa:	440b      	add	r3, r1
 8007aac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ab0:	b199      	cbz	r1, 8007ada <__mdiff+0x11a>
 8007ab2:	6117      	str	r7, [r2, #16]
 8007ab4:	e79e      	b.n	80079f4 <__mdiff+0x34>
 8007ab6:	46e6      	mov	lr, ip
 8007ab8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007abc:	fa1f fc81 	uxth.w	ip, r1
 8007ac0:	44f4      	add	ip, lr
 8007ac2:	0c08      	lsrs	r0, r1, #16
 8007ac4:	4471      	add	r1, lr
 8007ac6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007aca:	b289      	uxth	r1, r1
 8007acc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ad0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ad4:	f846 1b04 	str.w	r1, [r6], #4
 8007ad8:	e7dc      	b.n	8007a94 <__mdiff+0xd4>
 8007ada:	3f01      	subs	r7, #1
 8007adc:	e7e6      	b.n	8007aac <__mdiff+0xec>
 8007ade:	bf00      	nop
 8007ae0:	08008436 	.word	0x08008436
 8007ae4:	08008447 	.word	0x08008447

08007ae8 <__d2b>:
 8007ae8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007aec:	2101      	movs	r1, #1
 8007aee:	4690      	mov	r8, r2
 8007af0:	4699      	mov	r9, r3
 8007af2:	9e08      	ldr	r6, [sp, #32]
 8007af4:	f7ff fcd6 	bl	80074a4 <_Balloc>
 8007af8:	4604      	mov	r4, r0
 8007afa:	b930      	cbnz	r0, 8007b0a <__d2b+0x22>
 8007afc:	4602      	mov	r2, r0
 8007afe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b02:	4b23      	ldr	r3, [pc, #140]	@ (8007b90 <__d2b+0xa8>)
 8007b04:	4823      	ldr	r0, [pc, #140]	@ (8007b94 <__d2b+0xac>)
 8007b06:	f000 f90d 	bl	8007d24 <__assert_func>
 8007b0a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b12:	b10d      	cbz	r5, 8007b18 <__d2b+0x30>
 8007b14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	f1b8 0300 	subs.w	r3, r8, #0
 8007b1e:	d024      	beq.n	8007b6a <__d2b+0x82>
 8007b20:	4668      	mov	r0, sp
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	f7ff fd85 	bl	8007632 <__lo0bits>
 8007b28:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b2c:	b1d8      	cbz	r0, 8007b66 <__d2b+0x7e>
 8007b2e:	f1c0 0320 	rsb	r3, r0, #32
 8007b32:	fa02 f303 	lsl.w	r3, r2, r3
 8007b36:	430b      	orrs	r3, r1
 8007b38:	40c2      	lsrs	r2, r0
 8007b3a:	6163      	str	r3, [r4, #20]
 8007b3c:	9201      	str	r2, [sp, #4]
 8007b3e:	9b01      	ldr	r3, [sp, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bf0c      	ite	eq
 8007b44:	2201      	moveq	r2, #1
 8007b46:	2202      	movne	r2, #2
 8007b48:	61a3      	str	r3, [r4, #24]
 8007b4a:	6122      	str	r2, [r4, #16]
 8007b4c:	b1ad      	cbz	r5, 8007b7a <__d2b+0x92>
 8007b4e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b52:	4405      	add	r5, r0
 8007b54:	6035      	str	r5, [r6, #0]
 8007b56:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5c:	6018      	str	r0, [r3, #0]
 8007b5e:	4620      	mov	r0, r4
 8007b60:	b002      	add	sp, #8
 8007b62:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007b66:	6161      	str	r1, [r4, #20]
 8007b68:	e7e9      	b.n	8007b3e <__d2b+0x56>
 8007b6a:	a801      	add	r0, sp, #4
 8007b6c:	f7ff fd61 	bl	8007632 <__lo0bits>
 8007b70:	9b01      	ldr	r3, [sp, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	6163      	str	r3, [r4, #20]
 8007b76:	3020      	adds	r0, #32
 8007b78:	e7e7      	b.n	8007b4a <__d2b+0x62>
 8007b7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b82:	6030      	str	r0, [r6, #0]
 8007b84:	6918      	ldr	r0, [r3, #16]
 8007b86:	f7ff fd35 	bl	80075f4 <__hi0bits>
 8007b8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b8e:	e7e4      	b.n	8007b5a <__d2b+0x72>
 8007b90:	08008436 	.word	0x08008436
 8007b94:	08008447 	.word	0x08008447

08007b98 <__sflush_r>:
 8007b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	0716      	lsls	r6, r2, #28
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	d454      	bmi.n	8007c50 <__sflush_r+0xb8>
 8007ba6:	684b      	ldr	r3, [r1, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc02      	bgt.n	8007bb2 <__sflush_r+0x1a>
 8007bac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd48      	ble.n	8007c44 <__sflush_r+0xac>
 8007bb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	d045      	beq.n	8007c44 <__sflush_r+0xac>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bbe:	682f      	ldr	r7, [r5, #0]
 8007bc0:	6a21      	ldr	r1, [r4, #32]
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	d030      	beq.n	8007c28 <__sflush_r+0x90>
 8007bc6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	0759      	lsls	r1, r3, #29
 8007bcc:	d505      	bpl.n	8007bda <__sflush_r+0x42>
 8007bce:	6863      	ldr	r3, [r4, #4]
 8007bd0:	1ad2      	subs	r2, r2, r3
 8007bd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bd4:	b10b      	cbz	r3, 8007bda <__sflush_r+0x42>
 8007bd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bd8:	1ad2      	subs	r2, r2, r3
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4628      	mov	r0, r5
 8007bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007be0:	6a21      	ldr	r1, [r4, #32]
 8007be2:	47b0      	blx	r6
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	d106      	bne.n	8007bf8 <__sflush_r+0x60>
 8007bea:	6829      	ldr	r1, [r5, #0]
 8007bec:	291d      	cmp	r1, #29
 8007bee:	d82b      	bhi.n	8007c48 <__sflush_r+0xb0>
 8007bf0:	4a28      	ldr	r2, [pc, #160]	@ (8007c94 <__sflush_r+0xfc>)
 8007bf2:	40ca      	lsrs	r2, r1
 8007bf4:	07d6      	lsls	r6, r2, #31
 8007bf6:	d527      	bpl.n	8007c48 <__sflush_r+0xb0>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	6062      	str	r2, [r4, #4]
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	04d9      	lsls	r1, r3, #19
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	d504      	bpl.n	8007c0e <__sflush_r+0x76>
 8007c04:	1c42      	adds	r2, r0, #1
 8007c06:	d101      	bne.n	8007c0c <__sflush_r+0x74>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b903      	cbnz	r3, 8007c0e <__sflush_r+0x76>
 8007c0c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c10:	602f      	str	r7, [r5, #0]
 8007c12:	b1b9      	cbz	r1, 8007c44 <__sflush_r+0xac>
 8007c14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	d002      	beq.n	8007c22 <__sflush_r+0x8a>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7ff fb43 	bl	80072a8 <_free_r>
 8007c22:	2300      	movs	r3, #0
 8007c24:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c26:	e00d      	b.n	8007c44 <__sflush_r+0xac>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b0      	blx	r6
 8007c2e:	4602      	mov	r2, r0
 8007c30:	1c50      	adds	r0, r2, #1
 8007c32:	d1c9      	bne.n	8007bc8 <__sflush_r+0x30>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0c6      	beq.n	8007bc8 <__sflush_r+0x30>
 8007c3a:	2b1d      	cmp	r3, #29
 8007c3c:	d001      	beq.n	8007c42 <__sflush_r+0xaa>
 8007c3e:	2b16      	cmp	r3, #22
 8007c40:	d11d      	bne.n	8007c7e <__sflush_r+0xe6>
 8007c42:	602f      	str	r7, [r5, #0]
 8007c44:	2000      	movs	r0, #0
 8007c46:	e021      	b.n	8007c8c <__sflush_r+0xf4>
 8007c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c4c:	b21b      	sxth	r3, r3
 8007c4e:	e01a      	b.n	8007c86 <__sflush_r+0xee>
 8007c50:	690f      	ldr	r7, [r1, #16]
 8007c52:	2f00      	cmp	r7, #0
 8007c54:	d0f6      	beq.n	8007c44 <__sflush_r+0xac>
 8007c56:	0793      	lsls	r3, r2, #30
 8007c58:	bf18      	it	ne
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	680e      	ldr	r6, [r1, #0]
 8007c5e:	bf08      	it	eq
 8007c60:	694b      	ldreq	r3, [r1, #20]
 8007c62:	1bf6      	subs	r6, r6, r7
 8007c64:	600f      	str	r7, [r1, #0]
 8007c66:	608b      	str	r3, [r1, #8]
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	ddeb      	ble.n	8007c44 <__sflush_r+0xac>
 8007c6c:	4633      	mov	r3, r6
 8007c6e:	463a      	mov	r2, r7
 8007c70:	4628      	mov	r0, r5
 8007c72:	6a21      	ldr	r1, [r4, #32]
 8007c74:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c78:	47e0      	blx	ip
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	dc07      	bgt.n	8007c8e <__sflush_r+0xf6>
 8007c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	81a3      	strh	r3, [r4, #12]
 8007c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8e:	4407      	add	r7, r0
 8007c90:	1a36      	subs	r6, r6, r0
 8007c92:	e7e9      	b.n	8007c68 <__sflush_r+0xd0>
 8007c94:	20400001 	.word	0x20400001

08007c98 <_fflush_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	690b      	ldr	r3, [r1, #16]
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b913      	cbnz	r3, 8007ca8 <_fflush_r+0x10>
 8007ca2:	2500      	movs	r5, #0
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	b118      	cbz	r0, 8007cb2 <_fflush_r+0x1a>
 8007caa:	6a03      	ldr	r3, [r0, #32]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <_fflush_r+0x1a>
 8007cae:	f7fe fb95 	bl	80063dc <__sinit>
 8007cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f3      	beq.n	8007ca2 <_fflush_r+0xa>
 8007cba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cbc:	07d0      	lsls	r0, r2, #31
 8007cbe:	d404      	bmi.n	8007cca <_fflush_r+0x32>
 8007cc0:	0599      	lsls	r1, r3, #22
 8007cc2:	d402      	bmi.n	8007cca <_fflush_r+0x32>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc6:	f7fe fc80 	bl	80065ca <__retarget_lock_acquire_recursive>
 8007cca:	4628      	mov	r0, r5
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f7ff ff63 	bl	8007b98 <__sflush_r>
 8007cd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	07da      	lsls	r2, r3, #31
 8007cd8:	d4e4      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	059b      	lsls	r3, r3, #22
 8007cde:	d4e1      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce2:	f7fe fc73 	bl	80065cc <__retarget_lock_release_recursive>
 8007ce6:	e7dd      	b.n	8007ca4 <_fflush_r+0xc>

08007ce8 <_sbrk_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	2300      	movs	r3, #0
 8007cec:	4d05      	ldr	r5, [pc, #20]	@ (8007d04 <_sbrk_r+0x1c>)
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	f7f9 fc56 	bl	80015a4 <_sbrk>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_sbrk_r+0x1a>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_sbrk_r+0x1a>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	20000608 	.word	0x20000608

08007d08 <memcpy>:
 8007d08:	440a      	add	r2, r1
 8007d0a:	4291      	cmp	r1, r2
 8007d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d10:	d100      	bne.n	8007d14 <memcpy+0xc>
 8007d12:	4770      	bx	lr
 8007d14:	b510      	push	{r4, lr}
 8007d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d1a:	4291      	cmp	r1, r2
 8007d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d20:	d1f9      	bne.n	8007d16 <memcpy+0xe>
 8007d22:	bd10      	pop	{r4, pc}

08007d24 <__assert_func>:
 8007d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d26:	4614      	mov	r4, r2
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <__assert_func+0x2c>)
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68d8      	ldr	r0, [r3, #12]
 8007d32:	b14c      	cbz	r4, 8007d48 <__assert_func+0x24>
 8007d34:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <__assert_func+0x30>)
 8007d36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d3a:	9100      	str	r1, [sp, #0]
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	4906      	ldr	r1, [pc, #24]	@ (8007d58 <__assert_func+0x34>)
 8007d40:	f000 f842 	bl	8007dc8 <fiprintf>
 8007d44:	f000 f852 	bl	8007dec <abort>
 8007d48:	4b04      	ldr	r3, [pc, #16]	@ (8007d5c <__assert_func+0x38>)
 8007d4a:	461c      	mov	r4, r3
 8007d4c:	e7f3      	b.n	8007d36 <__assert_func+0x12>
 8007d4e:	bf00      	nop
 8007d50:	20000018 	.word	0x20000018
 8007d54:	080084aa 	.word	0x080084aa
 8007d58:	080084b7 	.word	0x080084b7
 8007d5c:	080084e5 	.word	0x080084e5

08007d60 <_calloc_r>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	fba1 5402 	umull	r5, r4, r1, r2
 8007d66:	b934      	cbnz	r4, 8007d76 <_calloc_r+0x16>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7ff fb0f 	bl	800738c <_malloc_r>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	b928      	cbnz	r0, 8007d7e <_calloc_r+0x1e>
 8007d72:	4630      	mov	r0, r6
 8007d74:	bd70      	pop	{r4, r5, r6, pc}
 8007d76:	220c      	movs	r2, #12
 8007d78:	2600      	movs	r6, #0
 8007d7a:	6002      	str	r2, [r0, #0]
 8007d7c:	e7f9      	b.n	8007d72 <_calloc_r+0x12>
 8007d7e:	462a      	mov	r2, r5
 8007d80:	4621      	mov	r1, r4
 8007d82:	f7fe fba4 	bl	80064ce <memset>
 8007d86:	e7f4      	b.n	8007d72 <_calloc_r+0x12>

08007d88 <__ascii_mbtowc>:
 8007d88:	b082      	sub	sp, #8
 8007d8a:	b901      	cbnz	r1, 8007d8e <__ascii_mbtowc+0x6>
 8007d8c:	a901      	add	r1, sp, #4
 8007d8e:	b142      	cbz	r2, 8007da2 <__ascii_mbtowc+0x1a>
 8007d90:	b14b      	cbz	r3, 8007da6 <__ascii_mbtowc+0x1e>
 8007d92:	7813      	ldrb	r3, [r2, #0]
 8007d94:	600b      	str	r3, [r1, #0]
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	1e10      	subs	r0, r2, #0
 8007d9a:	bf18      	it	ne
 8007d9c:	2001      	movne	r0, #1
 8007d9e:	b002      	add	sp, #8
 8007da0:	4770      	bx	lr
 8007da2:	4610      	mov	r0, r2
 8007da4:	e7fb      	b.n	8007d9e <__ascii_mbtowc+0x16>
 8007da6:	f06f 0001 	mvn.w	r0, #1
 8007daa:	e7f8      	b.n	8007d9e <__ascii_mbtowc+0x16>

08007dac <__ascii_wctomb>:
 8007dac:	4603      	mov	r3, r0
 8007dae:	4608      	mov	r0, r1
 8007db0:	b141      	cbz	r1, 8007dc4 <__ascii_wctomb+0x18>
 8007db2:	2aff      	cmp	r2, #255	@ 0xff
 8007db4:	d904      	bls.n	8007dc0 <__ascii_wctomb+0x14>
 8007db6:	228a      	movs	r2, #138	@ 0x8a
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	4770      	bx	lr
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	700a      	strb	r2, [r1, #0]
 8007dc4:	4770      	bx	lr
	...

08007dc8 <fiprintf>:
 8007dc8:	b40e      	push	{r1, r2, r3}
 8007dca:	b503      	push	{r0, r1, lr}
 8007dcc:	4601      	mov	r1, r0
 8007dce:	ab03      	add	r3, sp, #12
 8007dd0:	4805      	ldr	r0, [pc, #20]	@ (8007de8 <fiprintf+0x20>)
 8007dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dd6:	6800      	ldr	r0, [r0, #0]
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	f000 f835 	bl	8007e48 <_vfiprintf_r>
 8007dde:	b002      	add	sp, #8
 8007de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de4:	b003      	add	sp, #12
 8007de6:	4770      	bx	lr
 8007de8:	20000018 	.word	0x20000018

08007dec <abort>:
 8007dec:	2006      	movs	r0, #6
 8007dee:	b508      	push	{r3, lr}
 8007df0:	f000 f9fe 	bl	80081f0 <raise>
 8007df4:	2001      	movs	r0, #1
 8007df6:	f7f9 fb60 	bl	80014ba <_exit>

08007dfa <__sfputc_r>:
 8007dfa:	6893      	ldr	r3, [r2, #8]
 8007dfc:	b410      	push	{r4}
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	6093      	str	r3, [r2, #8]
 8007e04:	da07      	bge.n	8007e16 <__sfputc_r+0x1c>
 8007e06:	6994      	ldr	r4, [r2, #24]
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	db01      	blt.n	8007e10 <__sfputc_r+0x16>
 8007e0c:	290a      	cmp	r1, #10
 8007e0e:	d102      	bne.n	8007e16 <__sfputc_r+0x1c>
 8007e10:	bc10      	pop	{r4}
 8007e12:	f000 b931 	b.w	8008078 <__swbuf_r>
 8007e16:	6813      	ldr	r3, [r2, #0]
 8007e18:	1c58      	adds	r0, r3, #1
 8007e1a:	6010      	str	r0, [r2, #0]
 8007e1c:	7019      	strb	r1, [r3, #0]
 8007e1e:	4608      	mov	r0, r1
 8007e20:	bc10      	pop	{r4}
 8007e22:	4770      	bx	lr

08007e24 <__sfputs_r>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	4606      	mov	r6, r0
 8007e28:	460f      	mov	r7, r1
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	18d5      	adds	r5, r2, r3
 8007e2e:	42ac      	cmp	r4, r5
 8007e30:	d101      	bne.n	8007e36 <__sfputs_r+0x12>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e007      	b.n	8007e46 <__sfputs_r+0x22>
 8007e36:	463a      	mov	r2, r7
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3e:	f7ff ffdc 	bl	8007dfa <__sfputc_r>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	d1f3      	bne.n	8007e2e <__sfputs_r+0xa>
 8007e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e48 <_vfiprintf_r>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	4614      	mov	r4, r2
 8007e50:	4698      	mov	r8, r3
 8007e52:	4606      	mov	r6, r0
 8007e54:	b09d      	sub	sp, #116	@ 0x74
 8007e56:	b118      	cbz	r0, 8007e60 <_vfiprintf_r+0x18>
 8007e58:	6a03      	ldr	r3, [r0, #32]
 8007e5a:	b90b      	cbnz	r3, 8007e60 <_vfiprintf_r+0x18>
 8007e5c:	f7fe fabe 	bl	80063dc <__sinit>
 8007e60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e62:	07d9      	lsls	r1, r3, #31
 8007e64:	d405      	bmi.n	8007e72 <_vfiprintf_r+0x2a>
 8007e66:	89ab      	ldrh	r3, [r5, #12]
 8007e68:	059a      	lsls	r2, r3, #22
 8007e6a:	d402      	bmi.n	8007e72 <_vfiprintf_r+0x2a>
 8007e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e6e:	f7fe fbac 	bl	80065ca <__retarget_lock_acquire_recursive>
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	071b      	lsls	r3, r3, #28
 8007e76:	d501      	bpl.n	8007e7c <_vfiprintf_r+0x34>
 8007e78:	692b      	ldr	r3, [r5, #16]
 8007e7a:	b99b      	cbnz	r3, 8007ea4 <_vfiprintf_r+0x5c>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f000 f938 	bl	80080f4 <__swsetup_r>
 8007e84:	b170      	cbz	r0, 8007ea4 <_vfiprintf_r+0x5c>
 8007e86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e88:	07dc      	lsls	r4, r3, #31
 8007e8a:	d504      	bpl.n	8007e96 <_vfiprintf_r+0x4e>
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	b01d      	add	sp, #116	@ 0x74
 8007e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e96:	89ab      	ldrh	r3, [r5, #12]
 8007e98:	0598      	lsls	r0, r3, #22
 8007e9a:	d4f7      	bmi.n	8007e8c <_vfiprintf_r+0x44>
 8007e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e9e:	f7fe fb95 	bl	80065cc <__retarget_lock_release_recursive>
 8007ea2:	e7f3      	b.n	8007e8c <_vfiprintf_r+0x44>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea8:	2320      	movs	r3, #32
 8007eaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007eae:	2330      	movs	r3, #48	@ 0x30
 8007eb0:	f04f 0901 	mov.w	r9, #1
 8007eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eb8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008064 <_vfiprintf_r+0x21c>
 8007ebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	469a      	mov	sl, r3
 8007ec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec8:	b10a      	cbz	r2, 8007ece <_vfiprintf_r+0x86>
 8007eca:	2a25      	cmp	r2, #37	@ 0x25
 8007ecc:	d1f9      	bne.n	8007ec2 <_vfiprintf_r+0x7a>
 8007ece:	ebba 0b04 	subs.w	fp, sl, r4
 8007ed2:	d00b      	beq.n	8007eec <_vfiprintf_r+0xa4>
 8007ed4:	465b      	mov	r3, fp
 8007ed6:	4622      	mov	r2, r4
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4630      	mov	r0, r6
 8007edc:	f7ff ffa2 	bl	8007e24 <__sfputs_r>
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	f000 80a7 	beq.w	8008034 <_vfiprintf_r+0x1ec>
 8007ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ee8:	445a      	add	r2, fp
 8007eea:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eec:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 809f 	beq.w	8008034 <_vfiprintf_r+0x1ec>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8007efc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f00:	f10a 0a01 	add.w	sl, sl, #1
 8007f04:	9304      	str	r3, [sp, #16]
 8007f06:	9307      	str	r3, [sp, #28]
 8007f08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f0e:	4654      	mov	r4, sl
 8007f10:	2205      	movs	r2, #5
 8007f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f16:	4853      	ldr	r0, [pc, #332]	@ (8008064 <_vfiprintf_r+0x21c>)
 8007f18:	f7fe fb59 	bl	80065ce <memchr>
 8007f1c:	9a04      	ldr	r2, [sp, #16]
 8007f1e:	b9d8      	cbnz	r0, 8007f58 <_vfiprintf_r+0x110>
 8007f20:	06d1      	lsls	r1, r2, #27
 8007f22:	bf44      	itt	mi
 8007f24:	2320      	movmi	r3, #32
 8007f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f2a:	0713      	lsls	r3, r2, #28
 8007f2c:	bf44      	itt	mi
 8007f2e:	232b      	movmi	r3, #43	@ 0x2b
 8007f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f34:	f89a 3000 	ldrb.w	r3, [sl]
 8007f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f3a:	d015      	beq.n	8007f68 <_vfiprintf_r+0x120>
 8007f3c:	4654      	mov	r4, sl
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f04f 0c0a 	mov.w	ip, #10
 8007f44:	9a07      	ldr	r2, [sp, #28]
 8007f46:	4621      	mov	r1, r4
 8007f48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f4c:	3b30      	subs	r3, #48	@ 0x30
 8007f4e:	2b09      	cmp	r3, #9
 8007f50:	d94b      	bls.n	8007fea <_vfiprintf_r+0x1a2>
 8007f52:	b1b0      	cbz	r0, 8007f82 <_vfiprintf_r+0x13a>
 8007f54:	9207      	str	r2, [sp, #28]
 8007f56:	e014      	b.n	8007f82 <_vfiprintf_r+0x13a>
 8007f58:	eba0 0308 	sub.w	r3, r0, r8
 8007f5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f60:	4313      	orrs	r3, r2
 8007f62:	46a2      	mov	sl, r4
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	e7d2      	b.n	8007f0e <_vfiprintf_r+0xc6>
 8007f68:	9b03      	ldr	r3, [sp, #12]
 8007f6a:	1d19      	adds	r1, r3, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	9103      	str	r1, [sp, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bfbb      	ittet	lt
 8007f74:	425b      	neglt	r3, r3
 8007f76:	f042 0202 	orrlt.w	r2, r2, #2
 8007f7a:	9307      	strge	r3, [sp, #28]
 8007f7c:	9307      	strlt	r3, [sp, #28]
 8007f7e:	bfb8      	it	lt
 8007f80:	9204      	strlt	r2, [sp, #16]
 8007f82:	7823      	ldrb	r3, [r4, #0]
 8007f84:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f86:	d10a      	bne.n	8007f9e <_vfiprintf_r+0x156>
 8007f88:	7863      	ldrb	r3, [r4, #1]
 8007f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f8c:	d132      	bne.n	8007ff4 <_vfiprintf_r+0x1ac>
 8007f8e:	9b03      	ldr	r3, [sp, #12]
 8007f90:	3402      	adds	r4, #2
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	9203      	str	r2, [sp, #12]
 8007f98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f9c:	9305      	str	r3, [sp, #20]
 8007f9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008068 <_vfiprintf_r+0x220>
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	7821      	ldrb	r1, [r4, #0]
 8007fa8:	f7fe fb11 	bl	80065ce <memchr>
 8007fac:	b138      	cbz	r0, 8007fbe <_vfiprintf_r+0x176>
 8007fae:	2240      	movs	r2, #64	@ 0x40
 8007fb0:	9b04      	ldr	r3, [sp, #16]
 8007fb2:	eba0 000a 	sub.w	r0, r0, sl
 8007fb6:	4082      	lsls	r2, r0
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	3401      	adds	r4, #1
 8007fbc:	9304      	str	r3, [sp, #16]
 8007fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc2:	2206      	movs	r2, #6
 8007fc4:	4829      	ldr	r0, [pc, #164]	@ (800806c <_vfiprintf_r+0x224>)
 8007fc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fca:	f7fe fb00 	bl	80065ce <memchr>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d03f      	beq.n	8008052 <_vfiprintf_r+0x20a>
 8007fd2:	4b27      	ldr	r3, [pc, #156]	@ (8008070 <_vfiprintf_r+0x228>)
 8007fd4:	bb1b      	cbnz	r3, 800801e <_vfiprintf_r+0x1d6>
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	3307      	adds	r3, #7
 8007fda:	f023 0307 	bic.w	r3, r3, #7
 8007fde:	3308      	adds	r3, #8
 8007fe0:	9303      	str	r3, [sp, #12]
 8007fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe4:	443b      	add	r3, r7
 8007fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe8:	e76a      	b.n	8007ec0 <_vfiprintf_r+0x78>
 8007fea:	460c      	mov	r4, r1
 8007fec:	2001      	movs	r0, #1
 8007fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ff2:	e7a8      	b.n	8007f46 <_vfiprintf_r+0xfe>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f04f 0c0a 	mov.w	ip, #10
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	3401      	adds	r4, #1
 8007ffe:	9305      	str	r3, [sp, #20]
 8008000:	4620      	mov	r0, r4
 8008002:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008006:	3a30      	subs	r2, #48	@ 0x30
 8008008:	2a09      	cmp	r2, #9
 800800a:	d903      	bls.n	8008014 <_vfiprintf_r+0x1cc>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0c6      	beq.n	8007f9e <_vfiprintf_r+0x156>
 8008010:	9105      	str	r1, [sp, #20]
 8008012:	e7c4      	b.n	8007f9e <_vfiprintf_r+0x156>
 8008014:	4604      	mov	r4, r0
 8008016:	2301      	movs	r3, #1
 8008018:	fb0c 2101 	mla	r1, ip, r1, r2
 800801c:	e7f0      	b.n	8008000 <_vfiprintf_r+0x1b8>
 800801e:	ab03      	add	r3, sp, #12
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	462a      	mov	r2, r5
 8008024:	4630      	mov	r0, r6
 8008026:	4b13      	ldr	r3, [pc, #76]	@ (8008074 <_vfiprintf_r+0x22c>)
 8008028:	a904      	add	r1, sp, #16
 800802a:	f7fd fd8f 	bl	8005b4c <_printf_float>
 800802e:	4607      	mov	r7, r0
 8008030:	1c78      	adds	r0, r7, #1
 8008032:	d1d6      	bne.n	8007fe2 <_vfiprintf_r+0x19a>
 8008034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008036:	07d9      	lsls	r1, r3, #31
 8008038:	d405      	bmi.n	8008046 <_vfiprintf_r+0x1fe>
 800803a:	89ab      	ldrh	r3, [r5, #12]
 800803c:	059a      	lsls	r2, r3, #22
 800803e:	d402      	bmi.n	8008046 <_vfiprintf_r+0x1fe>
 8008040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008042:	f7fe fac3 	bl	80065cc <__retarget_lock_release_recursive>
 8008046:	89ab      	ldrh	r3, [r5, #12]
 8008048:	065b      	lsls	r3, r3, #25
 800804a:	f53f af1f 	bmi.w	8007e8c <_vfiprintf_r+0x44>
 800804e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008050:	e71e      	b.n	8007e90 <_vfiprintf_r+0x48>
 8008052:	ab03      	add	r3, sp, #12
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	462a      	mov	r2, r5
 8008058:	4630      	mov	r0, r6
 800805a:	4b06      	ldr	r3, [pc, #24]	@ (8008074 <_vfiprintf_r+0x22c>)
 800805c:	a904      	add	r1, sp, #16
 800805e:	f7fe f813 	bl	8006088 <_printf_i>
 8008062:	e7e4      	b.n	800802e <_vfiprintf_r+0x1e6>
 8008064:	080084e6 	.word	0x080084e6
 8008068:	080084ec 	.word	0x080084ec
 800806c:	080084f0 	.word	0x080084f0
 8008070:	08005b4d 	.word	0x08005b4d
 8008074:	08007e25 	.word	0x08007e25

08008078 <__swbuf_r>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	460e      	mov	r6, r1
 800807c:	4614      	mov	r4, r2
 800807e:	4605      	mov	r5, r0
 8008080:	b118      	cbz	r0, 800808a <__swbuf_r+0x12>
 8008082:	6a03      	ldr	r3, [r0, #32]
 8008084:	b90b      	cbnz	r3, 800808a <__swbuf_r+0x12>
 8008086:	f7fe f9a9 	bl	80063dc <__sinit>
 800808a:	69a3      	ldr	r3, [r4, #24]
 800808c:	60a3      	str	r3, [r4, #8]
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	071a      	lsls	r2, r3, #28
 8008092:	d501      	bpl.n	8008098 <__swbuf_r+0x20>
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	b943      	cbnz	r3, 80080aa <__swbuf_r+0x32>
 8008098:	4621      	mov	r1, r4
 800809a:	4628      	mov	r0, r5
 800809c:	f000 f82a 	bl	80080f4 <__swsetup_r>
 80080a0:	b118      	cbz	r0, 80080aa <__swbuf_r+0x32>
 80080a2:	f04f 37ff 	mov.w	r7, #4294967295
 80080a6:	4638      	mov	r0, r7
 80080a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	6922      	ldr	r2, [r4, #16]
 80080ae:	b2f6      	uxtb	r6, r6
 80080b0:	1a98      	subs	r0, r3, r2
 80080b2:	6963      	ldr	r3, [r4, #20]
 80080b4:	4637      	mov	r7, r6
 80080b6:	4283      	cmp	r3, r0
 80080b8:	dc05      	bgt.n	80080c6 <__swbuf_r+0x4e>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4628      	mov	r0, r5
 80080be:	f7ff fdeb 	bl	8007c98 <_fflush_r>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d1ed      	bne.n	80080a2 <__swbuf_r+0x2a>
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	60a3      	str	r3, [r4, #8]
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	6022      	str	r2, [r4, #0]
 80080d2:	701e      	strb	r6, [r3, #0]
 80080d4:	6962      	ldr	r2, [r4, #20]
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	429a      	cmp	r2, r3
 80080da:	d004      	beq.n	80080e6 <__swbuf_r+0x6e>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	07db      	lsls	r3, r3, #31
 80080e0:	d5e1      	bpl.n	80080a6 <__swbuf_r+0x2e>
 80080e2:	2e0a      	cmp	r6, #10
 80080e4:	d1df      	bne.n	80080a6 <__swbuf_r+0x2e>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f7ff fdd5 	bl	8007c98 <_fflush_r>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d0d9      	beq.n	80080a6 <__swbuf_r+0x2e>
 80080f2:	e7d6      	b.n	80080a2 <__swbuf_r+0x2a>

080080f4 <__swsetup_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4b29      	ldr	r3, [pc, #164]	@ (800819c <__swsetup_r+0xa8>)
 80080f8:	4605      	mov	r5, r0
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	460c      	mov	r4, r1
 80080fe:	b118      	cbz	r0, 8008108 <__swsetup_r+0x14>
 8008100:	6a03      	ldr	r3, [r0, #32]
 8008102:	b90b      	cbnz	r3, 8008108 <__swsetup_r+0x14>
 8008104:	f7fe f96a 	bl	80063dc <__sinit>
 8008108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810c:	0719      	lsls	r1, r3, #28
 800810e:	d422      	bmi.n	8008156 <__swsetup_r+0x62>
 8008110:	06da      	lsls	r2, r3, #27
 8008112:	d407      	bmi.n	8008124 <__swsetup_r+0x30>
 8008114:	2209      	movs	r2, #9
 8008116:	602a      	str	r2, [r5, #0]
 8008118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	e033      	b.n	800818c <__swsetup_r+0x98>
 8008124:	0758      	lsls	r0, r3, #29
 8008126:	d512      	bpl.n	800814e <__swsetup_r+0x5a>
 8008128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800812a:	b141      	cbz	r1, 800813e <__swsetup_r+0x4a>
 800812c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008130:	4299      	cmp	r1, r3
 8008132:	d002      	beq.n	800813a <__swsetup_r+0x46>
 8008134:	4628      	mov	r0, r5
 8008136:	f7ff f8b7 	bl	80072a8 <_free_r>
 800813a:	2300      	movs	r3, #0
 800813c:	6363      	str	r3, [r4, #52]	@ 0x34
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	2300      	movs	r3, #0
 8008148:	6063      	str	r3, [r4, #4]
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	f043 0308 	orr.w	r3, r3, #8
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	b94b      	cbnz	r3, 800816e <__swsetup_r+0x7a>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008164:	d003      	beq.n	800816e <__swsetup_r+0x7a>
 8008166:	4621      	mov	r1, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f000 f882 	bl	8008272 <__smakebuf_r>
 800816e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008172:	f013 0201 	ands.w	r2, r3, #1
 8008176:	d00a      	beq.n	800818e <__swsetup_r+0x9a>
 8008178:	2200      	movs	r2, #0
 800817a:	60a2      	str	r2, [r4, #8]
 800817c:	6962      	ldr	r2, [r4, #20]
 800817e:	4252      	negs	r2, r2
 8008180:	61a2      	str	r2, [r4, #24]
 8008182:	6922      	ldr	r2, [r4, #16]
 8008184:	b942      	cbnz	r2, 8008198 <__swsetup_r+0xa4>
 8008186:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800818a:	d1c5      	bne.n	8008118 <__swsetup_r+0x24>
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	0799      	lsls	r1, r3, #30
 8008190:	bf58      	it	pl
 8008192:	6962      	ldrpl	r2, [r4, #20]
 8008194:	60a2      	str	r2, [r4, #8]
 8008196:	e7f4      	b.n	8008182 <__swsetup_r+0x8e>
 8008198:	2000      	movs	r0, #0
 800819a:	e7f7      	b.n	800818c <__swsetup_r+0x98>
 800819c:	20000018 	.word	0x20000018

080081a0 <_raise_r>:
 80081a0:	291f      	cmp	r1, #31
 80081a2:	b538      	push	{r3, r4, r5, lr}
 80081a4:	4605      	mov	r5, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	d904      	bls.n	80081b4 <_raise_r+0x14>
 80081aa:	2316      	movs	r3, #22
 80081ac:	6003      	str	r3, [r0, #0]
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80081b6:	b112      	cbz	r2, 80081be <_raise_r+0x1e>
 80081b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081bc:	b94b      	cbnz	r3, 80081d2 <_raise_r+0x32>
 80081be:	4628      	mov	r0, r5
 80081c0:	f000 f830 	bl	8008224 <_getpid_r>
 80081c4:	4622      	mov	r2, r4
 80081c6:	4601      	mov	r1, r0
 80081c8:	4628      	mov	r0, r5
 80081ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ce:	f000 b817 	b.w	8008200 <_kill_r>
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d00a      	beq.n	80081ec <_raise_r+0x4c>
 80081d6:	1c59      	adds	r1, r3, #1
 80081d8:	d103      	bne.n	80081e2 <_raise_r+0x42>
 80081da:	2316      	movs	r3, #22
 80081dc:	6003      	str	r3, [r0, #0]
 80081de:	2001      	movs	r0, #1
 80081e0:	e7e7      	b.n	80081b2 <_raise_r+0x12>
 80081e2:	2100      	movs	r1, #0
 80081e4:	4620      	mov	r0, r4
 80081e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081ea:	4798      	blx	r3
 80081ec:	2000      	movs	r0, #0
 80081ee:	e7e0      	b.n	80081b2 <_raise_r+0x12>

080081f0 <raise>:
 80081f0:	4b02      	ldr	r3, [pc, #8]	@ (80081fc <raise+0xc>)
 80081f2:	4601      	mov	r1, r0
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	f7ff bfd3 	b.w	80081a0 <_raise_r>
 80081fa:	bf00      	nop
 80081fc:	20000018 	.word	0x20000018

08008200 <_kill_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	2300      	movs	r3, #0
 8008204:	4d06      	ldr	r5, [pc, #24]	@ (8008220 <_kill_r+0x20>)
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	4611      	mov	r1, r2
 800820c:	602b      	str	r3, [r5, #0]
 800820e:	f7f9 f944 	bl	800149a <_kill>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d102      	bne.n	800821c <_kill_r+0x1c>
 8008216:	682b      	ldr	r3, [r5, #0]
 8008218:	b103      	cbz	r3, 800821c <_kill_r+0x1c>
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	bd38      	pop	{r3, r4, r5, pc}
 800821e:	bf00      	nop
 8008220:	20000608 	.word	0x20000608

08008224 <_getpid_r>:
 8008224:	f7f9 b932 	b.w	800148c <_getpid>

08008228 <__swhatbuf_r>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	460c      	mov	r4, r1
 800822c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008230:	4615      	mov	r5, r2
 8008232:	2900      	cmp	r1, #0
 8008234:	461e      	mov	r6, r3
 8008236:	b096      	sub	sp, #88	@ 0x58
 8008238:	da0c      	bge.n	8008254 <__swhatbuf_r+0x2c>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	2100      	movs	r1, #0
 800823e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008242:	bf14      	ite	ne
 8008244:	2340      	movne	r3, #64	@ 0x40
 8008246:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800824a:	2000      	movs	r0, #0
 800824c:	6031      	str	r1, [r6, #0]
 800824e:	602b      	str	r3, [r5, #0]
 8008250:	b016      	add	sp, #88	@ 0x58
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	466a      	mov	r2, sp
 8008256:	f000 f849 	bl	80082ec <_fstat_r>
 800825a:	2800      	cmp	r0, #0
 800825c:	dbed      	blt.n	800823a <__swhatbuf_r+0x12>
 800825e:	9901      	ldr	r1, [sp, #4]
 8008260:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008264:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008268:	4259      	negs	r1, r3
 800826a:	4159      	adcs	r1, r3
 800826c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008270:	e7eb      	b.n	800824a <__swhatbuf_r+0x22>

08008272 <__smakebuf_r>:
 8008272:	898b      	ldrh	r3, [r1, #12]
 8008274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008276:	079d      	lsls	r5, r3, #30
 8008278:	4606      	mov	r6, r0
 800827a:	460c      	mov	r4, r1
 800827c:	d507      	bpl.n	800828e <__smakebuf_r+0x1c>
 800827e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	2301      	movs	r3, #1
 8008288:	6163      	str	r3, [r4, #20]
 800828a:	b003      	add	sp, #12
 800828c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800828e:	466a      	mov	r2, sp
 8008290:	ab01      	add	r3, sp, #4
 8008292:	f7ff ffc9 	bl	8008228 <__swhatbuf_r>
 8008296:	9f00      	ldr	r7, [sp, #0]
 8008298:	4605      	mov	r5, r0
 800829a:	4639      	mov	r1, r7
 800829c:	4630      	mov	r0, r6
 800829e:	f7ff f875 	bl	800738c <_malloc_r>
 80082a2:	b948      	cbnz	r0, 80082b8 <__smakebuf_r+0x46>
 80082a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a8:	059a      	lsls	r2, r3, #22
 80082aa:	d4ee      	bmi.n	800828a <__smakebuf_r+0x18>
 80082ac:	f023 0303 	bic.w	r3, r3, #3
 80082b0:	f043 0302 	orr.w	r3, r3, #2
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	e7e2      	b.n	800827e <__smakebuf_r+0xc>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	9b01      	ldr	r3, [sp, #4]
 80082c6:	6020      	str	r0, [r4, #0]
 80082c8:	b15b      	cbz	r3, 80082e2 <__smakebuf_r+0x70>
 80082ca:	4630      	mov	r0, r6
 80082cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d0:	f000 f81e 	bl	8008310 <_isatty_r>
 80082d4:	b128      	cbz	r0, 80082e2 <__smakebuf_r+0x70>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	f023 0303 	bic.w	r3, r3, #3
 80082dc:	f043 0301 	orr.w	r3, r3, #1
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	431d      	orrs	r5, r3
 80082e6:	81a5      	strh	r5, [r4, #12]
 80082e8:	e7cf      	b.n	800828a <__smakebuf_r+0x18>
	...

080082ec <_fstat_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	2300      	movs	r3, #0
 80082f0:	4d06      	ldr	r5, [pc, #24]	@ (800830c <_fstat_r+0x20>)
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	f7f9 f92d 	bl	8001558 <_fstat>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d102      	bne.n	8008308 <_fstat_r+0x1c>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	b103      	cbz	r3, 8008308 <_fstat_r+0x1c>
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	bf00      	nop
 800830c:	20000608 	.word	0x20000608

08008310 <_isatty_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	2300      	movs	r3, #0
 8008314:	4d05      	ldr	r5, [pc, #20]	@ (800832c <_isatty_r+0x1c>)
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7f9 f92b 	bl	8001576 <_isatty>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_isatty_r+0x1a>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_isatty_r+0x1a>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	20000608 	.word	0x20000608

08008330 <_init>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr

0800833c <_fini>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr
